[ { "title": "How I use Claude Code - Tips for AI-Native Development", "url": "/sinantang.github.io/pr-7/posts/claude-code/", "categories": "AI Development", "tags": "Claude Code, AI, Development, Productivity", "date": "2025-09-19 00:00:00 +0200", "content": " In the age of AI, I often find myself reflecting on this Chinese proverb: “工欲善其事，必先利其器” (If a technician wants to do good work, she must first sharpen her tools). What strikes me is how profoundly true this has become—perhaps more than ever before in the history of software development. The tools we choose don’t just affect our productivity; they fundamentally shape how we think about problems, architect solutions, and collaborate with both humans and AI systems. I’ve spent the past several months deep in the trenches with Claude Code, and what I’ve observed is striking: the productivity gap before and after isn’t just incremental—it’s 10x or even more. Developers who learn to truly collaborate with AI tools are operating in an entirely different paradigm, solving problems at a different level of abstraction while the AI handles implementation details that would have consumed hours or days of human effort. This post documents the techniques and patterns I’ve battle-tested through extensive production and personal use of Claude Code. Context Engineering: An Evolution from Prompt Engineering The AI development community has increasingly adopted the term “context engineering” to describe the practice of structuring information for Large Language Models (LLMs). This approach recognizes that LLMs, similar to human developers, perform better when provided with comprehensive context about the task at hand. This shift from crafting individual prompts to building persistent, structured context has measurably improved the quality and consistency of generated code for me. Configuration Architecture User + Project level CLAUDE.md files Utilizing both global and project-level CLAUDE.md files provides an effective method to drastically improve Claude’s instruction following capabilities and the code quality it can produce. The global CLAUDE.md acts like the “meta-prompt” establishing high level philosophy and principles, while project-level CLAUDE.md contains specific project knowledge and context. Global user-level CLAUDE.md example: # Engineering Philosophy ## Core Beliefs - **Simplicity is the ultimate sophistication** - **Incremental progress over big bangs** - Small changes that compile and pass tests - Avoid over-engineering - YAGNI (You Aren't Gonna Need It) - **Learning from existing code** - Study and plan before implementing - **Clear intent over clever code** - Be boring and obvious ### Simplicity Means - Single responsibility per function/class - Avoid premature abstractions - No clever tricks - choose the boring solution - If you need to explain it, it's too complex ## Design Principles - **Defensive programming** - validate inputs, handle edge cases - **Fail-fast design** - eliminate invalid cases early - **Separation of concerns** - each module does one thing well - **Security by default** - never trust user input Experiment and iterate to find the prompt that works best for your use case. Recently I tried out the popular “Linus Torvalds” prompt (one example) which worked exceptionally well for me and has become a part of my Claude Code meta-prompt. Project-level CLAUDE.md focuses on codebase-specific patterns such as: ## Project Structure repo/ ├── src/ │ └── ... ├── tests/ # Unit test suite ├── e2e_tests/ # End-to-end integration tests ├── docs/ # Documentation │ ├── architecture/ # System design docs │ ├── development/ # Development guides │ ├── deployment/ # Deployment procedures │ └── updates/ # Project updates ├── scripts/ # SQL scripts and utilities ├── deploy/ # Deployment configurations ├── pyproject.toml # Project configuration └── mkdocs.yml # Documentation config ## Comments &amp; Documentation - Comments explain **why**, not what - Keep comments close to code (inline &gt; separate docs) - Update comments when code changes - Document key decisions and trade-offs ## Python Imports and Path Guidelines - Use absolute imports throughout the codebase, e.g. `from src.api import HTTPServerApp`. - Never use relative imports (`.module`) or sys.path manipulation - Run all commands with UV: e.g. `uv run python script.py` Custom Commands for Common Operations Custom slash commands reduce repetition and standardize common workflows. These commands, stored in ~/.claude/commands/, become available across all sessions. I frequently use the /test, /lint, /pr-describe custom commands throughout my dev process. E.g., # ~/.claude/commands/test.md --- description: fix unit tests model: claude-sonnet-4-20250514 --- Run all tests and fix failures incrementally: 1. Execute the test suite 2. Identify failing tests 3. Fix issues sequentially, re-running after each fix 4. Provide a summary of changes made Subagents for Specialized Tasks Subagents enable parallel task execution within a shared context. This new-ish feature addresses the common pattern of running multiple Claude Code sessions for different tasks in the same project. You can easily define an agent using natural language in a Markdown file in ~/.claude/agents/. Check out the example subagents “code-reviewer”, “unit-test-writer” and “debugger” templates from Anthropic. I also defined my own subagent to improve my prompt. For example, after I have agreed on the implementation plan written by one Claude agent, I would often invoke the code-reviwer subagent in another Claude Code session (Use the code-reviwer subagent to review the implementation plan in docs/...). Production Development Workflows Iterative Development Phases Analysis of multiple projects has led to a five-phase workflow that balances automation with manual oversight: Exploration: Opus model analyzes codebase structure and identifies integration points Planning: Utilize Opus for architectural decisions and design Implementation: Deploy Sonnet 4 for detailed coding tasks Testing: Engage specialized subagents for test coverage Commit: Review and document changes The Plan mode Different Claude models demonstrate varying strengths. Opus performs well in strategic planning and architectural design but shows limitations in detailed implementation. Sonnet 4 excels at code generation, unit test creation, and concrete implementation tasks. This observation has informed a practical approach: using Opus for architectural decisions and Sonnet for implementation details. The introduction of Plan mode has made the switch between models even more intuitive. Documentation as Context Persistence Documentation serves a dual purpose: team knowledge sharing and context maintenance across Claude Code sessions. Complex features benefit from pre-implementation documentation: # docs/development/2025-08-08-authentication-refactoring-plan.md # [Feature Name] Implementation Plan ## Overview [Brief description of what you're building and why it's needed. 1-2 sentences maximum.] ## Motivation [List the key drivers for this implementation. Use bullet points with bold labels:] - **Performance**: [Performance improvements expected] - **Extensibility**: [How this enables future features] - **Clean Architecture**: [Architectural benefits] - **User Experience**: [User-facing improvements] ## Architecture Design ... ## Implementation Checklist ### Stage 1: Foundation - [ ] [Analysis task] - [ ] [Design task] - [ ] [Setup task] ### Stage 2: [Data Layer Name] - [ ] [Implementation task] - [ ] [Testing task] - [ ] [Validation task] ### Stage 3: [Business Logic Name] - [ ] [Implementation task] - [ ] [Integration task] - [ ] [Testing task] ### Stage 4: Documentation &amp; Testing - [ ] [Documentation task] - [ ] [Performance verification task] - [ ] [Final validation task] --- **Status**: [Planning|In Progress|Complete] **Next**: [Next immediate action] **Estimated Completion**: [Time estimate] This approach addresses context window limitations by allowing Claude to resume work with full understanding of prior decisions and progress. Multi-Clauding Operating multiple Claude Code sessions has proven effective for complex development tasks. A typical setup includes: Primary session for planning and core implementation Secondary session for code review and test generation Optional third session for documentation or exploratory work When combined with git worktrees, this configuration enables safe experimentation with alternative implementations without affecting the main development branch. Feedback Mechanisms The quality of Claude’s output correlates with the feedback quality provided, as LLMs are trained by feedback mechanisms, like rewards or penalties, during the reinforment training process. Three feedback categories have proven particularly effective: Syntactic Feedback: Compilation errors and linting issues provide clear signals that Claude processes efficiently. Behavioral Feedback: Test results offer detailed information about functionality. Comprehensive test suites improve Claude’s ability to identify and correct issues. Visual Feedback: For frontend development, screenshots often communicate UI issues much more effectively than text descriptions. Claude’s image processing capabilities make this approach particularly useful. Iterative Development and Course Correction Experience suggests that early intervention and guidance produce better results than allowing Claude to proceed far into a suboptimal solution. Key practices: Allocating substantial time (often exceeding 50% of total task time for me) to initial requirement definition and context setup Providing early guidance when implementation approaches appear suboptimal Rolling back all changes and restarting when Claude is stuck rather than attempting incremental fixes Treating Claude as a capable but guidance-requiring development partner Practical Observations Extended work with Claude Code has revealed several patterns worth noting. The tool functions most effectively not as an autonomous system but as a collaborative partner requiring architectural guidance and strategic direction. Success depends less on the tool’s inherent capabilities and more on the user’s ability to structure context, provide clear requirements, and establish effective feedback loops. The distinction between Claude Code and traditional development tools lies in its collaborative nature. Rather than simple code completion or generation, it offers a development partnership where human developers focus on architecture and strategy while Claude handles implementation details under guidance. The evolution toward AI-assisted development represents a shift in how software is created, not merely in the tools used. Understanding how to effectively communicate intent, maintain context, and guide AI systems through complex implementation tasks has become a valuable addition to the developer’s skill set. " }, { "title": "My Reading Year, 2022", "url": "/sinantang.github.io/pr-7/posts/reading-year-2022/", "categories": "Book Review", "tags": "reading, learning, books", "date": "2022-12-30 00:00:00 +0100", "content": "Best reads of 2022 《Tiny habbits 福格行为模型》by BJ Fogg 《Infinite powers 微积分的力量》by Steven Strogatz 《The psychology of money 金钱心理学》by Morgan Housel . Here’s a list of books I’ve read in 2022 and my thoughts on each one of them — Nonfiction Personal Finances The psychology of money |Morgan Housel 我个人对这本投资理财书的推荐程度超过《小狗钱钱》和《穷爸富爸》。借鉴意义比后面这两本强很多，书的内容也离我们现在的生活更近（出版于2020年）。 为什么投资理财这件纸面上看起来并不复杂的事，每个人在生活中实际操作起来却很难呢——这是我读过的唯一把这个问题分析透彻的书！看完后改变了我对投资这件事的一些看法。 作者不仅写关于钱的数据和概率，也写了数据之外的洞察，比如永远不要以为用历史经验就可以预测未来。 之前我推荐过Morgan Housel做客Tim Ferriss show的一期播客，不想直接看书的可以先去听那期节目，再看书。 Autobiography / Memoir Maybe you should talk to someone 也许你该找人聊聊 | Lori Gottlieb 这本书是一位心理咨询师的回忆录，讲述了几个发生在心理诊疗室的深刻故事。 这是一本关于爱、亲密关系、脆弱、死亡、丧失、创伤的书，也是一本关于真诚、自我觉察、成长和改变的书。 作者本人的经历还挺不寻常的。本科毕业后去好莱坞当助理，在影视行业做了几年制作后不满足，于是去读医学院，几年之后觉得不是自己想要的于是中途退学，然后去当记者写专栏文章。 （一个小插曲：37岁时和当时男友分手后意识到自己的生育期快要过去但还有找到合适伴侣，于是通过精子库在一两年后拥有了自己的孩子。） 快40岁的时候作者决定重返大学，修了临床心理学硕士学位，又通过一段时间实习训练后终于在40+时正式成为一名心理咨询师，此时作者才感到终于找到了自己的calling！现在50多岁的Lori除了做心理咨询师外，同时写书写专栏上节目，这本《Maybe you should talk to someone》也正在被改编成电视剧，可以说现在正是事业的新高峰！ 这本书我也很推荐！书中写透了很多生活哲理。目睹别人剖析自我、接受现实、拥抱成长的过程，同时也是了解自己的过程。而且作者写得很真诚动人，内容也很吸引人——很可能因为作者早年在影视行业工作的经历，这本书写得像剧本，画面感超强。 我在读到书中Julie的故事结尾时大哭。这也许是我看过的最美的关于死亡的故事，从没想过一个不幸的年轻人可以以这样的人生态度走上通向死亡的旅途。 Dear girls | Ali Wong 亚裔脱口秀演员Ali Wong写给两个女儿的一本个人回忆录。Audible上有声书是她本人朗读的，表演成分很加分。这本自传风格轻松欢乐但内容不乏深度。 我听完这本书后更佩服Ali了，她的存在同时突破了亚裔和女性普遍存在的一些短板，对亚裔女性形象的多样化做出了很大贡献。 另一个感慨：喜剧和幽默的力量很强大，可以让人在大笑中重拾对生活的热爱和信心。有空多看看优秀喜剧作品，可以学习用幽默来化解、调剂生活中的不顺和乏味的能力。 Neuroscience What’s going on in there?: how the brain and mind develop in the first five years of life | Lise Eliot 这是一本神经科学家写的从受孕到5岁这段最关键的大脑发育期间重要的大脑发育里程碑，包括感官、运动技能、社会和情感行为以及注意力、语言、记忆、推理和智力等心理功能的演变。我从没读过像这本书这样虽面向大众，但写得非常专业详细却易懂的脑科学科普书，读起来对于脑科学爱好者来说特别过瘾！ 唯一不足是这本书出版时间较长，缺乏最新的脑科学研究进展。但还是瑕不掩瑜。而且出版时间“久远”也有其好处：有些在现在估计算是政治不正确的人类智商研究发现，在这本书里还能读到。 We are our brains: from the womb to Alzheimer’s 我即我脑 | Dick Swaab 这两本讲脑科学的科普书我是一起看的，因为内容主题有很多重合，作者也都是专业人士。 然而两本书放在一起看会发现这两位作者（+背后编辑）的写作水平和专业态度相差很大。 《We are our brains》这本书很多地方都让人感觉像是没经过专业编辑之手，直接拿着作者手稿就印书了。大部分内容非常综述，没有引用文献。 《What’s going on in there》则写得严谨多了，引用加得很仔细。 举个例子，这两本书都提到妈妈孕期压力过大可能会影响胎儿的性取向。《What’s going on in there》对这个假说，从动物实验中获得的可靠证据和其中原理讲起，论述动物实验对人类的参考性，以及目前学界所知的从人身上取得的有限论据。《We are our brains》却几乎在把这个假说当作理论来写，压根没提动物实验的事儿…… 还有两位作者的专业态度和同理心也差距很大。 比如在孕期吸烟对胎儿的影响这一节—— 《We are our brains》作者说完孕期吸烟的坏处和对医疗系统产生的负担后，最后加了一句，为了孩子健康难道不值得尝试戒烟吗？那高高在上的说教模样简直跃然纸上。作者难道不知道烟瘾酒瘾药物上瘾并不是一件想戒就能轻松快速戒掉的么…… 《What’s going on in there》作者则是很专业地写到，并不是所有人都能很快戒掉烟瘾，但如果能尽量减少摄入量，也总比完全不控制要好。然后还定量写了，在什么阶段吸烟的负面影响最大，为什么，如果不能全程不抽烟，那在哪个阶段抽烟的影响最小。 《What’s going on in there》是20多年前初版的，《We are our brains》是10年初版的。但后一本书的文风更像是那种离真实患者距离很远的上世纪权威人士的感觉…… Career Development / Self Improvement Machiavelli for women | Stacey Vanek Smith “写给职场女性的马基雅维利学”——一本最近出的新书，讲女性如何通过扬长避短获得职业成功。 和一些更老派的给职场女性的建议书（如《Nice girls don’t get the corner office》）相比，这本书明显更加现代。 作者引用了很多研究调查和数据，不仅写了职场中性别不平等的现状，还着重写了女性如何根据现实状况和自身优劣势调整职场策略以得到理想的结果，而不是一味地在以男性为主导的职场向男性思维、行动方式看齐。 比如我之前写的这条微博。 这本书里实用的内容还挺多的，比如最后有一章专讲negotiation（女性相对男性的弱点技能之一），写了在升职加薪场景下的谈判技巧。我觉得这部分对于这个问题不是特别擅长的同学们会很有借鉴作用～ Tiny habbits 福格行为模型 | BJ Fogg 非常推荐这本讲行为模式的书！书里有好几个要点我看了后就好像一下子被打通了如何改掉坏习惯形成新习惯的任督二脉。 比如，习惯的形成不是靠重复xx天或达到什么频率，而是要靠直接引发积极情绪。 一个行为若能直接带来积极情绪，那很快就会形成习惯；相对地，一个行为若给人带来痛苦，那重复再多次也不会自然而然地形成习惯。打通奖赏机制以形成新习惯的思路，以前并不是不知道，但并没有很好地应用到生活中。看了这本书后我意识到了，大部分人不能形成新习惯的问题在于，一是把初始目标定得过高了，二是没有设计好能自己控制的奖赏机制，依赖于外界或不可控的大脑激素分泌作为奖赏。实际上奖赏机制完全可以自己设计，再通过把触发奖赏机制的行为门槛定得极低而主动开启正向循环。 另一个我很喜欢这本书理论的点：作者指出习惯的形成不能依靠内在或外在动机（motivation），而是要通过设计一个可控的行为模式，使我们能在动力最低的时刻也能去完成这个行为。比如，靠高内在动力才能完成的行为（如，没运动习惯的人想每天高强度运动30分钟）注定会很快失败；靠设立外部奖赏（“打卡满xx天就给自己买个啥”）也是不可持续的。 书里的很多要点，除了应用的自己生活中外，还可以用以帮助身边其他人做出改变（有一章专门讲这个），以及在产品设计上用来帮用户形成新行为。 作者有一期做客Guy Raz的播客节目“Wisdom from the top”聊这本书。没空看书的还可以听听那期播客，也覆盖了几个最重要论点。 Range: why generalists triumph in a specialized world | David Epstein 这本书讲了为什么在现代社会没必要追求过早、过度的专业/技能细分，“赢在起跑线上”这类思想过时在哪里，以及充分探索不同职业发展路径，在成年后依然对灵活转换方向持开放心态的重要性。 人生不是线性的，有时为了更进一步之前必须要先下降一段。这一点以前聊到“爬山算法”的时候就写过。 不过，即使在思想上能接受非线性上升的人生可能性，回到现实中大部分人还是挺难接受暂时性地落后于同龄人或目前自己的境况的。比如，因为焦虑沉没成本而无法对已经没啥前途或自己根本不喜欢的工作放手。 有几个我自己实验下来很有效的方法可以让自己不那么被这种比较心态（social comparison）和焦虑沉默成本裹挟着止步不前—— 拉成比较的时间轴。人生很长，多设想5/10/20/30年后的自己，而不是下个月或明年的自己。以长期主义的视角来看待自己目前需要作出的选择。 升级比较的对象。与其跟身边同龄人比来比去，不如跟大佬比。跟更厉害的人比起来，身边那些没啥格局的攀比内容（包、房子、孩子学校…）一下子就显得超级无聊了。 关于“与人比较”的话题，之前推荐过the Happiness Lab的一期播客，有需要的朋友们可以再去听一听。 Never split the difference | Chris Voss 前FBI谈判专家写的一本经典谈判技巧书。每一章都结合了作者以前的真实工作经历写了一个具体的谈判沟通技巧（比如很多人现在都很熟悉的“mirroring”技巧，重复模仿对方的说话内容或风格以获得对方信任），可读性很强。 我读完后的一大感受：搞话术真是需要天赋。起码你要很享受这个过程：全程主动聆听一个你也许并不感兴趣的人在说什么，从中分析出对方的动机、所知信息和沟通风格，随时保持注意力高度集中，确保自己说出的每句话都能推动对话向自己想要的目标。 The almanack of Naval Ravikant: a guide to wealth and happiness 纳瓦尔宝典 | Naval Ravikant 这是一个Naval Ravikant的读者主动整理总结了Naval的经典推特内容并制成电子版免费发布在网上的一本书。主要是Naval对财富和幸福两大主题的一些简洁犀利的观点合集，包括以前互联网上很火的一篇来自Naval的“如何不靠运气致富”的内容。 有空时随手翻几页启发一下挺好的，但如果不能引发自己更深的思考，不能带来行为上的改变，读了也会以光速忘记。 Education The gardener and the carpenter 园丁与木匠 | Alison Gopnik 这不是一本基于个人经验主义的鸡汤育儿书，而是美国认知学家写的一本关于儿童发展的书。 作者的最主要观点：父母育儿的目标并不应该是像木匠一样把孩子雕刻成具体的模型，而是应该给孩子空间培养探索精神、创造力和灵活的思维方式，让他们长大后有能力去应对多变的环境。 培养探索精神与创造力与人类经历的漫长童年息息相关。在宽松不功利的环境中玩耍、游戏是儿童最好的学习方式。这里的学习不是指学具体的知识，而是更基础更重要的认知能力，如社交技能、元认知思维方式、学习习惯等。 我觉得这本书适合自身认知能力达到一定水平的家长，不然可能也读不出好来…… Prepared: what kids need for a fulfilled life | Diane Tavenner 一本比尔盖茨推荐过的教育书籍。 作者Diane是美国一流公立学校系统Summit的创始人。 Summit学校系统用创新的教育方法培养优秀的学生。Summit并不专门挑选优秀学生，却对所有学生都承诺让他们高中毕业并进入大学。Summit教育思想与众不同的一点是，不仅帮学生进入理想的学校和专业，更强调让学生知道如何开启有意义的成年人生。 Summit的教育理念建立在三大基本方法之上： self-directed learning 自主学习， project-based learning 项目制学习， mentoring 导师制度。 具体了解下来，summit很像是把运作良好的大学里的理想学习方式搬到中小学中去了。 Summit强调培养的学生能力和品质，很多都是我从小所受教育里所缺乏的，尤其是自主、独立的能力。 我从小在学校里基本都是受到环境明确的推力在往前走，学习的道路方向都特别明确，没什么特别需要个人自主探索的部分。第一次没人管，必须得自己为人生选择完全负责的时刻是本科准备出国交换的时候。但那时面对要为自己人生负责的境况时，第一反应不是激动好奇，而是害怕恐惧。 希望我的孩子以后会更早懂得自己想要追求什么，且拥有自主独立追求个人目标的勇气和能力。 Science Infinite powers 微积分的力量 | Steven Strogatz 这可能是我看过的最棒的数学科普书！ 这本书特意读得比较慢，一是因为写得很好，阅读体验很快乐，所以不想太快看完；二是因为后面几章内容（偏微分方程、弦理论）很多都是我上学时没正经学过的知识，慢点读有助于理解。 这本书作者是康奈尔大学的数学教授，但他特别善于把复杂概念以非常形象生动的类比和例子解释给大众读者。比如下面这个极妙的类比—— 「通过对这些预测和极其精确的实验测量结果进行比较，他们已经证明这个理论与现实的吻合程度达到了小数点后8位，优于亿分之一。这是一种说明该理论基本正确的奇特方式。我们通常很难找到有效的类比来解释这么大的数字，但我尝试着打这样一个比方： 1亿秒等于3.17年，要把某个结果精确到亿分之一，就像从此时此刻起，不借助时钟或闹钟，恰好在3.17年后的那一秒，精确地打出一个响指。」 用3.17年打一个响指的类比实在太妙了！！ 如果你在工作中是一位专业人士，若是能学会作者向通俗读者讲解专业概念的几点沟通技巧，肯定会对你的工作本身大有裨益。 作者Steven Strogatz还写过另外3本数学科普书，都得过各种图书奖，以后有机会我得慢慢都看了。 Astrophysics for people in a hurry | Neil Tyson 美国知名天体物理学家兼科普作家Neil Tyson写的“给大忙人看的天体物理学书”。果然很薄，有声书才4小时。 Neil Tyson非常擅长把科学概念掰开揉碎以吸引人的方式讲给非专业人士听。这本书连中学生都能不费劲读懂。 Books from 37signals 去年继续刷了4本来自 37signals (一家小型软件公司，曾用名Basecamp) 的书，可见我心目中的梦中情司是什么样的了。 Rework | Jason Fried, DHH 《Rework》虽是Basecamp创始人和CTO 12年前出版的书，但里面的内容现在看来并不过时。 看这本书的过程中，我在想一个问题，经常我们说一家公司行或不行，比如管理水平、公司文化，它具体指的是什么呢？ 从《Rework》中，我学到一家优秀公司可以是这样的—— 对事： 追求本质而非样子。 不惧怕放弃。 少开会。 少写计划。 早点开始ship something。 不盲目追求增长。 真诚。 对人： 把员工当作成年人看待。 创造一个人们可以自主独立工作，发挥潜力创造价值的良好环境，而不是想着要从外面挖个大人物来拯救灾难。 所有人都应该做事（而非单纯指挥别人做事）。 所有人都应该和用户有一点直接互动。 It doesn’t have to be crazy at work | Jason Fried, DHH 我从作者Jason Fried &amp; DHH的文章里学到的最重要的思想：当你有不同于主流不同于别人的想法时，应该先去实践验证自己的想法，如果成功了，那就完全没必要在意所谓“主流”的声音是什么。 不盲目扩张，不看市场占有率，不追求年年增长，不超时工作不打鸡血，不区别对待大客户，不写“企业3/5/10年计划”，不强迫老用户迁移到软件新版本——作者创业并不是为了不走寻常路而故意搞非主流，而是自己认为这么做是对的，就那样去做了。 Remote: office not required | DHH, Jason Fried Basecamp作为一个二十几年前创立时就提供远程工作选项的公司，在这个话题上独具话语权。 作为一个远程工作至今已超过三年的人，我对书里写到的远程工作的优势、局限和优化方法还挺有感悟的。 远程工作方式并不是把所有人都从办公室里赶出去就行了。成功、可持续的远程工作方式需要很多对工作方法协作工具的具体测试、调整和创新。 对于很多公司来说，这两三年因疫情不得不让员工远程工作，这个过程中发现这种工作模式的种种问题，于是计划在疫情结束后让大家重新回到办公室。但较少公司此时停下来反思，远程工作出现的问题，是不是可以通过新的办法来解决优化，是不是一定要靠回归到传统办公室工作才行。而员工往往更倾向于时间地点都灵活的工作方式，所以现在在社会基本恢复常态之后，不少公司与员工在此议题上的矛盾还是挺激烈的。 这本书虽然是十年前写的，但两位作者作为一家成功的软件公司创始人/CTO，从创业之初就开始全员远程工作，在这个过程中积累了很多对工作方式的经验和思考，这些思考对现在的公司以及员工也很有参考意义。 比如，老板对远程工作的一大疑虑是担心员工不在自己眼皮底下就会摸鱼。但实际上，超时工作才是更应该担心的远程工作会带来的问题。 我自己也觉得是如此。因为在家工作很难区分私人生活与工作的界限，所以很容易一直想着工作上的事，导致超时工作。再加上灵活工作时间意味着你的同事可能会在不同时间段工作，这容易带来焦虑和愧疚感，觉得自己好像工作不够同事努力。这种愧疚感是我远程工作这几年来体会到的问题之一。 作者所提倡的远程工作方式并不仅仅是传统办公室工作的平行替代品，而是一种更文明更先进的人与人之间协作沟通，并共同创造价值的工作形式。 Getting real | Basecamp 在开发网络应用程序的前十年，37signals靠7人的小开发团队在无外部投资和借债的前提下，先后发布5款成功的软件产品。这本书写的就是37signals的业务、设计、编程和营销理念和方法。虽然比其他来自37signals的只写理念的书更具体实用，但还是有点偏笼统。 Others The end of the world is just the beginning | Peter Zeihan 这是一本讲“去全球化”的新书，作者从交通物流、金融、能源、材料、制造业、农业几大行业的角度讲了他对接下来去全球化趋势的理解。 我觉得翻翻还不错，不仅可以通过数据来了解各大行业的现状和过去发展历史，从不同行业来看全球化至今对我们的巨大影响，还可以跟着作者思考一下接下来的世界有哪些危机和机会。 作者本人立场很明显，从情感上来说我觉得大部分人都不会太喜欢他提出的种种论点。反正就一听，当听评书，补充另一种你可能以前没想过的思路。 作者总体上对未来很悲观，不过我觉得这也是一种卖书营销策略吧，一说到世界末日大家都忍不住要凑来听一听了。人脑的认知偏差本就是如此，只讲正面新闻的媒体没多少人看，负面新闻才能挑动大部分人的情绪和注意力。 4000 weeks: time management for mortals | Oliver Burkeman 一本讲时间管理的畅销书。这个话题真是经久不衰，每年都有很多人在写这个话题，也都会出现畅销书，可见绝大部分书都没啥用，不然大家就不用再看新出的时间管理书了…… 这本书的主要论点一句话总结：你不可能完成所有自己想做的事，当你选择去做a时，就等于放弃bcd等其他无限选项。时间管理的目标不是要去做更多的事，而是要做出“我要放弃什么”的选择。 道理也不复杂，书写得太洋洋洒洒，没必要花时间看完全书…… The subtle art of not giving a f*ck | Mark Manson 口水畅销书，没啥读的必要…… Fiction 我是你爸爸 | 王朔 王朔写得太好了，好到令我词穷。 如此细腻真实的中式父子关系，以几十年前中国社会变化为背景，在作者笔下生动有灵气。对马林生的内心世界描写得尤其深入真实，有几段让我觉得都能和他共情了…… 前半截读起来会让读者不由自主地都站在儿子马锐这边，觉得当爹的马林生真是又自负又自卑。读到后面就慢慢体会到另一层事实，那就是马林生真的很爱儿子也很努力想要当好父亲这个角色，但当家长实在是太难了。在新旧交替的时代背景下作为一个非常普通的老百姓，做一份自己没体验过没学习过的终生工作（当家长），太难了。 结论：对难度系数剧增的人生没做好准备的时候，还是不要考虑孩子比较好…… 红拂夜奔 | 王小波 惭愧直到现在才读过《红拂夜奔》。读过之后才懂为什么即使在王小波的众多作品中这部小说的地位也这么高。《红拂夜奔》里的每一个人物都像是浓缩了几百年来无数个相似的中国人的影像，很多对话和情节似真实又似荒诞，似讽刺又似一本正经。 读优秀的文学作品的确是一种至高的精神享受。很遗憾现在内地文坛半死不活，要看经典优秀的中文文学还是得往几十年前找。 爱食记 | 神圣午睡 最爱的微博博主之一 @神圣午睡 去年完结的新小说！一部和美食与爱情有关的都市轻喜剧，希望能早日被搬上荧幕。 Further reading My Reading Year, 2021 (in Chinese) My book recommendations, 2020 (Bilingual) Tech book recommendations, 2020 (in English) What I read in 2019 (in Chinese) What I read in 2018 (in Chinese) What I read in 2017 (in Chinese) " }, { "title": "Books of the Year, 2014-2022", "url": "/sinantang.github.io/pr-7/posts/books-of-the-year-2014-2022/", "categories": "Book Review", "tags": "books", "date": "2022-04-23 00:00:00 +0200", "content": "趁着世界读书日，我今天总结了一下过去8年里当年读过的对我影响最大的书。 挑选标准： 该书大幅改变了我对一个议题的认知，或从此改变了我日常生活中思维方式的一部分，或非常美，让我忍不住向每一位朋友推荐。 我没具体统计是从我看过的多少本书里选出来的，也许200本左右吧。 （中文书名表示我读的是中文书或中文版，英文名表示读的英文。） 2014: 《贫穷的本质》by 阿比吉特·班纳吉 &amp; 埃斯特·迪弗洛 2015: 《枪炮、病菌与钢铁》by 贾雷德·戴蒙德 2016: 《Mindset》by Carol Dweck 2017: 《Beyond Feelings》by Vincent Ryan Ruggiero 2018: 《Surely You’re Joking, Mr. Feynman》by Richard Feynman 2019: 《Skin in the Game》by Nassim Nicholas Taleb 《A Guide to the Good Life》by William Braxton Irvine 《斯通纳》by 约翰·威廉姆斯 2020: 《Head First Design Patterns》O’Reilly Media 《如何结交比你更优秀的人》by 康妮 2021: 《论中国》by 基辛格 《A Thousand Brains》by Jeff Hawkins 《Designing Your Life》by Bill Burnett and Dave Evans 2022: 《The Psychology of Money》by Morgan Housel 《Tiny habbits》by BJ Fogg 《Infinite powers》by Steven Strogatz " }, { "title": "Interviewing Dipti Dhawan -- beating Monday blues with weekly planning, tips for aspiring managers, and the empowerment of motherhood", "url": "/sinantang.github.io/pr-7/posts/dipti/", "categories": "Interviews", "tags": "career, engineering, leadership", "date": "2022-03-31 00:00:00 +0200", "content": " To celebrate International Women’s Day and Women’s History Month in March, I’m interviewing 4 exceptional female professionals who I admire to talk about topics on career development, leadership and gender equality in STEM. My final guest is Dipti Dhawan, VP of Engineering at omni:us with 14 years of international experience in Strategy Consulting, Project Management, and Organizational Change Management in tech. Dipti shared her experience navigating her way from computer science to strategy and management across different countries. We also touched on topics like what makes a leader successful in tech, how to approach technical / management tracks, and the empowerment of motherhood. At the end, Dipti even shared 3 book / newsletter recommendations for professionals in STEM! Here’s a summary of our conversations. Please enjoy! Meet Dipti Dhawan Sinan: Can you tell us your story entering the STEM field? Dipti: Science has always fascinated me. It seemed like magic to start with and then came the understanding of experiments, assumptions &amp; hypotheses. These positive childhood experiences led to pursuing a study and career in STEM, which is a very straightforward and natural choice in India. The ‘magic’ behind Super Mario Bros and the logic behind Microsoft Windows were the first steps into finding my passion towards Computer Science. Sinan: What does your normal day at work look like? Can you share with us your favorite productivity tip that keeps your day going? Dipti: A normal workday is usually quickly dictated by my calendar. In terms of planning and getting work done, I look at goals I set out for the whole week. I don’t work on a day-to-day basis; I work on a weekly basis. This was a habit I got into right out of college and a huge tip shared by one of my first managers. 15 years back it seemed like a chore, but over the years it’s been the most valuable tool. I’m hugely grateful to her for it! I spend 15-30 mins of my Sunday evenings planning for what I want to achieve in my upcoming work week. It helps me to avoid Monday blues. I make a short checklist. The sense of achievement from striking through the items is honestly unmatched. For tools, it’s blockers in my calendars and Notes on Mac – very straight-forward as I try to keep tooling to a minimum. Sinan: What’s the biggest challenge that you have encountered in your career, and how did you overcome it? Dipti: I made a conscious choice switching my career from a Computer Science engineer to an Organizational Behavior &amp; Development specialist after getting my MBA degree. 5 to 6 years into this switch, I moved countries and came to Berlin where strategy and organizational behavior was vastly under-appreciated, which was even more challenging for me as a non-German-speaker. I found myself stuck in an impossible space and had to quickly identify foot-in-the-door opportunities. This is where the world of Agile development really opened up. I was able to use my knowledge as an engineer, a project manager and an Organizational Behavior specialist to map into the role of a Scrum-master. So, from today’s point of view, I think I made some good choices by keeping an open mind for the career that may be formed and yet keeping rooted to my passion of Computer Science, people and behaviors! Besides, I always find ‘now’ to be the most challenging as the future of most actions is unknown. So truly, this is ongoing. The current challenge for me is to kickstart out of the pandemic lull where community learning and growth got affected. I am figuring out the next thing I want to study and possibly even get a certification for. Sinan: What has been your proudest accomplishment in your career over the years? Dipti: I’m a work in progress with all my energies being spent in learning and growing at work and in personal life; so this space where I feel a huge sense of accomplishment is yet to be formulated – I’ll keep you posted ;) On Leadership Sinan: What do you think makes a leader successful in the tech world? Dipti: Authenticity. Being true to who you are and letting your team see that open the space up but also make you very vulnerable. From here it’s on you how you utilize this trust and vulnerability. As a tech leader, the topics on the plate can be very vast in scale, complexity and impact. So having this level of trust helps you seek help, but also lets your team see your direct strengths and weaknesses; you have to be ready to be coached bottom-up. I find this refreshing as it always makes me learn new things. But I also avoid falling into the trap of micro-management and delegation. As a leader, when you see what you can learn from your teams, it’s easier to distribute accountabilities, which in turn helps to identify blockers at a meta or cross-functional level. In the tech world, of course, having an understanding of the solutions and the product also goes together. Being up to speed on what choices the teams are making and the blockers they are solving is important, so you can course correct as needed. But most importantly, know your own gaps so you can fill in with the technical solutions. Constantly reading about the advancements in the internal tech stack adapted by the teams keeps me relevant. Sinan: What made you decide to take your current role? How should one decide between the management or technical expert growth track? Dipti: Strategy and decision making drive my passion to work – this has been a constant. In my current role, I’ve found the space to utilize these skills, but I’ve also had enough room to grow and learn new topics. Previously I had a chance to work with a high-potential team building NLP &amp; ML based features for an established product which gave me a glimpse into the power of AI to solve problems. So when this role at omni:us came along, it seemed like a great learning curve in both technology and management for me. I had some good talks with the teams before joining, so the cultural fit also matched. I felt that this would be the place where I can actively contribute while having fun! Generally speaking, if one has to decide between the management or technical expert track, I believe you need to understand the intentions behind why you’d choose one over the other; besides, there are always roles which combine both the tracks too, leading into a generalist profile which can be more beneficial if you want to aim at taking up a C-level role. Technical experts are always going to be in high-demand as legacy systems will require high experience in core problems. You also have to keep in mind that understanding and working with complimentary technologies becomes much more critical in this career track. If you want to make a choice between the two, definitely ask yourself: a) what is the intention for making a choice; b) which choice has a greater learning curve and do I want to pursue this learning; c) how does this choice affect me in 1 / 2 / 5 years’ time; d) talk to a mentor or some individuals who have had a similar career journey to understand what your options might be; e) make this a well-reflected decision for a longer commitment of time. Sinan: Do you have advice for early-career individuals who are considering the management track? Dipti: I made a choice for the management track very early into my career. In retrospect, I do wish I would have still continued keeping a part of my role to be hands-on coding, however this choice helped me make stronger career path choices along the way. When it’s early in your career, I would advise that you get a mentor who you trust to advise you on the choices you have, the consequences that may come and the risk you take. These conversations not only bring in a diverse opinion but also helps you keep the focus on yourself – which can be lost rather easily as we get through the grind. Sinan: Do you think leadership skills are innate or can be learned? Dipti: To me, leadership is an innate mindset. You have to feel responsible for making a change and then you drive it forward. Taking accountability is also a very strong leadership trait. So in general you can coach yourself into taking up challenges and driving them to results. There are skills that can be trained for, and you can learn good project delivery and communication with such experiences. However, leadership is not a list of items or a checklist – you have to be intrinsically motivated to be a leader. There is certainty of failure that comes with leadership and having the right reasons helps me come out of such humps. However, if it is more about management, these skills can be trained for in a more straight-forward way. Women in STEM Sinan: We’re all aware that there’s a much lower ratio of women in management roles compared to men. Although based on my experience working with various managers, I have to admit that in general I have had a better experience with female managers. I do believe that women can make great leaders in the workplace. What kind of advantages do you think women possess to become a great manager? Dipti: I hope none of my male managers read this, but I agree :D The empathy and open-mindedness that I have experienced with female leaders are unlike what I have experienced with male leaders. In general, I believe women have the desire to learn from their life experiences – even more so if you want to be in a leadership role. I also constantly battle the line between being considered as a counselor – which I certainly do not aim at being and coaching someone by sharing my experiences. However, this is the space of vulnerability that also works in our favor to be better managers. The female managers I’ve had across my career have time and again shared the failures they experienced and how I could avoid the same for myself – such discussions do not come up as easily otherwise. The idea of coaching and the sense of responsibility to support the female community is also strong for me personally. Sinan: Some research shows that women are paid consistently less than men for the same work, especially when negotiation is involved to determine the pay. What are your thoughts on this? What advice would you give to fellow female professionals who don’t feel the most comfortable vouching for themselves and negotiating for a higher salary? Dipti: I’ve been very aware of this and have consistently spoken to my managers about it where I feel there is a discrepancy. I’ve also made allies in the company who will speak about the pay gap without thinking of it as a taboo. This is important as it gives confidence and helps navigate the discussions when sensitivity might be needed. If I personally don’t feel comfortable discussing the pay gap, I will address it from an administrative point-of-view. This helps me detach myself from the situation and brings in objectivity. Another trick which doesn’t fail is benchmarking using simple searches – so mapping yourself with some facts and figures also boosts the reasoning. On top of it all is to appreciate what you bring to the table – you have to be your biggest champion. Anytime you feel you aren’t paid fairly, you should also address your HR with neutral questions like, how often they benchmark salary grades; what tools they have in place to address gender pay gap and how salary decisions are made within the company. I find that keeping objectivity generally takes away my emotions of fear and shyness. Sinan: I hate to ask this stereotypical question, but as a female professional, I inevitably find myself thinking about this a lot. What’s your take on the topic of work / family balance? Is it possible to actually achieve it? Dipti: I will give you an honest answer. You would not believe how much a child will empower you. Your personality becomes a lot more stronger and you suddenly get the clarity of what is important for you. You put yourself over everything else on why you make certain life decisions, especially because you’re now accountable to a very young human being. I have never experienced anything more empowering than becoming a mother. Maybe you would have lost this one or one and a half years of the “career ladder” time. But honestly, what you bring back on the table in your personality, in your clarity of thought of what you want to achieve will be incredibly different. Sinan: The Pandemic has changed how we work for good. In what ways do you think this has impacted working women, and what advice do you have for people who are struggling with the situation? Dipti: Post-pandemic I feel that we have much longer days with extremely fine lines between personal and professional life. This takes a toll on everyone and maybe even more on women who play a bigger role in the household systems. Some tricks that have worked for me – I keep the core working hours as with my teams but then use the flexibility of remote work to manage the rest of my time at odd hours (late nights or early mornings); I use blockers like focus-time or specific appointments in my calendar and make it visible for transparency; I prioritize 1:1s over info meetings so we can identify more often the meetings which could have been emails; I have seen many of my colleagues utilize lunch breaks as mental breaks and I’m keen to give this a shot! Other takeaways Sinan: Do you have 1-2 book / podcast / course / other resource recommendations for professionals or aspiring managers in STEM? Dipti: Deep Work for when you need a nudge on why focused work is so critical. Never Split the Difference for upping your confidence and negotiation game. Patrik Kua’s Level-Up weekly newsletter for staying on top of tech &amp; leadership topics. . The WomenInSTEM March 2022 Interview Series has officially come to an end 👏 I hope that, like me, you find these conversations inspiring as well as useful. Here’s the full list of 4 interviews for your reference: Dr. Yan – AI and Biotech, finding your niche, work/life balance, transfer learning, and more Pooja Salpekar – leading distributed teams, moving up, finding mentors, and more Dr. Daphne Tsatsoulis – finding passion through trial and error, keeping women in STEM, and connecting with work spouses Dipti Dhawan – beating Monday blues with weekly planning, tips for aspiring managers, and the empowerment of motherhood " }, { "title": "Interviewing Dr. Daphne Tsatsoulis -- finding passion through trial and error, keeping women in STEM, and connecting with work spouses", "url": "/sinantang.github.io/pr-7/posts/daphne/", "categories": "Interviews", "tags": "career, engineering, leadership", "date": "2022-03-23 00:00:00 +0100", "content": " To celebrate International Women’s Day and Women’s History Month in March, I’m interviewing 4 exceptional female professionals who I admire to talk about topics on career development, leadership and gender equality in STEM. My third guest is Dr. Daphne Tsatsoulis, Head of Applied Science with a background in Computer Vision and Artificial Intelligence. Daphne shared her experience navigating her career journey in academia and in the industry and making many changes along the way. We also touched on topics like how to keep women in STEM, work spouses, salary negotiation, and more. Here’s a summary of our conversations. Please enjoy! Meet Daphne Tsatsoulis Sinan: Please tell us who you are and what you do professionally. Daphne: I’m a Head of Applied Science at Zalando. I head up a team using applied science methods to solve e-commerce problems. Sinan: What does your typical workday look like? Daphne: I do a lot of people management. My workday would range from having time to think, which is rare, attending lots of meetings on on-going projects, and making strategic decisions. I still do technical reviews and technical decision making, though. I interact with teams on a daily basis in stand-ups and planning meetings. I talk to my colleagues about what we plan to do for the next year within our department and our teams, and how we work together to achieve those goals. Sinan: What or who would you say has been the biggest impact on your career? Daphne: My Ph.D. advisor was an amazing human being and a great advisor. It was incredible learning from him not only how to do research, but how to mentor people, how to grow and develop people, which is a skill that needs to be learned and he did that very well. But the biggest impact would be from my family. My parents have always helped me with the hard decisions, always celebrated the successes, and always told me, “It’s okay. Next time!” when something didn’t work out. It’s very important to have those people in your life. They can be your parents or your partner or your best friends. It’s okay to change. Sinan: Your background is in Computer Vision and Artificial Intelligence. How did you get started in this field? Daphne: My undergraduate was in Electrical Engineering. In the summers, I would do either internships in the industry or research internships at universities. I started doing signal processing because I really liked the math. From signal processing, I went into pattern recognition and speech processing, and I ended up doing a summer research program in pattern recognition on images. I really enjoyed it! So when I decided to go to graduate school, I wanted to focus on that. I got the opportunity to go to the University of Illinois, where I was able to do my Ph.D. in Computer Vision specifically. I didn’t have much of an introduction to the field before I went and did my doctorate in it. In addition, not being a Computer Science undergrad meant that I didn’t necessarily have the same background as a lot of my colleagues. I could do analog circuit design, but I couldn’t program in Java. It’s always interesting when you’re from a different background, because there are things you’ll have to learn. It’s going to take a bit more effort in some areas. At the same time, it’s very exciting to make big changes. Sinan: It’s a big move going from Electrical Engineering to Computer Vision! Do you have suggestions or tips for people who are considering moving into a new field? Daphne: I’ve seen people do much more extreme things. For example, I have a Software Engineer on my team who used to be a speech therapist. A lot of the people who I’ve seen made big changes to go back to school. There’re now transition Masters programs that are especially for individuals who want to make that change. People designing the programs are aware that your previous degree or experience might not naturally lend itself to the new one. So that could be a great academic option to start in a new field. Additionally, if you’re lucky enough, you could get the experience and make the career transition at your current company. We have Software Engineers who become Applied Scientists at Zalando and vice versa. If you have the ambition, talk to your peer group, and talk to your network. There’ll probably be more opportunities than you realize. Sinan: As you mentioned, you discovered the field in Computer Vision through various summer internships. Internships are such a great way to explore one’s interests and different options before one decides on a career path to settle into. Daphne: I think especially when you’re in your first years working or when you’re in the university, trying out different options is a fantastic thing to do. If you’re in graduate school doing a Masters or a Ph.D., you might be considering, do I want to be in academia or do I want to go into industry. Try them both. Try different types of companies, different sizes of companies, different focuses in the company. Get a flavor for what you enjoy, what your deal breakers are, and what kind of work culture you like. It’s a great time to explore things and move companies often. In the beginning of your career, you shouldn’t be 10 years in the same company. Go get different experiences. See different cultures. See different ways of working. It’ll make you a stronger specialist, for sure. But it’s also fun. I’ve moved countries in my career as well. You can make a lot of fun changes. Sinan: How did you make the decision between a career in academia and in the industry? Daphne: It was kind of made for me. I was not very successful in academia, to be honest. I did get my degree, and I’m very proud of that. But I was not very good at publishing, which is a requirement to become a professor. I really liked teaching. I really loved working with students and saw their curiosity and enthusiasm. But I was not a very good researcher. That’s why I do applied science now. I’m much better there. When I started in academia, I wanted to be a professor. That’s why I did a Ph.D. Along the way, I found I was not that good at this, so I decided to try something else. I tried industry and it worked much better for me. It was the right kind of culture and the right type of science. It’s okay to change your mind and change your mind often. On leadership Sinan: You started your career in the industry as an individual contributor (IC), then switched to a management role. What made you decide on the switch from the technical track to the management track? Daphne: It kind of happened naturally. I started to really become curious about the non-technical decisions , like the bigger strategic decisions and the project coordination decisions. I started realizing that ICs should always talk to stakeholders, because ICs know what they’re talking about. You should never go through someone. So as I had more of those conversations and more of those relationships, I started to expand my role outside of an IC into management. It was actually with the most recent career move that I really went firmly into a full-time management role. So it’s been a bit of a change. In my previous role, I would have done management, but I also would have run some research projects and written my own code. So this is the first time I’m really only on management, and I enjoy it a lot. There was a while when I was trying to figure out which path I should choose. The one thing I’d say is that it’s much easier to go from IC to management than it is to go from management to IC. So keep your technical strengths as long as you can, because it’s very hard to go the other way. Sinan: What would you say is the biggest difference between being an IC and a manager? Daphne: As a manager, I’m there to help my team. I’m there to support them. I’m there to do anything they need and I’m there to unblock them. As an IC, I’m there to think about problems and solve them and experiment. It’s a different type of focus. You’re focusing on different kinds of problems and different kinds of situations. Practically speaking, I don’t code anymore. I do still get to look at experimental results and read papers, but I wouldn’t be the one who gets to make all of the experiment decisions and gets to really live that process. Sinan: Have you encountered any challenges in your transition from an IC to a manager? Daphne: Many :) Being a manager or a people lead of any kind takes practice, and it’s practice while learning. You can’t go simulate it and then try it. With every response in every situation, especially when they’re new, I would always reflect on it, “Am I responding correctly here?” Then a few days later, I’m like, “Nope, definitely did not respond correctly”. Then you have to go back and fix things. So as I’m more new to this situation, I’m learning a lot of skills and tools. Sinan: It sounds to me that in your career journey, you’re really good at learning from mistakes, and very creative in discovering new and better directions. Sinan: Do you think leadership skills are innate or can be learned? Daphne: I think leadership is not innate. I think it’s a skill that needs to be learned. Sometimes we say, “Oh, that person is a natural leader.” But I feel when we say that, we mean only one certain type of people. I’ve met leaders who are completely different from each other. You don’t need to be a certain way to be a leader. You see that across disciplines. There’s no one way to do it. It’s very important to find what works for you, but you do need to find it. It does take trial and error. There’re various hard skills and soft skills in leadership. For example, Agile or Scrum, a lot of those project management practices are hard skills. Hard skills can be learned, so are soft skills. No one is born a negotiator. There are techniques for it. Sinan: What kind of soft skills does a leader need? Daphne: Communication is probably the most important one, including both listening and writing. One thing that most surprised me coming from a technical background was how much I need to write, and how well I need to be in my communication skills. For anyone studying STEM majors, my advice is to take a course in writing or written communication, because more of your time than you expect will be spent on writing. Sinan: For engineers unsure about whether they should stay on the technical track or switch to a management role, do you have any advice for them to find the better fit? Daphne: The best thing I can tell you is to try it. If you start taking on a few responsibilities in management, you can start to see if those are things you’d enjoy. For example, onboarding a new team member, coordinating a project, being the technical lead on a project. There’re a few things that you can do that sit between both roles to give you a taste for the other role without having to fully commit. Keeping women in STEM Sinan: There’s a much lower ratio of women in management roles than men in STEM fields. What’s your take on this and what do you think individuals and companies can do to help change the situation? Daphne: There are two problems. One is attracting women to the field, the other one is keeping them. We need to treat the two problems differently. There’s a lower representation of women in STEM, but there’s an even lower representation of older women in STEM. I think Silicon Valley was experiencing an exodus of women in STEM who are 30 years old or older. So after 30 many of them would leave the field. One thing we really need to think about is how we keep the women we have in STEM. If we had all females as ICs and they were the most powerful principals in the world, I’d be delighted. But we do need to think about what it is that we’re not doing right, that is making older women leave tech. In theory, we should have the same proportion of women who were 20, 10 years ago as we do today, who are 30. Sinan: What can companies do to become better at keeping women? Daphne: So this is my situation. I have a young child. For me, one thing that helps me keep my current role in this tech company, is the understanding that I have a child and that’s part of my life. I have very strict working hours. If I have to leave early because she needs to go to the doctor, that’d be fine. I see that across female and male colleagues. So the example is set by everyone. My male colleagues have blockers in their calendar for 4:00 p.m. child pick-up and childcare when they are not available for a meeting. That kind of behavior means that I’m comfortable doing it too. It means that anyone on my teams is comfortable doing it. I’ve never felt penalized in any way at Zalando for having a daughter. It enables me to have the work / life balance that I need. I cannot be in a company that doesn’t allow that. Not all women, however, have children. But often when there are children at home, women disproportionately take on the care. Sinan: I think it’s very important for companies to cultivate the culture that allows people to talk about family life and to be open about discussions on work / life balance. Daphne: It’s healthy for everyone. It makes everyone’s life happy. When I was interviewing for this job, my daughter was only three months old. I was still on maternity leave. I told the company, “I’m happy to take it, but I won’t be available for another four months.” They replied, “That’s totally fine.” When I started the job, they said, “We know that you’re just off your maternity leave. Do you need a phased introduction? Do you want to start with 60% or 80% work week just to get yourself back into it?” Those things make a big difference, because it’s just the reality. There are more older women who might have children, and you have to make it work. You have to make your job work for their family life. Negotiating the pay Sinan: Not having enough women in management roles is one piece of gender inequality in STEM. Another important piece is the pay gap. There are many causes contributing to the gender pay gap. One reason is related to negotiated compensation. When negotiation is involved in determining the pay, women tend to get paid less than men. What do you think the problem is? Do you have any advice for women who might not feel the most comfortable when negotiating for a higher salary? Daphne: Unfortunately, you do have to negotiate. There are a few companies that have set pay for everyone on the same level. But normally there’s a band and it’s a back-and-forth between yourself and the recruiter. They’re trying to get you low on the band, but high enough that you’ll take the job. You need to be high enough on the band that you’re happy and comfortable with that pay for the next two to three years. One thing I do at the beginning of any interview process is ask for the salary band to make sure it’s within the expectations. If it’s not within your expectations, then it’s the wrong role for you. It could be too junior or could be that you wouldn’t be willing for the salary. In that case there’s no reason to spend your time on that interview process. But you do have to negotiate. It’s not personal. They won’t think any less of you. It’s just part of the ritual. If you feel uncomfortable with it – what I do is Google search either email templates or search for “how to negotiate”, and I will read the script. If you need to read the script, read the script. Do whatever it takes to get the message across that you would be comfortable with X as your salary. Plus never forget benefits, e.g. stock options and paid time off – all of these benefits are incredibly important. When the salary isn’t negotiable, the benefits might be. Connecting with peers Sinan: Have you had any mentors that helped you along the way in your career? Daphne: I’ve never had an official mentor. I’ve had my Ph.D. advisor who helped me with my research. I’ve had supervisors who have given me perspectives at work. But I’ve never had someone helping me with the path in life and the overarching plan. Maybe I haven’t met the person yet who would be a good mentor, but I often find the people who’ve helped me the most are my peers. They know exactly where I am. They know the situation I’m going through. Having peers who you’re able to talk to openly can be a fantastic thing. So I’ve always relied on my peers to help me and guide me. Sinan: I feel sometimes it can be hard to find peers in the same company that you can talk very openly with. Daphne: I don’t know if you’ve heard of the concept of a work husband or a work wife. So the idea is that someone at work who’s like your best friend in the company and who you can have that open, honest and trusting relationship with. I’ve always been much happier in a job, if I have a work spouse – someone when I come out of a meeting I can turn to, “We need to get a coffee to talk about what just happened.”, and someone whose suggestions and perspective I trust. So I’d definitely recommend work spouses :) Sinan: That sounds awesome. I think I need to find one. However I have to admit that ever since we started working remotely, it’s been difficult to connect with people in more meaningful ways, especially if you join a company during the remote setup phase. Daphne: I was in the same situation. I onboarded remotely. You can meet people online, but it’s somehow not exactly the same. I’ve been lucky enough to go to the office a few times, but that’s not always going to be an option with remote working. I don’t know how you make the same level of connection, especially with the people with whom you don’t work. One nice thing about going to the office is that I’ve met people from other teams who I wouldn’t interact with in my regular meetings. I don’t know yet how we accomplish that virtually. I do look forward to the hybrid work mode with both options. Going to the office is a nice change of pace and good for seeing people and meeting new people. The option to work from home is a big relief on certain days. Next steps Sinan: What are the next steps in your career? Daphne: The immediate next step is to become good at the job I’m in. I’m new to this role, and I want to be able to do this job very well. This job challenges me in new ways, so I have a lot to learn and improve on. That’s exciting for me because I’d like to get to the point where this job is easy. Then I’ll think about what comes next. A friend of mine gave me the advice once. He said, there are moments in your life where you want to challenge yourself career-wise, and there are moments where you need to be stable. Right now, I need my career to become stable just because of a young kid. It’s a good time for me to have a job that I can do for a few years. There are different points in your life where you’re going to need very different things. There could be moments where you want a complete new challenge or maybe you want to work at a startup. You want the excitement and something new. There are other moments where you want the stability of a big established company. It’s okay to do all of them – not at the same time – but try different things and know that in different stages of your life, you want different things and that’s perfectly fine. " }, { "title": "Interviewing Pooja Salpekar -- leading distributed teams, moving up, finding mentors, and more", "url": "/sinantang.github.io/pr-7/posts/pooja/", "categories": "Interviews", "tags": "career, learning, engineering, leadership", "date": "2022-03-15 00:00:00 +0100", "content": " To celebrate International Women’s Day and Women’s History Month in March, I’m interviewing 4 exceptional female professionals who I admire to talk about topics on career development, leadership and gender equality in STEM. My second guest is Pooja Salpekar, Senior Engineering Manager with over 10 years’ experience in tech. Pooja shared her experience starting as an engineering consultant, moving to the startup world and then growing her career at Babbel. We also touched on topics like how to find mentors, how to improve the ratio of women in tech, salary negotiation and more. Here’s a summary of our conversations. Please enjoy! Personal journey Sinan: Please tell us who you are and what you do professionally. Pooja: I’m Pooja Salpekar. I am a Senior Engineering Manager at Babbel. At the moment, I am leading two cross-functional engineering teams, one in Berlin and one in New York. My day-to-day job is navigating the teams through delivery management, enabling iterative software development, and helping the individuals in the teams to unlock the best of their potential. Sinan: That sounds a lot to manage! It’s not just managing two engineering teams, but two teams across different countries and time zones! Pooja: Managing distributed teams has been challenging and has definitely been one of the things that I learned a lot during the Pandemic. On paper, it sounds really hard, which it was for a lot of things. But it also makes things practically easy to give proper focus time to the individual teams because of the time difference. I have my mornings dedicated for the Berlin team and my afternoons dedicated for the U.S. team, which actually gives me an organic break in between. Sinan: How did you get started in the field of engineering? Pooja: I did my bachelor in Engineering and Computer Science. Afterwards I got a job in consulting. I was an Engineering Consultant at a software consulting firm working for different clients in the U.K., East Africa and India. I had the first few years in my career working in different domains. Naturally in the consulting world, you would not just be scoped into one project or one team. Early on that helped me not get attached to my code and move on from one codebase to another very quickly. After that, I joined a food delivery startup in India as one of the founding engineers. I had to do everything, e.g. frontend, backend and the infrastructure. I wore all the hats that I would get until the team grew. I worked in the startup for a year and a half before I joined Babbel. I joined Bubble about six years ago, working as a Software Engineer and then moved up to become an Engineering Manager now. Sinan: What made you decide to join Babbel? Pooja: I was looking for an opportunity to start afresh. I was working in India. I wanted to work in a mid-sized, more structured company instead of a startup. I wanted to work in an international setup, where people are thinking differently from how I’m thinking, and I’m being challenged at every single thought process. I knew I had to start looking for opportunities elsewhere. I also wanted to work in a domain that excites me. All of those things came together for Babbel. That’s how I landed here. Finding a fit Sinan: You’ve worked at companies of different sizes, ranging from an early-stage startup to a mid-sized company and a giant consulting firm. When you made the decision to join a different company, did you see beforehand if that’d be a good fit? Pooja: Honestly, no. Whenever you’re asked this question whether you knew that you would join this company, I think most of the time the answer is no. I still don’t know what will come after Babbel, or if I have a certain company that I would definitely like to join. It mostly depends on what your current situation is and what opportunities are laid in front of you. Picking between a small and a big company is a big decision. There are multiple factors that come into play. Some of them would be processes and resources. Are you used to structured frameworks versus chaotic or loosely structured frameworks? Are you used to getting definite resources from your company, e.g. legal and accounting support ? Or do you thrive in an environment where everything is loosely coupled? Another piece is innovation. Bigger companies do try to work on inventing the next big thing, as opposed to smaller companies where resources are limited and there’s not enough leverage to do so. All of those factors plus some logistical factors like compensation and job security come into play when you’re making that decision. I think for every individual, that decision changes depending on what point and stage they are in their lives. Sinan: As a hiring manager, what do you look for in a candidate? How do you know that they are a good fit for this specific work environment? Pooja: Things in the interview process can give visibility into this question. If you give a coding challenge to a candidate, you can observe how they push commits into GitHub. Are they more used to making just one giant commit and bringing the change into the production environment, without deploying into a staging system first? That’s an indication that they come from small-scale companies, because that’s how startups work, while in bigger companies smaller commits are more encouraged by team members. They do the smallest change because the impact to the production system is too big. That is an example of some indirect factors to assess. Additionally, having conversations with the individual on what makes them pick Babbel, and what things about Babbel they are most curious about would also give a window into how this person would fit into the team. Building mentorship relations Sinan: What has been the biggest impact on your career development so far? Pooja: It’s been the people that I have worked with and the mentors I’ve had. I have learned from them about not just hard skills, like how to write better programs and how to improve the time complexity of code, but also how to challenge your stakeholders, how to read requirements better and how to document requirements better. In many aspects, I give credit to the mentors I’ve had over the years for much of my career growth. Sinan: Having a good mentor might be one of the most important things that one can do for one’s career development. Do you have any advice for early-career engineers to look for a mentor to help them grow? Pooja: One thing that multiplies productivity or accelerates your learning curve is to have someone that you can learn one-on-one from. That individual can be your friend in the company, or just a colleague that you have never worked with. Having someone by your side that you can blindly trust into and know that there would be no judgments and only learning would help you find the unknowns and know the unknowns. For my direct reports, I always recommend them to have mentors for technical or even non-technical topics. For individuals early in their careers, I would say, talk to your manager and ask for that support. Sinan: Do you have any specific tips for maintaining a healthy mentorship relationship? Pooja: I think finding the right mentor is the key. Sometimes you think that just because this person is on your team and a senior, he or she would be a good mentor for you. That’s the right thing to start with. But sometimes that doesn’t scale because you both start to think alike, and you need a mentor who would challenge you. Practical tips would be to get prepared for the first few sessions, ask as many questions as you have. You might already have answers to them, but asking them would give you nuances that you wouldn’t have thought of. So ask questions. See how your mentor thinks differently from you. With those questions you can identify the areas that you don’t know about. For example, as a frontend engineer, I’m asking questions about how React Router works. I know how it works, but if I ask those questions, I’m pretty sure there will be some in-depth knowledge that I don’t know about. That gives me an opportunity to learn more. Leadership Sinan: What made you decide on the switch from the technical track to the management track? Pooja: Coming from a consulting background, I knew that I wanted to work at an intersection of technology, people and business. Even when I was on the individual contributor track, I enjoyed figuring out the requirements and ways to collaborate with stakeholders, sometimes even more than improving the performance of my code. Once the opportunities were in front of me to lead a project and to solve bigger problems, I knew 80% of my motivation was to figure out the unknowns from 0 to 1. Then from 1 to 100, I would think, good, I can do it, but I’m just not enjoying it as much. Those were some of the early indicators I had. For an individual to choose between the technical and management track, I would say it’s the hardest decision. If I were to give a very generic statement on how anybody should decide that, it’d be a very strong statement. What helps is having a fluid management track early on. If the company offers an experiment-based role for engineering management with part of the responsibilities like hiring or mentoring. That can give a flavor of how people management looks like. That would help individuals to see if this is what they want or if this is a good fit. Sinan: What would you say is the biggest difference between being an individual contributor and a people manager? Pooja: I think the biggest difference is the ability to detach yourself from the implementation. There are people who absolutely enjoy solving the problem from 1 to 100. They have a problem in front of them and they want to see it working for a mass scale of users. For some other people, they enjoy problems being solved, but they don’t necessarily want to solve it themselves – “I know this should be solved. I know why it should be solved and what the impact of it is.” So that’s the difference as in how an individual finds the biggest motivation and excitement when they are presented with the problem. Sinan: Is being a manager different from what you had expected before you made the transition? Pooja: It is very different from what I imagined. I still don’t fully know what it means to be a great manager. On a very high level, you are influencing the technical decisions, the opportunities and the career development of your direct reports. But on a granular level, it has so many avenues that I’m still ready to learn. I would say, on a high level my expectation about this role has been met, and I wouldn’t regret any of the decisions I’ve made to come into this stride. However as a manager, the learning never stops. Sinan: What has been the biggest career challenge for you working as an Engineering Manager? Pooja: I think the Pandemic presented the biggest challenge. Back in 2019/2020, we were thinking of restructuring and starting a new team. Little did we know that life had its own plan. The Pandemic happened and the team was fully remote even before it started. Starting a new team in a hybrid setup, then moving across the continent to work for a different team was the biggest challenge that I’ve faced so far. In the role itself, one challenge is to hire the right people remotely. When you’re interviewing people in person, there’s a lot of indirect assessment you can do, e.g. how they interact with the team in the office. When you’re interviewing a person in just a 45-minute Zoom call, it’s very different. You don’t know what this person is outside of this window. Sinan: Do you think leadership skills are innate or they can be learned? Pooja: A lot of people do believe that some leadership skills or traits are innate, but I personally believe that most of the leadership skills can be learned and leadership is akin to learning any other skills. From my experience, most skills are not innate. They are developed early on since one’s childhood. So are leadership skills as well. Sinan: What do you think is the most helpful skill that one can prepare oneself for, if they want to become a leader one day? Pooja: When I look at all the leaders that I know, I think the common trait among them is the ability to look at a problem from the widest angle possible. They are able to understand things from a zoomed-out perspective, to grasp the scope of the problem and not to get attached to the minor details. It’s hard to learn this every day, but as an individual contributor, you’re presented with many opportunities to solve problems, which you can use as an exercise to develop such skills. Gender equality Sinan: There is a much lower ratio of women in management roles than men, especially in non-traditional fields like STEM. What do you think individuals or companies could do to change the situation? Pooja: Many companies have been doing a lot to close the gender gap. But I think there is still much more that companies can do, e.g. hiring more women into leadership roles. One of the reasons that women leave is because they feel that’s the end for them. They don’t see any female leaders in front of them. Does that mean it’s the end of growth for me? So hiring more role models for women is one area where companies can do better. Another area is on the managers and leaders who have the job of finding the right opportunities for all of their direct reports. That doesn’t mean you find one blanket opportunity for everyone. Every individual is different. Their needs and interest level are different. Finding the right opportunities for your female direct reports, so that they can be objectively assessed in their performance evaluation for the next level and for promotion, is also on managers. Sometimes you could not be promoted because you didn’t perform a particular task. Whether you were presented with the opportunity to do that task is an equally valid question to be asked. On a high level, as a company, assessing what your current stats are, where the biggest gap is, and then targeting the weakest area would be the first place to start, which is what Babbel did. Back in 2018, we looked at our female ratio in engineering on different levels and figured out that we had low senior female engineers in the company. Then we redirected all of our efforts to increase the female seniors in the company. Sinan: Not having enough women in management roles is one piece of the gender inequality in tech. Another important piece is the pay gap. There are many causes contributing to the gender pay gap. One very real reason is related to negotiated compensation. When negotiation is involved in determining the pay, women tend to get paid less than men. What do you think the problem is? Do you have any advice for women who might not feel the most comfortable when negotiating for a higher salary? Pooja: A change in the industry that I’m seeing now is that most companies are moving towards an equitable pay model instead of the “fair pay” model. It means having a defined salary grid, having a committee that assesses the parity between individuals, and having an objective way of comparing two individuals instead of subjective pay decisions. The more we move towards the equitable model, the better we are at conversing about salaries. If you are not in a workplace which follows the equitable pay model and you have to negotiate for your salaries, I’d like to share some skills I’ve learned over time. One of the foremost things that you would want to do is getting continuous feedback from your peers and from your manager. That feedback not only helps you find development areas where you can improve on, but also acts as your data where your manager has already vouched for you. You don’t have to vouch for yourself, but your manager and your peers have already vouched for you for that task. When you go into a salary negotiation conversation. You don’t have to come up with things. You just rephrase your peers and your manager’s previous feedback – “You mentioned six months ago that this went well. I added this much value and because this particular business metric was improved by X percentage. My peers told me that I have this skill which helped the team to do so and so. I think with the above skills, I’ve been able to change in the last six months by this way. I have plans for myself to achieve these specific goals so that I can address the next metrics.” So the preparation for salary negotiation has to happen not a day before the meeting, but throughout your stay in a company. The last question Sinan: If you could go back in time to ten years ago, would you have done anything differently career-wise? Pooja: I would have probably chosen some of the companies I worked at differently. It’s not a reflection on a company being unsuccessful for me. Sometimes when you retrace your path, you’re curious about what the alternate path would look like. I would have been able to reassess my decisions with a little bit more maturity. But if I was at the same maturity level, I think I’d have made the same decisions over and over again :) " }, { "title": "Interviewing Dr. Yan -- AI and Biotech, finding your niche, work/life balance, transfer learning, and more", "url": "/sinantang.github.io/pr-7/posts/yan-interview/", "categories": "Interviews", "tags": "career, problem solving, engineering, biotech", "date": "2022-03-08 00:00:00 +0100", "content": " To celebrate International Women’s Day and Women’s History Month in March, I’m interviewing 4 exceptional female professionals who I admire to talk about topics on career development, leadership and gender equality in STEM. My first guest is Dr. Yan, AI and Machine Learning Architect with over 15 years’ experience in the biotech industry. Yan shared her experience starting in this interdisciplinary field more than two decades ago and growing her expertise ever since. We also touched on topics like work / life balance as a working parent before and during the Pandemic, how to improve the ratio of women in management and more. You can find a summary of our conversations in this blog post. For the complete interview, please watch this video on Yan’s YouTube channel here. Sinan: Please tell us who you are and what you do professionally. Yan: I’m a Machine Learning and A.I. Architect at a biotech company in the U.S. I’m currently leading this project to build a system utilizing machine learning and deep learning approaches to make predictions for recommending certain prescriptions, e.g. antibiotics, with the right amount of dose for patients. In the past, I worked on medical imaging and image analysis for more than a decade. Sinan: How did you get started in the field of biotech / medical imaging? Yan: It has evolved for sure, but it hasn’t changed drastically either. I’ve been following this path ever since I was in high school. I felt like I was going to be an engineer. That’s just in my mind all the time. Sinan: Where did that come from? Yan: I’ve never been the very best student in my class. The top students were going into science, like pure science, mathematics and physics. But for me, I’m good enough at learning new things and applying new knowledge, but maybe not at a very theoretical level. I’m more like an engineer type. So that got me into engineering. Even in engineering, my grades were not the best of the best. At that time, if you went into engineering, you would go into computer science, electrical engineering and electronics. Those were the majors the top-tier students would go to. As for me, I wanted to find my niche – like a sweet spot that I would be good enough to stay in to find my path. At the same time, it might not be super challenging. That’s why I started my professional career, or even before that – choosing a college major – going towards this interdisciplinary field, biomedical engineering. It combines medicine and applied engineering approaches to solve a specific set of problems. As it evolves, it seems it’s playing out very nicely for me. I see a lot of opportunities in this field, especially in the past 10 to 20 years with the new development and tools from the engineering field. You can apply a lot of them in the medical field and biotech. Sinan: It’s really early for you to have realized that you need to find a niche to be competitive and to have more opportunities in your career. I think it’s really important for young people to think in that direction too, instead of just competing with a single skill set. Yan: In the career playground, you are going to discover a lot of these types of positions. They’re professionals, but they’re not really sitting in any of those big lists of majors for college applications. You don’t see those roles or skills in the major listing. But they are real jobs and they have real values. So don’t limit yourself in a small box where you want to fit into one single descriptor. You can stack your skills as well. You can have knowledge in medicine, for instance, and knowledge in computer science. Stack them and then you’ll be able to find something in particular in there. Sinan: How did you accumulate your knowledge in medicine? Yan: It’s also evolved over time. Even though I went to school as a biomedical engineering student, we only had very basic courses in medicine, like basic anatomy and pathology. You have to use almost the other part of your mind to learn that piece of knowledge, because we still have very limited understanding of how biology works. We’ve created computers. We design computers, we know how they work, but we didn’t design ourselves. Our human body is still a mystery to ourselves. I gave birth to a child, but I didn’t create them at all. I don’t know how they were created. It’s such a mystery and it’s so fascinating at the same time. So I think we should go into medicine and biology with such a modest mindset, the discovery mindset instead of the learning mindset. During this process, I would like to try to discover for myself what my observations are and how I can apply my knowledge and observations to those problems I’m solving right now. I haven’t really gone through formal medicine training or gone to medical school. I’ve accumulated lots of knowledge while working on specific projects. Recently, I’ve learned a lot about bacteria and antibiotics, how they interact with each other, how they work at a microscopic level. They are really fascinating to me. Sinan: I’d like to talk a bit more about career development. You have experience for over a decade. What would you say was the biggest challenge in your career? Yan: I think it’s like a whole life challenge. In the past 10 years in my late twenties to thirties, trying to combine everything, every aspect in life, like having children, starting a family and at the same time carrying on your career – for me work/life balance was the most challenging piece. You have to accept what you’re facing right now. You have to accept the priorities that you set for yourself. Do you want to put more of your time and energy into pushing your career forward, or do you want to split out a little piece of you – not just a little piece, a big chunk of you – into having kids, nurturing them, creating an environment, and spending time with them. If you want to handle all of these things together, I think you have to accept that during a few years, your career might have to slow down a little bit. I was lucky enough to not have quitted working, but I have to admit there were some very challenging times for me. Sometimes I wasn’t able to sleep at night and the next day I had to go to work, think about the project and operate as if I didn’t have kids. There was a period of time, career-wise I just stayed steady, or a little stuck. I wasn’t able to push forward. I wasn’t able to explore new opportunities. I was not able to answer calls from people who reached out to me with “I have this new opportunity. Would you like to connect?” I just said no. I had to say no to keep my life going. That was the challenge I faced for about 5 years. It’s long, but I wouldn’t say it’s such a bad thing, though. During that period, I felt very grounded in my work. I told myself, I don’t have the capacity to expand right now, so why not just focus entirely on what’s in my hands and try to solve the problem, try to lay the ground, try to build the product very nicely. Unexpectedly, building my foundation during that time gave me an edge later on. Even though you felt like you had to slow down, at the same time, you allowed yourself to take time to understand the whole system, to actually do the work, to build things without any rush. You’d be very grounded and solid. Sinan: Did you make the decision to grow in the technical track consciously? Are you open to becoming a people manager in the future? Yan: It came to me naturally. I’ve always been strong technical-wise, and I liked to be involved from a technical perspective. I wanted to spend more of my time solving the real problem instead of solving the relationship with people. That piece is very critical. We need someone in the team to work with individuals, to help them realize their best potential, and to work collaboratively. I absolutely acknowledge the importance of the management role. It’s just for myself, my curiosity lies more in the projects themselves. Of course things can evolve to a point where I feel I could contribute more as a manager, or where I were to start something myself. I’ve always had this idea of potentially starting something like my own project or company in the future. Sinan: We are all aware there is a much lower ratio of female leaders than male leaders, not just in STEM. What’s your experience, and what are your thoughts on it? Yan: I happen to have worked for a company with a female CEO, and that was a really nice experience for me. Leadership-wise, she’s totally capable and she was also close to us. She was willing to come to me and talk to me individually. I appreciate that aspect of her leadership. Going back to the entire situation of why we have less female leaders, I think it’s twofold. One is the willingness from our perspective. If I ask myself, will I be able or am I willing to step up and be a leader. I would hesitate. I would question, do I have what it takes to be a leader? What if I embarrass myself in front of 200 people? I feel I need to pump myself up a lot to be in that position. However, watching the male leaders in the past, I see that they make mistakes. Sometimes they go up there and say things that are just stupid and people would even laugh at them. But that’s okay. They’re still in that position and they don’t get fired. Maybe they get fired a few years later. Then they go to a different company and they can still be the CEO. So that’s something really interesting for me to see. Another aspect is the opportunities. If a board is looking for a CEO, will they be willing to hire a female? Of course, maybe when you look at your choices, all you have are five males. But what if you have a female in the picture, would you consider her? What are the things you’re going to consider? Are there positions that take females in without thinking they’re women, and just look at their capabilities? So both things have to come together. However, going back to the root of things, what tells the difference between a man and a woman is the ability to bear and give birth to children. That evolves eventually to all of these differences in the workforce. Is that a problem to solve? Maybe the best thing to do is to provide more solutions for everyone. I think eventually we want options and more ways to choose how we want to live our lives. Sinan: Machine Learning is a field that’s evolving very fast, especially in the past 5-10 years. How do you stay up-to-date in the field? Have you ever felt anxious about having to constantly learn new things to stay relevant in ML? Yan: Going back to the PhD training, you stay up-to-date by reading recent papers. Nowadays people are so much more willing to open source their work, including the paper, code, datasets and other tools. It’s a lot easier now to learn and contribute in this field, compared to when I was doing my PhD. I think everyone should try today’s free online educational resources first, instead of going back to school. I wouldn’t say I’m anxious about having to constantly learn new skills or knowledge. Everyone has a history. How you used to approach and solve a problem is experience and skills that are not going to be a waste. Nowadays in deep learning, we talk about transfer learning. You train a model on a generic data set, then you train it with specific knowledge and labels. The initial learning effect is not lost. I think as human beings, we have that transfer learning ability as well. Everything you’ve built in the past, they’re still relevant, even though people have stopped using some of those tools. You have to pick up new tools, but all of that is to make your life easier. Sinan: When it comes to career change, what kind of opportunities are you looking for, and how do you evaluate them? Yan: I’ve held three positions at three different companies so far. For my first switch, it was because I felt like there’s not a very clear path for me to move forward. I wasn’t sure whether I was going towards the management track or going towards a higher level on the technical track. The team had stayed stable for quite some time. At the time, a previous coworker approached me saying, we have new funding at this new company, would you like to give it a try. That came pretty naturally for me. It’s very relevant and it’s a project that I was very interested in and wanted to solve. I worked on that project for a year, and I felt like I basically solved it. During that time, a headhunter approached me and presented me with this new opportunity. It’s outside of what I’d been doing in the past many years. I wanted to see what’s out there, instead of limiting myself to only medical imaging. I wanted to see what deep learning could solve outside of imaging. It turns out I was able to transfer a lot of my knowledge into this new role, and to solve new problems, which gave me confidence. I don’t have to limit myself to a specific domain, even though I found for myself what I’ve been thinking was my niche. Now I’m thinking that I don’t even have to limit myself to machine learning or deep learning. I could stand up even further to solve problems from a system level. Machine learning is still just a tool. It doesn’t have to be my entire field. My field could be defining problems from a higher level, e.g. from the product level, from the users’ level, from the marketing level. I could then work backwards to see what options I have in terms of tools to solve a problem for that use case. " }, { "title": "如何高效获取信息", "url": "/sinantang.github.io/pr-7/posts/research/", "categories": "Thinking Tools", "tags": "research", "date": "2022-02-06 00:00:00 +0100", "content": "进入互联网时代后的现代社会是个信息的时代，现代人所追求的大部分东西都可以被看作是一种信息编码。长期来看，获取有效信息的能力和输入信息的质量对个人境遇的影响会越来越大。一是因为时间所带来的复利效应；二是信息时代的信息总量会不停膨胀，但优质信息总是相对稀缺的，所以过滤的难度会变大；三是因为以初级人工智能算法为基础设计的推荐系统是个信息回音壁，算法喂给用户的内容是为了调动原始情绪而非提升思维，所以无法主动搜集获取有效信息的人，可能会在机器学习算法的调教下越来越蠢…… 那该如何主动获取有效信息，提高输入信息的质量呢？我想在这篇文章里记录一下现阶段我对这个话题的思考结果，分为“搜集信息”和“过滤信息”两大部分。 搜集信息 先发散再收敛 Diverge before converge 「Diverge before converge」是设计思维（design thinking）里借用数学概念的一条思考原则，即在解决问题时，先发散思维把所有能想到的选项都列出来，再进入筛选、优化、决策阶段。这里特别反对的（但大多数人会自动采取的）方法是面对问题时，沿着最小阻力路径，草率采用眼前的第一个选项。 作为反面例子，不知道有多少人记得《老友记》里有这么一集：钱德勒辞职后想要换个全新的职业方向，莫妮卡借机整理了一整套职业选项分析系统让钱德勒参考。当莫妮卡按首字母排序刚念到第一个择业方向 Advertising 时，钱德勒就立即跳起来表示，就是这个了！若不谈戏剧效果，只看钱德勒在职业规划这件大事上的决策过程，他的做法确实是大忌。 这条原则同样适用于搜集判断信息。我曾在网上看到有人总结以下等式： 海量的正确信息 + 正确的思考方式 = 正确的答案； 少量的正确信息 + 正确的思考方式 = 不错误的答案； 海量的正确信息 + 错误的思考方式 = 不错误的答案； 少量的正确信息 + 错误的思考方式 = 错误的答案； 这其中影响因素的优化难度与其影响程度是不对称的：收集足够信息的难度远远低于优化思考方式的难度，但它对结果的影响却是巨大的。因此，不论对什么人来说，先尽可能收集到足量的信息都是第一步。当收集到足够多的正确信息（“正确”这一点下面会写到）后，任谁来做判断也出不了太大问题。 这可能也是为什么CEO的工作本身难度不大（不看责任承担），因为呈现到CEO面前的信息质量已足够高，此时作出正确决策对智商的要求并没有普通人想象得那么高。 具体来说，当我们开始搜集信息时，需要抑制住过早下结论的本能冲动，同时有意识地去搜索多方的论点和论据。比如，在考虑要不要出国留学时，不能百分百只接收出国多么好，留学多么有用这类信息，也要刻意搜索些不支持出国留学的信息，否则我们收集信息的过程又成了绕着回音壁转圈圈，不断强化自己的预设结论的过程。 理解信息的多种传播媒介 媒介是信息的一部分，信息存在多种传播媒介，如文字、图片、音频和视频；我想再加上一项“数据”，因为信息时代的很多信息存在于大数据之中，了解数据的呈现特点和数学含义是一项值得单独列出的技能。 不同媒介的特点不同，同一条信息以不同方式呈现时的信息传递效率也非常不同。比如，同样的信息以文字传播的信息密度远高于以视频传播的信息密度，大数据以图表可视化形式呈现所提供的认知效率远高于用文字描述，有些抽象概念用图像阐述的传播效率高于只用文字描述。 因此，在搜集信息时，需要考虑到不同的传播媒介。根据信息的性质来选择最合适的传播载体，大概率会提高我们的认知效率。 互联网搜索技巧 这一节列举了一些能快速提高通过搜索引擎收集信息效率的技巧合集。 “高级搜索技巧” 即通过特定语法来提高搜索准确性的技巧，如给关键词加引号不让搜索算法将词拆分开，用加减号提前过滤搜索结果等等。具体的就不列举了，去搜“高级搜索技巧”就能找到这些为更高效使用搜索引擎设计的简单语法。 通过反馈修正提问 很多人使用搜索引擎效率低的原因在于，他们其实并不知道自己该问什么，或者找不到正确的关键词。这种情况下最好的办法可能也只有不断地进行“反馈-修正-反馈-修正”的循环，尝试用不同方式来问同一个问题，换用不同关键词来指代同一个概念，缩小搜索范围或扩大范围…… 学习搜索的过程其实也是在学习如何提问。 多语搜索 这也许是会说一种以上语言最实用的优势之一：搜集信息的效率比单语者高出N倍！ 最有用的搜索语言是英语，因为英语是互联网上使用最广的语言，所有优质信息几乎都是英语的或存在英译版。我搜到一个 W3Techs 的统计数据，互联网上排名前一千万位的网站，其中 63.4% 都是用英语作为主要语言，所以学会用英语进行搜索可能是最快提高信息检索总量的方法。 除英语外再加一两种其他主要语言，会使搜索效率更高。比如，我经常会在中英文两种搜索结果中跳来跳去。有些抽象概念我理解不好英语，就会看一下中文内容辅助理解；有些技术概念我理解不了中文（因为往往是由英语翻译过去的），就会跳到英文网站搜一下结果；有时连德语也会派上用场，因为很多与德国相关的内容只有德语搜索结果，加之德语版的维基内容也比较丰富。 这里附赠一个我搜多语信息的小窍门：同时用“英语概念 + 一个中文词语”作为组合关键词（如“convergence 数学”、“deep learning 什么”）进行搜索，可以得到该英语概念的中文搜索结果。因为汉语文字信息密度高，加上对母语的阅读速度最快，所以中文搜索结果只要扫一两眼就能了解大概，再详细的信息可以转换到英语的搜索结果。很多时候这对我来说是了解陌生概念速度最快的方式。 比谷歌更专门化的搜索站点 谷歌是默认的综合信息搜索引擎，但并不是所有专业、非主流信息都能出现在谷歌搜索的前两页上，还有些专门化网站可以提供比谷歌更具针对性的信息或信息呈现方式更准确易懂的功能，比如 WolframAlpha 擅长计算绘图、数学概念分析、数据可视化，Internet Archive 可以用来搜索现在已经不存在的网页，谷歌学术专门用来检索论文和学术著作，你所在国家地区的图书馆检索系统除了能搜索到馆藏书籍外，很可能还能搜到历史期刊新闻与其他电子学习资源。 除了以网页文本为主的搜索外，目前以其他媒介传播的信息搜索难度很大，比如播客节目的具体内容、视频里的对白，这些信息默认是无法被检索到的。图书内容和图片的搜索，有一部分已经被谷歌（Google Books、Google Images）涵盖了。 过滤信息 没有信息过载，只有过滤失败。 —— Clay Shirky 快速判断信息质量 尽可能搜集到足够多信息的这个前提紧接着会给很多人造成下一个困难：收集了但浏览起来太慢或者根本看不完啊，又或者面对一条信息无法判断真伪或其价值。我认为这两个表相问题其实是同一个问题。解决起来的思路也是一致的—— 建立基本的认知网络 快速判断一条信息质量的能力依赖于更底层的认知能力和知识网络，比如懂得基本的知识论（epistemology，探讨知识的本质、起源和范围的一个哲学分支）概念，理解基础科学研究方法，大致了解想要搜集信息的领域的认知框架。当一个人这些全都不懂时，就很难快速看懂那个领域的资料，或者以为自己看懂了实际上理解得南辕北辙。 在这种情况下，维基词条通常是最好的入口。 理解信息源的重要性 一年多前我写了一篇文章《信息食物链》，主要写的是信息分三六九等，类似能量在食物链中的传播模式，信息也在一级级地传播，经过传播的环节越多，损耗就越大。所以判断信息价值的原则之一是看它的原创度有多高，离“源头”有多近。 拿科研领域的一条信息传播链举例：在实验室里通过科学方法验证的一个科研假说，就是处于源头的信息。论文是其载体。往下走，加工一手科研论文信息的包括文献综述、一手行业报告和专业书籍。再把综述和行业报告选择性翻译传播给大众的有大众媒体和通俗图书。再往下游走，社交媒体上传播的往往是对媒体专业记者所写内容的再加工。最后还可能下沉到完全无法回溯信息源的形式，比如”我听村口王大爷说……“。 这个信息下沉的过程持续数十年也不少见。 除了原创度外，作者本身也是判断信息价值的重要因素。互联网上的信息浩如烟海，根据内容创作者的背景资历和过往记录来判断信息的可靠性，是效率较高的方法。比如，一个没有医科学历的人开口给专业医学问题下结论，一个不表明学历职业背景的人喜欢谈论专业度很高的话题，一个人全能到什么话题都要掺合一下，一个人喜欢脱离概率下绝对化的结论，一个人擅长拿边角料新闻或引用结论不可重复的某篇论文来支持自己的阴谋论，以上这些都是可以“一票否决”某个信息源的警告信号。 当你在信息食物链上越爬越高时，那些价值低甚至为负的垃圾信息源对你来说就会变得非常明显，都不必费力去一一分辨。 有效且快速的阅读技巧 我曾在一个讲如何读英语论文的视频里提过英语非虚构论述文的通用阅读方法：标题 -&gt; 摘要 -&gt; 结论 -&gt; 所有小标题 -&gt; 每节第一段 -&gt; 每段第一句话。这是因为英语非虚构论述文的结构是非常固定的“总分总”结构，优秀论述文全文最重要的信息必然出现在开头（摘要）和结尾（结论），每一节最重要的信息会出现在第一段和最后一段，每一段最重要的信息位于第一句话。这就给了读者一个快速阅读掌握重点的固定方法。这个方法几乎可以推广到所有英文非虚构读物上。 因此当我们在搜索引擎里根据标题和提要点开了10个也许有用的网页时，高效的浏览方式是先按以上方法把所有页面上的要义快速浏览一遍，接着再细读其中几个最相关的网页内容。这个阶段最好不要一开始就在10个搜索结果中的第一/二条内容上花太久细看其中的每一句话，那样会很容易被锚定效应影响。大脑被先入为主的看法占据后，就更难为更多不同观点腾出认知空间。 真实信息可以通过多方印证 真实信息通常不怕被考验，所谓”真理越辩越明“。骗子才会怕你把他说的话去和其他信息源进行相互验证。当一条信息能被多个可以采信的信息源验证时，它的真实性会大幅上升。 这里的一个难点在于，很多人虽然也有验证信息的天然习惯，但他并没有通过可靠的信息源去验证，而是根据“一个（普通）同事说…”、“某个（其貌不扬的）亲戚说…”、“网上某个（不能验证真实身份的）网民说…”来相互验证——多个个体的认知偏差汇集在一起，也依然是认知偏差。 拒绝即时摄入热点新闻 还有一个过滤信息的简单方法就是拒绝即时摄入热点新闻。没法完全拒绝的话也应该尽量限制这方面的信息输入。因为新闻里的信噪比非常低，社交网络上传播的热点新闻又常常是为调动观众情绪，抑制理性思考的话题，比传统媒体发布新闻的信噪比还低。 自几年前起，我就在微博上取关了所有新闻类账号以及天天转发评论新闻的号。我并没有因此错过真正重要的事件，更重要的是我保留了上网时的认知资源给信噪比更高的内容。 把人作为更高效的信息过滤节点 内容创作者作为信息源的一个重要组成部分，实际上充当了信息过滤节点的角色。除了直接创作内容外，在网上转发、推荐其他内容自然也是一种帮读者过滤信息的行为。审慎选择可以充当自己信息输入节点的人，长期来看，这一点对个人认知能力和决策水平的影响，远高于大多数人的预设。 除了以上这种把人作为信息过滤节点的形式，在生活中还有另一种重要的信息搜集过滤方式，即主动与他人连接沟通。此时的沟通形式可以笼统地用 informational interview 来代指。这更适合信息聚集在相对小众、局部、不透明、存在壁垒的位置的状况，比如，某小众行业在某一城市的发展情况，如何联系到靠谱人脉出版一本书，一家中小型公司或者团队值不值得加入，如何进入一个新兴行业，公司遇到棘手问题如何解决。这些问题的真实答案很难通过普通的网络检索获取，但毫无疑问世界上一定有不止一人对这些问题比自己要了解得多。 美国作家 William Gibson 有一句名言，「The future is already here – it’s just not very evenly distributed.」(未来已来，只是分布得还不太均匀。) 这句话存在一个很妙的解读：我们未来要做出决策的信息来源，极有可能此时此刻已经存在了，只是分布得不均匀，需要一定的信息搜集、判断能力。通过 informational interview 把人（脑）作为信息筛选的节点，是一个在特定场景下收集有效、真实信息的好方法。 成为优质信息的输出者 最后这一条算是高阶技能，适合有志之士。 持续输出优质内容，成为信息源头的好处多多—— 内容输出者熟悉信息传播的特性和规律，因此更容易鉴别外界信息的真实性与可靠度。 持续输出者自己可以成为一个汇聚信息和观点的节点，降低了错过领域内重要信息的概率，提高了阅读筛选信息的效率。 持续输出好内容的行为会吸引其他创作者和读者，因此能够靠近更多高质量的信息输入源。 把持续输出作为过滤信息的方法，也许是高效获取信息的终极制胜手段。 小结 " }, { "title": "普通人如何做出优质决策", "url": "/sinantang.github.io/pr-7/posts/decisions/", "categories": "Thinking Tools", "tags": "reading, philosophy", "date": "2022-01-30 00:00:00 +0100", "content": "最近看了《the Almanack of Naval Ravikant》这本书，里面有一节是Naval给年轻人的建议。 Spend more time making the big decisions. There are basically three really big decisions you make in your early life: where you live, who you’re with, and what you do. If you’re going to live in a city for ten years, if you’re going to be in a job for five years, if you’re in a relationship for a decade, you should be spending one to two years deciding these things. These are highly dominating decisions. Those three decisions really matter. You have to say no to everything and free up your time so you can solve the important problems. Those three are probably the three biggest ones. 尽管我非常理解Naval的初衷——让大家早一点意识到那些最重要的人生决策，不要不经思考草草决定并浪费太多时间在错误的决策上——但我认为“花一两年时间思考再做出决定”对大多数人来说并不是一个好建议。花时间越长，就能做出一个更好的决策吗？我觉得对大多数人来说，这个线性关联很难建立起来。打个比方，面对一道数学难题，高智商的数学家花得时间越久，很可能离答案也就越近；但对于数学智商平平的人来说，毫无疑问花再久也解不出费马大定理，也许还会把自己逼疯或者掉入民科的思维陷阱。 所以普通人该用什么方法做出优质决策呢？我个人总结了三条原则。 第一，投入适当时间做出大概率不会出错甚至可能带来高收益的决定。 不去花很久做一个决定，不代表所有决定都要不经思考看感觉放飞自己。这其中投入与回报的平衡关键在于“概率”与“期望值”。 期望值（即预估的决策收益）= 投入 x 概率（决策相对成功的可能性） 在一个决定上大多数人投入思考的时间和精力不会相差太多，因此其中“概率”是更重要的杠杆因素。也就是说，如何分析判断一个决策方向的成功概率，是最值得重视的能力。当然，这条原则说起来容易做起来难……但在重大决定还是大致有迹可循。比如，能选择去经济更发达社会更文明的地区，就不选择小地方。因为在更文明发达的地方获得更好生活的概率更高。这一点对于女性和年轻人来说尤其重要。 第二，不惧失败。 当意识到自己之前的决定错了或在当下已不合适时，勇于改变方向，大方承认失误，不把自我认知与区区一个决定绑定，下一次迭代做个新的决定。 比如婚姻生活不快乐的话，有勇气选择结束，给自己一次重新选择更合适伴侣的机会。 比如本职工作在十年前势头不错，但现在已渐成为夕阳行业，在此时有勇气与韧性去开辟新的事业方向。 年轻时我们常常会特别在意别人的看法，为了不被别人看作loser，就想强撑面子，即使已经到了应该承认失败转换方向的时刻。然而有时人生为了更进一大步，需要先后退一小步。就像爬山算法一样，有时为了全局最优，我们需要学会放弃潜力有限的局部最优，那就意味着在遇到马鞍点之前要下降高度。 当一个人不怕失败，总能从失败中爬起来，吸取经验下次做个稍好一点的决策，就等于她拥有了一件绝大多数人都没有的秘密武器。 Fail fast. Fail forward. 第三，不留恋过去，把注意力放在如何在现有条件下最大化收益之上。 也许很多决定本身确实不那么重要，重要的是在那之后的行动。 举个常见的找工作场景，一个人在几个录用选项中选择加入A公司，工作一段时间后发现，原先放弃的B公司似乎发展得更好呢。 如果一味后悔于之前择业的决定，那本质上是在无谓地浪费时间。实际上一个人能在一个工作环境中获得多少成长，很大程度上取决于自己的心态和持续的投入。在一个快速发展的公司里躺平并不会自动增长个人工作能力；在一个更稳定的工作环境里积极主动承担责任，也完全能获得超出平均速度的职业成长。 我想，这条原则背后的原因可能在于，大多数时候，我们有能力决定的几个选项中不涉及极好或极差的，大部分在本质上都差不多。在没有巨大的运气因素降临时，我们在某个时刻的能力和环境因素是固定的，所以够得到的选项也是类似的。选A公司还是B公司，A学校还是B学校，会比做出选择后的行动还重要吗？ 再之，如何解读自己过去的抉择和由之带来的人生经历，是非常个人的叙述选择。对于当下的我来说，时间是一种幻觉，如何理解自己的过去完全取决于现在的自己。也许一个最初不怎样的决策带来了意想不到的人和收获，那也会是一段值得的人生经历。 所以普通人可以用什么方法做出优质决策呢？文末总结一下： 投入适当时间做出大概率不会出错甚至可能存在高收益的决定；在做出选择后向前看，最大化现有条件下的收益；不行的话就承认失误并及时止损，下一次做出更优的决定。 " }, { "title": "How to sleep like a baby", "url": "/sinantang.github.io/pr-7/posts/sleep/", "categories": "Others", "tags": "sleep, energy management", "date": "2022-01-22 00:00:00 +0100", "content": "去年我经历了一段睡眠特别不好的时期，躺着床上时间长但入睡很慢也容易夜醒。那段时间挺痛苦的，不仅加重了季节性抑郁情绪，还让整个人看起来都像是老了几岁……为了自救我尝试了不少提高睡眠质量的方法，其中有些效果比较显著，在这儿写出来分享给有类似困扰的读者们。 有睡眠问题的人通常都了解的常规睡眠常识（卧室需要光线暗温度低，过午不食咖啡因， 规律作息等）我在这里就不赘述了。主要还是想分享几条很多人不一定知道或者不了解重要性的科学提高睡眠质量的加分技巧。 写简单的睡眠日记 形式非常极简，每天早上起床后给昨晚的睡眠质量打个分记录下来即可。我的打分制是 [-2, 2] 之间的整数。0代表不好不坏，1代表睡得还行，2代表很好，-1代表不太好，-2代表很不好。 睡眠日记的作用是建立起个人生活里的变量与睡眠质量之间的联系。比如，我连续记录了一段时间的睡眠日记后发现，周一周二的睡眠质量常常不太好，周四周五则分数会高一点。最可能的一个原因就是我周末作息时间和工作日不一样，所以导致一周开始时总是需要重新适应新作息。如果不写睡眠日记的话，我也许对这些联系会有个模模糊糊的想法，但无法建立数据上的关联。看到数据呈现的规律后，我才能确定最可能的原因，才能更有针对性地调整生活方式以提高睡眠质量。 把“睡眠日记”放在第一条是因为这个方法可以和以下的方法结合起来，比如记录睡眠质量与运动的关系，与睡前活动的关系。时间长了，这些记录会成为了解自己身体偏好的宝贵数据。 早上起床之后尽快接触到室外无过滤的光线 这里的重点是“室外光线”。自然光线和室内灯光不一样，和经过玻璃窗过滤的光线也不一样。就算是阴天，室外光线也依然具有调节人体节律的作用。 我现在一般会在早上起床穿衣之后就去阳台上站几分钟，有时拉伸一下身体，原地跳一跳，与下一条建议结合起来。现在冬天早晨清冷的空气也有助于身体快速苏醒过来。白天保持较好的精神状态才能保证足够的活动量。白天足够的活动量反过来有助于提高下一次睡觉的质量。 利用运动提高睡眠质量 这里有两个要点，一是早上起床之后可以尽快快速运动一下，哪怕只是跳绳3分钟，也有助于人快速苏醒。 第二个要点是保证每天足够的活动/运动量。有一次我咨询医生失眠问题，医生问我每天步数是多少。我以前从不记录步数所以不知道。医生说如果能每天积累一万步，对提高睡眠质量会有很积极的影响。后来我就有意识地每天尽量都多走走，同时意识到相对静止的力量训练不能完全替代走路跑步。 结合睡眠日记，我确实观察到一旦连续两三天不怎么运动，睡眠质量就会下降。 睡前不处理会让人精神兴奋的事，包括工作和社交软件 对我来说，是改变把学习工作拖延到太晚的心态。重要的事早上起来先做，不重要的事就延后到第二天和周末再做，或者再考量一下是不是真的需要花那么时间去做。 “飞行员的两分钟快速入睡技巧” 这是一个二战时飞行员会用到的在任何情况下快速入睡的技巧。 首先，依次彻底放松面部所有肌肉，包括前额、眉头、眼皮、脸颊、下巴、舌头。接着，放松身上其他部位的肌肉，比如从双腿开始，想象腿部肌肉完全放松，像陷到棉花中去那样毫无负担感。很多人进行到这儿就已经睡着了。还睡不着的可以开始躺着冥想，把注意力放在一呼一吸上。 这个入睡技巧让我意识到，我在想东想西睡不着的时候，往往有些面部肌肉处于紧张状态，比如皱眉啊咬牙啊。一旦开始放松面部肌肉，人就更容易进入松弛的状态。 少阅读解释睡眠重要性的文章 神经科学家Matthew Walker前几年写了一本畅销书《Why we sleep》，主要内容是睡眠不为人知的重要性。我当时看了作者的同主题TED演讲之后就决定绝对不去看这本书。因为对于我这种容易紧张的人来说，知道太多“为什么睡眠很重要”的知识会让我失眠的时候更加焦虑。我觉得对于大部分人来说，在睡眠问题上的“为什么”不重要，“怎么做”才重要。 后来我偶然听到一期Matthew Walker讲睡眠的播客，他说当他出版《Why we sleep》时完全没想到这会加重一部分人的睡眠障碍问题，后来看了很多读者反馈才意识到，有些人看了这本书后变得更加焦虑，进而加重了失眠问题。所以他决定以后除了“why”之外，也要讲讲“how” :) " }, { "title": "My Reading Year, 2021", "url": "/sinantang.github.io/pr-7/posts/reading-year-2021/", "categories": "Book Review", "tags": "reading, learning, books", "date": "2021-12-30 00:00:00 +0100", "content": "Best reads of 2021 《A thousand brains》by Jeff Hawkins 《On China》by Henry Kissinger 《The art of impossible》by Steven Kotler 《Good economics for hard times》by Abhijit Banerjee &amp; Esther Duflo 《Designing your life》by Bill Burnett &amp; Dave Evans 《Shape up》by Ryan Singer . Here’s a list of books I’ve read in 2021 and my thoughts on each one of them — Nonfiction Neuroscience A thousand brains: a new theory of intelligence | Jeff Hawkins 我今年读过的最推荐的书之一！这本书也上了比尔盖茨不久前发的年度书单 :) 我已经写过一篇很完整的读书笔记。 The art of impossible: a peak performance primer | Steven Kotler 作者Steven Kotler总结解读了最前沿的脑科学研究，把peak performance分解成motivation、learning、creativity和flow，回归到最原始基础的神经化学原理，在此基础上提出hack自己大脑，以最不费力的方式来发掘潜力实现目标的方法论。 这本书的信息量很大，但并非大量信息的简单堆砌。很适合那些想要了解一些可以提高学习工作能力的实用脑科学，但不知道从何起步的读者。我边读边做了很多笔记，如专家看得见但普通人会忽视的知识，正念冥想如何调节情绪，何为真正的情商，心流与自我评判，如何提高创造力等等。 Self Improvement / Career Development How to fail at almost everything and still win big ｜ Scott Adams 作者Scott Adams强调过多次，不要把他写的内容当作金科玉律，甚至都不必当作建议，毕竟他的主业可是漫画家。作者说，把此书当作“the experience of your smart friend”，外加穿插的一些科学研究证据即可。从这个角度来看，这本书内容的质量肯定是超出预期的。书中写到的一些思维方式，比如system v.s. goal，energy management，elements for happiness，passion is bullshit，math of success，都是很实用很开阔思路的内容。虽然书中有些观点对我来说并无新意，但对于没听过的人来说，肯定会很有价值。 年初看了这本书，带给我的最可见影响就是我从之前努力一周运动3次到争取每天都有所运动。作者“get active everyday”的建议让我的运动频率从30-40%直接升到80%左右，相当可观！ Designing your life ｜ Bill Burnett &amp; Dave Evans 一开始翻开这本书是为回母校的职业规划讲座寻找素材，后来读着读着发现这本书不止是为大学生写的，实际上很适合任何对自己现状不满或对未来感到迷茫的人阅读参考。 这本书源于斯坦福大学设计学院的一门叫“Life Design（人生设计）”的课程，教学生如何把Design Thinking原则应用到人生规划（主要是职业规划）上。因为很受欢迎，也有研究验证过这门课对学生有显著积极影响，所以讲这门课的两位教授就合写了这本书，给更多不能亲自去斯坦福上课的读者“云上课”的机会。 我很喜欢这本书的一大原因是它和普通讲职业规划的材料非常不同。这本书不仅精确地抓住了现代社会很多人在择业上遇到的问题，而且还提供了多个既深刻又实用的元认知思考工具。 比如，书里提到几个概念： Wicked problems（棘手问题），即那些在现实中有各种制约因素，非常复杂，很难或无法完美解决的问题，比如国家政策规划的问题。 作者说，人生规划其实就是个wicked problem，在我们每个人都只能活一次的前提下并不存在一个完美解决方案，人生也不存在唯一一条“最佳路线”，因此我们对人生的态度不应该是“我想找到那个答案，能让我一劳永逸解决人生里的问题”、“我选这条路是不是就会错失人生最优解”，这些思维方式是不会成功的。 Gravity problems（重力问题），这个我之前已经写过了。重力问题实际上不是“问题”，而是一种客观存在的环境条件，是无法改变、解决的。 比如，有些行业平均收入很低，这是个客观存在的事实，在选择进入时你就已经知道了，再抱怨哀叹也不会改变现状。开始行动的第一步应该是识别“重力问题”，这样接下来才可以把精力放在真正有解决可能性的非重力问题上。 Anchor problems（锚定问题），那些让我们卡住的问题。 “锚定问题”通常是这样出现的：我们有一个目标，很快想到第一个解决方案，但这个解决方案执行起来难度很大，我们已经卡在这个解决方案上很久（甚至数年）了，以至于这个解决方案本身已经变得不可能实现，变成一个“锚定问题”了，把我们牢牢禁锢在一个思维死角里。 但实际上，这个现在让人痛苦的“锚定问题”，只是目标的潜在解决方案之一啊。先不说登顶通常存在多条爬山路线，现实生活中有多少人因为卡在一个没深思熟虑过的解决方案上太久，以至于都忘了最初目标是啥呢…… Don’t make a doable problem into an anchor problem by wedding yourself to a solution that just isn’t working. Dysfunctional beliefs（功能失调性信念），之前有一条微博专门写过，这里就不重复了。 我很佩服美国教育体制内老师的一点就是，他们有深刻的思想，但同时也能给出有效的方法论，能让学生把理论真正落到实处。比如人生设计这门课程的两个教授就是如此。 推荐所有年轻人（我觉得所有认为自己人生还很有盼头的人都是年轻人:P）都翻翻这本书，很可能可以收获面对人生问题的更好思维工具。 Nice girls don’t get the corner office | Lois P Frankel 这本写给职场女性的老书初版于2004年。书中内容对你有多少价值，取决于你所处的职场环境有多先进 :) 如果你（作为工作女性）生活在一个男女不平等还相当严重，社会文明程度不高，大部分公司的企业文化较落后的大环境里，那你确实很有可能从这本书里学到很多有利于在职场升职加薪的实用建议！ 像这本书这样鼓励女性向男性的行为靠近以获取更高事业成就的思路，在欧美一些地方好像已经不那么适用了…… 远离迷茫，从学会赚钱开始 | 曾鹏宇 没什么实质性内容，没必要翻开…… Technology Make your own neural network | Tariq Rashid 这是一本从基本数学理论讲神经网络的原理与发展动机的入门级技术书。比较有趣的是讲完原理后还有上手写码实践的部分：从零开始用Python写简单的神经网络，并训练出一个图像识别的模型。看完书能做出个小项目，很适合需要积累一点理论知识和实践项目的程序员。 这其实是我第一次真正从底层理解一些神经网络里的常见专用概念，比如feed forward, backpropogation, gradient descent, updating weights等。作者说，这些基础原理其实不难学习；看完此书后我也对此感到赞同，但的确前几年我从没遇到过能像这本书一样真正把这些概念掰开揉碎讲清楚的教学材料。 凤凰项目 The Phoenix Project: a novel about IT, DevOps, and helping your business win | Gene Kim, George Spafford &amp; Kevin Behr 对于在软件/科技公司里工作的人，尤其是对程序员和技术经理来说，这本讲企业转型的技术小说很值得一读！ 虽然具体内容（从传统人肉IT运维转型到DevOps）上已经显得过时，但思路上还是很精彩的。如何分析存在于大组织架构中的复杂问题，如何带领部门转型，如何从日常事务中跳出来思考更高维度的问题，这本书里都写到了。 因为是以讲故事的形式，所以比看干巴巴的非虚构商业书管理书要生动、易读得多。 Robot: meet the machines of the future | D.K. Publishing 翻这本D.K.科普图册书就像亲临了多场机器人博览会一样。相对于去博览会，图书的缺点是时效性强，毕竟机器人学和人工智能领域现在发展很快；优点是更有逻辑更系统，信息综合性更好，更有科普意义。 Writing 风格的要素 The elements of style | William Strunk Jr. 因为想要提高英语写作水平，所以看了这本著名的《风格的要素》。这本薄薄的小册子初版于一百多年前，其中内容在今天读来却依然不过时，这就是经典的力量。 优秀的英文写作风格其实和我们从小在国内学校学到的英语作文风完全相反。 The approach to style is by ways of plainness, simplicity, orderliness, sincerity. 好的写作风格意味着，能用简单朴素的词和结构，就不用繁复华丽的词或结构。当平铺直叙就能准确表达时，就不必用修辞和长难句。学写中学英语作文时，老师基本都会传授，要用大词，要用修辞，要写长句，包括各种从句。现在回看，那显然是因为大家（包括阅卷老师）都不知道什么是好的风格，为了快速省力地区分学生英语水平，所以给出“越复杂就越高级”这个评分标准。 这本书解答了我上学时看一些美国优秀小说杂文时的疑惑：明明这用词都很简单，句子也不长，怎么就获奖了呢 :) 再摘录几条书中列出的优秀写作风格指南： Omit needless words. Use the active voice. Do not overstate. Avoid fancy words. Acoid the use of qualifiers. Do not explain too much. Use figures of speech sparingly. History / Politics 论中国 On China | Henry Kissinger 这是一本从美国人（前美国国务卿基辛格）视角讲中国的经典好书！这本书给了我不少尝试思考政治问题的思路，同时也是对中国近现代历史简洁顺畅的梳理。基辛格的书值得一读的原因在于，他确实理解中国传统和文化，他能综合历史传统与近现代时政局势的视角来理解中国领导人，又有多年与中国政府打交道的第一手经验。我觉得很适合中国年轻人以开放心态去阅读，打破自己原有的一些简化僵化的观点。 Creativity Steal like an artist ｜ Austin Kleon Show your work ｜ Austin Kleon Keep going ｜ Austin Kleon The artist’s way ｜ Julia Cameron 我写过一篇关于创造力的读书笔记合集，囊括了以上四本书。 Autobiography The path to power &amp; The Downing Street years | Margaret Thatcher Audible上的撒切尔自传合集有声书版可是撒切尔本人朗读的哦！从这个细节上可以看出一点撒切尔是个什么样的人。 我推荐撒切尔自传的三个理由： 了解撒切尔的生平故事，感受撒切尔的人格魅力和领导力。 Conviction（信念）几乎是这两本自传里出现频率最高的实词之一，从撒切尔的一言一行可以看出”a person of convictions”是什么样子的。 再就是领导力。什么才是领导力，撒切尔作为一位政治家，是如何面向同僚和民众树立影响力的。这些细节都可以通过她的自传慢慢品味。 了解英国政治体系。 英国古老的君主立宪制发展至今依然牢固，而且直接影响了很多英联邦国家的政治制度，这些表明了英国政治在世界政治版图中的特殊性。 更具体地，在现代化的过程中，民众如何参与政治，崇尚保守主义和自由主义的传统如何塑造英国的政治文化，议会、内阁、首相、女王在政治决策中的角色，这些政治历史常识都可以从这本自传中领略到。 了解英国从一战后到苏联解体这段时期的历史发展和社会风貌。 撒切尔在这个历史大背景下长大，这深深影响了她的政治信念和政策方向。 再就是为什么英国和欧洲大陆总是不对付，你了解了英国独特的历史社会背景后，可能就会发现，英国最近几年“脱欧”没什么令人惊奇的，最初选择“入欧”也许才是一个不寻常的决定…… 一生的旅程 The ride of a lifetime: lessons learned from 15 years as CEO of the Walt Disney company | Robert Iger 这是一个背景普通的人，在47年职业生涯中从未跳槽，从电视台底层打杂工一路做到华特迪士尼CEO位置上的故事。 这本书比普通的商业类书籍要真诚得多。对于职业生涯中遇到的主要挑战和他所做决定的动机，Bob Iger写得非常具体真实。从内部视角回看传统传媒衰落到新型媒体崛起的这期间里，美国创意产业商业大事件发生的始末，这一点很有看头！ Bob Iger在职期间，迪士尼收购了乔布斯的皮克斯动画公司，所以这本书也以不少笔墨描述这个收购过程和Iger与乔布斯的互动。有些段落非常感人，我读的时候还忍不住红了眼圈。喜欢乔布斯的读者，可以翻翻这本书里的相关章节，了解乔布斯的另一个不与苹果产品绑定的侧面。 PS: 这本书也得到过比尔盖茨的推荐。 绝对笑喷之弃业医生日志 This is going to hurt: secret diaries of a junior doctor | Adam Kay 一本轻松搞笑之余不乏思考的书。请看我之前写过的读书笔记，其中写了几点我对医疗问题的想法。 Economics Good economics for hard times | Abhijit Banerjee &amp; Esther Duflo 这本书的读书笔记总结在此。 Money for nothing: the scientists, fraudsters, and corrupt politicians who reinvented money, panicked a nation, and made the world rich | Thomas Levenson 这本是讲的是现代金融业的起源与发展。这么介绍听起来可能会多少显得枯燥，但作者的遣词造句水平和深厚的文字功力让整本书读起来更像是个跌宕起伏的小说。 当我们想到金融时，很少会从时间的维度上去想现代经济发展模式和金融工具是如何诞生并一步步发展起来的。也很少有人了解16-17世纪的科学革命与金融业发展之间的密切联系。这本书从牛顿对金融业的贡献讲起，描述了现代金融市场在17世纪的英国诞生，与英国经济和政治发展的联系，以及人类历史上第一场金融危机（发生于1720年）的详细始末。 读这本书的时候，我有个强烈的感受：跟英国金融业的几百年发展历史相比，A股明显还是个新生儿呢（现代上证交易所正式成立于1990年），A股市场和交易群众现在还不成熟是再正常不过的了，我们还有很长的成长之路要走，未来潜力很大。 Personal Finances 让时间陪你慢慢变富 | 李笑来 这是一本讲定投的投资理财书，很薄。 这本书帮我理清了一些我在理财上的困惑，比如怎样平衡自己的保守心态与长期主义，如何看待经济周期。 在周期这个问题上，作者提出，由于信息流通的速度越来越快，错误信息和恐慌情绪被修正的速度变得更快，经济周期也在随之缩短。比如，2020年初因为疫情标普指数下跌的部分在几个月后就涨回来了，而08经济危机的负面影响却花了小几年才被市场消化。这个思路我还是第一次接触，间接帮我坚定了持续、长期投资的心态。 解读基金 ｜ 季凯帆 这本作为了解A股基金市场的常识书还可以。 一个提醒：看这类非专业人士写的理财书时一定要分清什么是事实，什么是观点。不要把作者的投资观点与常识、知识、事实相混淆。也不要以为看了一本书就真能自信地去投资A股市场…… Business Shape up: stop running in circles and ship work that matters | Ryan Singer 关键词：软件产品设计、组织架构、团队工作模式；范围限定：小型软件公司。《Shape up》是我在这些话题上目前读过的最好的一本书！ 这本书讲的是Basecamp公司内部软件项目管理与产品开发的方法论。这个方法论与Agile（敏捷开发）/ Scrum / Kanban / Waterfall 等大部分软件开发公司使用的项目管理方法都大不相同。 首先，Basecamp的项目管理原则是“fixed time, variable scope”，即固定的周期、可变的范围。 Basecamp的项目开发周期是6+2周，而不是软件科技公司更熟悉的两周agile周期。他们认为两周时间太短，很难持续ship anything meaningful。6周是一个项目从头到尾的开发和测试时长，接下来两周是处理bug、发布、写文档，以及放松调整缓冲期。6周内完不成的项目，原则上就会被终止，不会为了完成就不断延期（避免被沉没成本耽误更多资源）。 Basecamp内部开发feature的团队以2-3人为单位：1个产品设计，1-2个软件工程师。 与开发周期并行的是product shaping（产品定义？）过程，由C-level和高级产品设计人员进行，同样也是以人数非常有限的小团队进行。这个阶段定义出的产品特征处于抽象与具体之间。不具体到执行细节，这样之后开发和设计人员才能有自主权决定怎么完成项目；不过于抽象，才能不把过多不可预测性和复杂度压到开发设计人员身上。 产品定义之后，有一个项目betting阶段。此时所有想要进入下一个开发周期的项目一起竞争资源。 在Basecamp不存在项目backlog，如果项目不被选中，也不会安排到下下个周期。如果有人想要推动一个项目，那他应该到betting阶段推销这个项目。胜出的项目就会安排给下一个开发周期的开发小团队。 以上我大致概括了Basecamp产品开发和项目管理方法论的几个与众不同的特征。书里还有不少非常有意思的工作模型。除了理论之外，《Shape up》还包括可操作性很强的具体建议和真实案例说明。 全书只有100多页，集中几小时就能看完。Basecamp官网有PDF，可以免费下载。 五星推荐给有一定工作经验，软件科技行业的从业者阅读借鉴！ Medicine 最好的告别 Being mortal: medicine and what matters in the end ｜ Atul Gawande 选择看这本书是想从专业人士那里了解目前在经济医疗发达地区的养老选项。 关于体面养老的选项，如果你是个对衰老焦虑且不太了解养老现状的人，那的确可以看看此书。虽然这本书夹杂了很多略冗长的故事案例，信息量有限，但对于小白来说是个开始，毕竟这个主题的通俗书还不多。 比如老年社区、养老院的不同种类，适合什么样的人群，需要注意的问题，什么时候可以考虑搬入老年社区等等；再就是这本书可以促使人更早开始考虑自己能接受的老去的方式——想要一直生活在自己家里，还是愿意接受为了延长质量不高的生命而在医院床上躺很久，或者寻找辅助生活（assisted living）的选项。 提前考虑这些是为了到时候不会很突然地感到在被生活推着走，在需要作出选择时能做出理性决定。 这本书对衰老知识的科普也比较实用，可以用来关注长辈的身体状况。例如，老人第一次不明原因的摔倒意外，通常是人衰老到无法独立自主生活的重要信号。 Education 优秀的绵羊 Excellent sheep ｜ William Deresiewicz “优秀的绵羊”指的是现在美国精英大学批量生产出的世俗意义上很优秀但实际上内心迷茫恐惧的精英年轻人们。 这本书几年前曾风靡一时，但我读下来感觉是整体比较无聊，说教部分偏多。对我来说最有意思的是讲美国高等教育体系历史变迁的章节。 让孩子受益一生的大脑开发课 | 杨滢 可以这么说，这是一本中国家长能读到的质量最高的儿童教育本土中文书籍之一。本书作者是微博著名博主 @屠龙的胭脂井。 Psychology How to think more about sex | Alain de Botton 这本书的主题其实更接近于how to think differently about modern sex。内容上不止于谈sex本身，还包括现代亲密关系中的常见问题。18岁以上的读者可以翻一翻~ Sociology 格调 Class: a guide through the American status system | Paul Fussell 这是一本评述美国社会阶级的书。二十年前时此书在国内已经火过一回，我看这本书纯粹是出于好奇…… 很多人看这本书是为窥视上层人士的生活，顺便学学更高级的生活方式，但作者可不是以此为目的来写的。不论是上层还是中产还是底层，都逃不开作者的刻薄嘲讽之辞。中产的小心翼翼患得患失，底层的不自由低尊严，上层的固步自封自我感觉良好，都是作者笔下讽刺的对象。 最后作者提出，还存在一种在现有社会阶级系统之外生活的一种可能性。虽然这说法有点陈词滥调且脱离现实，但以偶尔以这种跳脱的心态来面对过于内卷的现状，倒也不失一种能让自己更自由一点的思维方式（前提是已解决基本温饱问题）。 Architecture 住宅精细化设计 Detailed design for dwellings ｜ 周燕珉 对于阅读理解能力过关的非专业人士来说，看完这本书差不多可以避开80%在国内买房装修的坑。 对非东亚地区（即集中大片的高层住宅楼房不是主流的地方）的参考性有限。 Fiction 复乐园 Paradise regained ｜ 渡边淳一 Junichi Watanabe 养老题材的小说可以说是极其少见了。这本十几年前初版的小说，现在看也并不过时，简直可以算是对现代养老观念的科普作品。 我之前写过的读书笔记。 4 3 2 1 | Paul Auster 喜欢读正经小说的同学们，一定不要错过保罗·奥斯特的作品！ 保罗·奥斯特属于天才型作家，自创了一种与众不同、原创度很高的后现代主义文学文体。如果你没看过他的作品，也先不去看书评，第一次看完一本奥斯特的小说可能会让你产生，“啊小说还能这么写？！”的感受。 《4 3 2 1》是奥斯特最新的小说（2017年出版〉，讲的是一个在二战后出生于美国的男孩的成长故事。这个男孩叫弗格森，是第三代犹太移民，成长于五六十年代的新泽西和纽约。 这部小说最特别的设定在于，作者写了四个并行版本的弗格森的成长故事。同一个人，仅因为从小到大成长环境中偶然事件的些许不同，而会走上怎样不同的人生道路呢——这就是作者想要探索的主题。 除了偶然事件对一个人人生的影响，我觉得还有个主题很有启发性，即一件已发生的事与那件事的影响之间的区别。一些心理学家不是会这么说么，一件事对你的影响取决于你如何去解读它。如果你能为自己创造出一个足够好的narrative（叙事），那即使是一件表面看起来糟糕的事，也有可能给人生留下积极的影响。 除此之外，小说还花了大量篇幅描述60年代的美国社会，包括重要的政治和社会事件。书中涉及的细节基本上都是真实的，读小说的过程中顺便了解美国疯狂的60年代历史，也非常有意思。 以上是我对《4 3 2 1》的好评部分，下面是吐槽。如果你打算看这本小说，可以选择停在这里不往下看—— 如果你稍微了解一下作者生平的话，会发现保罗·奥斯特和小说里的主人公小男孩非常像：都出生于1947年，都是犹太移民后裔，都在新泽西长大，都非常喜欢纽约，都对写作有着天生的兴趣和天赋。 说实话，这也不是奥斯特第一次把自己的影子放在小说里了，我是觉得这种行为有点太自恋，不太能让人忍受……除了小说，奥斯特现在74岁，但已经出版了至少两本正八经的回忆录……自恋也就罢了，我觉得把自己写成小说主人公的创作决定其实很影响这本小说的冲击力和格局。如果它是更加纯粹的对不同人生道路的讨论，那价值肯定会高于疑似回忆录的主题。 柳林风声 The wind in the willows | Kenneth Grahame 这是一本英国经典童话，初版于一百多年前。这是一个关于朋友和好朋友之间该如何相处的故事。语言优美、平和、典雅。在成年之后再读新的童话，可以重拾一小片内心的柔软。 贪心记 | 神圣午睡 这是一个关于职场女性的成长小说。适合那些像女主一样从小感情经历趋于零，在年纪二十大几时才开始探索什么是爱情的女性读者。同时在轻松愉快的情节中还可以学到不少职场升级打怪的小贴士。 媚俗小说 | 神圣午睡 这是我读过的文学性最强的网文小说！作者通过解构普通女孩对爱情的幻想，让读者在荒诞的故事情节中探索对爱情观的反思。作者一贯的轻喜剧风格让人读起来毫无负担，是个当你不想读严肃非虚构书籍也不想读无营养糖水小说时的好选项。 Harry Potter und der Stein der Weisen ｜ J. K. Rowling 提到哈利波特当然不是为了推荐这套书，而是想推荐一个学习外语的方法： 选一本情节熟悉的书，跟着有声书一起读外语版。生词只在多次出现时才去查。重点是以大量泛读加强语感，不因望生词而生怯进而半途而废。比如，我特别熟悉哈利波特的故事，于是买了德语版的哈利波特纸质书和有声书，边听有声书边看纸质书，极少专门停下音频去查生词，最后一气呵成，用了十多个小时就看完了《哈利波特与魔法石》的德译本。 这种学外语方法过程趣味性强，结果予人成就感，不太有吃苦的感觉。 Further reading My book recommendations, 2020 (Bilingual) Tech book recommendations, 2020 (in English) What I read in 2019 (in Chinese) What I read in 2018 (in Chinese) What I read in 2017 (in Chinese) " }, { "title": "汉萨同盟城市汉堡和吕贝克的兴衰", "url": "/sinantang.github.io/pr-7/posts/hansa/", "categories": "Thinking Tools", "tags": "history", "date": "2021-12-26 00:00:00 +0100", "content": "我圣诞假期期间在汉堡旅游，去年到过吕贝克，这两个在欧洲中世纪时期盛极一时的汉萨同盟城市，如今的城市发展却大相径庭，对历史感兴趣的同学应该都会对此感到好奇吧。我趁现在在汉堡就多了解了下城市发展历史，看到一些很有启发性的历史学者的观点，今天和大家分享一下。 一点历史背景知识： 汉萨同盟是12-13世纪中欧的神圣罗马帝国与条顿骑士团诸城市之间形成的商业、政治联盟，以德意志北部城市为主，以吕贝克为首。14世纪晚期-15世纪早期达到鼎盛，一度有近200个加盟城市，实质上垄断了波罗的海和北海及周边的贸易活动。汉萨同盟积累了大量财富，拥有自己的武装和金库。汉萨商人当时通过向欧洲封建领主献金而一度拥有左右欧洲政治的能力。 15世纪中叶后，汉萨同盟转衰，1669年解体。 汉萨同盟是人类历史上最成功的贸易联盟，同时也被认为启发了现在欧盟的组织形式。 在汉萨同盟衰落之后，汉堡并没有跟着衰落下去。经过几百年的持续发展，现已是德国最大港口和第二大城市，除贸易外还拥有发达的高科技经济和文化产业。 但距汉堡仅65公里远的港口城市吕贝克，作为汉萨同盟的“首都”，自15/16世纪以来城市发展就渐渐衰落，再也没有达到过曾经的光辉地位。 为什么15/16世纪时方方面面都很具可比性的两个德国北部城市，会走上完全不同的道路呢？ 15世纪时，荷兰的崛起威胁了汉萨同盟在北海（汉堡）和波罗的海（吕贝克）的贸易垄断。 面对外部威胁，吕贝克的策略是加强贸易保护，给予一小撮汉萨商人更多贸易特权，同时支持阻碍荷兰贸易发展的活动（包括对荷局部战争）。 汉堡一开始作为吕贝克的同盟小弟，也参与了那些活动，但后来汉堡改变了策略，通过内部改革采取了与吕贝克相反的应对措施。 汉堡逐渐取消了对小部分富商的特权，削减贸易限制规则，向更多本地人和外国人开放贸易。 汉堡不再尝试固守自己在北海长达几世纪的主导贸易地位，而转身选择拥抱新世界，一个贸易更加开放平等的世界，把自己的发展策略升级成融入大西洋的开放贸易体系。 汉堡的改革吸引了更多商人和贸易活动。自16世纪起开始超越吕贝克，直到现在与吕贝克已是不可同日而语。 这两个城市的发展轨迹给我的启示： 固守旧世界和旧规则是不会有未来的。曾经的优势在新变化下很可能会变成前进的阻碍，成功时也是应该开始思考应对未来衰败的策略之时，所谓居安思危，不论是对人、城市还是国家都是如此。 " }, { "title": "高效休息指南", "url": "/sinantang.github.io/pr-7/posts/rest/", "categories": "Self improvement", "tags": "energy management", "date": "2021-12-12 00:00:00 +0100", "content": "如何高效休息是个困扰了我很久的问题，因为我早就发现，不会休息会让人在休息之后比工作完还累。17年时我还写过一篇文章《能量管理》，以记录当时对这个问题的思考。最近我对这个问题又有了新体会，根据一些阅读和实践，我总结出下面这份“坐班族的高效休息指南”，这些方法对我来说非常有效，写下来和大家分享交流！ 如果你只有两分钟时间： 缓慢深呼吸，进入正念冥想状态，把注意力全部放在呼吸上。 我目前还没发现比全神贯注地呼吸两分钟更能让人快速放松平静下来的方法。 如果你有10-30分钟时间： 站起来做一些轻体力、重复性的简单劳动，比如叠衣服、浇花、装卸洗碗机等简单家务。 重复性轻体力活动可以开启大脑的默认网络，发散个人注意力，但大脑同时会在潜意识里继续思考休息之前的工作内容。这个方法尤其适合在工作上遇到一时解决不了的难题，需要“灵感”的场合。比如邮件写到一半不知道如何继续，遇到难缠bug时怎样在不同处理方法中选择最合适的这类问题。 如果你有1-2小时时间： 充分放松身体：比如运动、桑拿、按摩。最推荐的方法还是运动。运动对身体来说是一种“急性压力”。人体是很擅长处理短期急性压力（比如运动可以提高身体机能水平，紧急情况会激发人体最高潜能）的，但不擅长处理长期慢性压力（比如长期低水平的压力可能导致抑郁症）。 如果你是能通过小睡恢复精力的人，也可以选择通过小睡来放松。但我总觉得这不适合大多数人。很多人午睡醒来，不只是身体放松，大脑也跟着下线，接下来半个下午都反应迟钝…… 如果你有半天或以上的时间： 有条件的话，去大自然里散步，切断网络，重新体会身体沉浸于自然环境中的感觉。 做一些有创造性的、与本业不重合的爱好，比如读书、画画、写作、摄影、玩儿乐器等等。 当你有相对大块儿的休息时间（如周末）时，一定不要把所有时间都浪费在被动接收外界刺激上。我们所需要的说是“休息”，其实是想要重新找回被工作消耗的能量和活力——没有什么能比创造性活动更能主动激发能量的了。被动接收一整天的社交网络信息流，看似非常轻松，但实际上却会让人在情绪和脑力上都很累，同时人的内在精神需求也得不到满足。然而创造性的活动可以通过满足精神需求来让人感到更深层持久的快乐，那份能量才是我们真正需要的。 小结 总结一下，为了好好休息，其实我们很需要主动地去做点什么，而不是感到累了后就不假思索地被动接受那些看似轻松的静态选项。 " }, { "title": "读书笔记专题合集：关于创造力", "url": "/sinantang.github.io/pr-7/posts/creativity/", "categories": "Reading Notes", "tags": "reading, books, review of reviews", "date": "2021-10-22 00:00:00 +0200", "content": "最近集中看了几本关于创造力（creativity）的书，在这儿把笔记和读后感综合起来写成一篇，这样比分散着读或写笔记更加系统全面有主题。按主题读书并总结是我希望以后慢慢培养的一个进阶读书习惯，这就算是个开端吧。 以下三位作者的五本书，虽然主题都是培养创造力，但每位作者的视角都不同，不同书里的有些观点看起来也许相互矛盾，但这才是按主题读书的最大好处之一。我们有了不同来源相互论证同一件事的素材，其中的冲突之处比和谐之处更重要，提取出来多角度分析，是个提高思辨能力，深化阅读收获的过程。 《The Artist‘s Way》by Julia Cameron 这是一本三十年前初版的书，是写给想要发展自己创造力的人（主要是艺术家）写的一套课程。这种creative personal development主题的书在当时非常新鲜。作者是个艺术家，她在最初被出版社拒后，自己跑去把整本书打印了出来，放在当地一家书店卖。小火之后，出版社才决定给出版。直到现在这本书在全球已卖了上百万册，登过很多热销榜单。 很多从事创意行业的人都看过这本书。书里推荐的最基础简洁的激发创造力方法——每天写“morning pages”，已经成了一种现象级工具。去谷歌搜索“morning pages”就会看到很多人在网上分享自己的相关经历和体验。 何为「Morning pages」: 每天早上起床后写满三页纸，不多想不评判，只管记录下此刻脑海中意识流带来的想法。坚持每天都这样写三页。就这么简单。 村上春树在《我的职业是小说家》里曾这样描述他30岁时在一场棒球赛上突然决定要写小说的心情：“似乎有什么东西慢慢地从天空飘然落下，而我摊开双手牢牢接住了它。” 以前我把这个片段理解成宇宙偶然把灵感发给了一个未来的小说家。但是看了《the artist‘s way》之后，我开始觉得，其实宇宙随时随地都在分发灵感和创造力，但足够勇敢和敏感，因此能牢牢接住这份赠予的人并不多。 又及：特别理性唯物（比如对冥想也半信半疑）不搞艺术创作的人不适合看这本书，几乎可以肯定你会看不下去……接下来的几本书也许更适合你。 《Steal Like an Artist》by Austin Kleon “太阳底下无新事。”没有什么观点或作品能做到完全原创。如果你觉得一个艺术作品很有创意，大部分时候是因为你不知道它引用借鉴的原始出处。不是只有作者这么说，很多大艺术家本人也表达过相似观点。毕加索这样一个开创了立体主义流派的天才艺术家说过，“Art is theft.” 在这里我想插入一个关于「nothing is completely original」的小故事： 我最近偶然发现一流行英剧里名台词的中世纪古诗起源，很有意思，正好可以用来佐证“这个世界上不存在完全的原创”这个道理。 下面插图是来自英剧《伦敦生活》的一个截图，这个短对话—— “I love you.” “It’ll pass.” ——肯定相当多的人都看到过。 看起来是很有原创性的情节对话设置，但“It’ll pass.”这句话其实源自一句波斯谚语，谚语来自中世纪的一首波斯诗歌，翻译成英文是“This too shall pass”。 而我知道这一点，是因为在看一本书叫《Keep going》，里面有一段美国前总统林肯的演讲选段，林肯在一次演讲里讲了一个关于“This too shall pass”这句话的故事。 那个故事都不一定是真的，但明显流传了很久还被林肯发扬光大了。 当时看到这一页的时候我感到很好奇，因为我完全不知道“This too shall pass”这句话原来至少在林肯时代就存在了，而且起源还更早。于是我就搜了一下，发现这句话居然还有个维基词条，因为它本来就很古老很出名。 这个发现带来一种奇异的体验：一句谚语，在人类历史上已经存在了至少数千年，中间有无数人传播，还不乏名人文人。到了21世纪，用在一个英剧里，竟还给观众们一种原创感很强，并不老套乏味的感觉。 知道这一点后对我们有什么用呢？ 我觉得至少有两点：一是，明白输入是输出的前提。不大量输入别人留下的精神财富，我们日后如何能在自己的作品中引用借鉴呢？不仅要大量涉猎，还要做摘抄剪贴收集，这样以后需要时才能更顺手地当灵感“小偷”。 二是，不再执着于虚无缥缈的灵感。因为相信创造来自灵感，当坐在书桌前盯着空白文档页发呆时，很可能会加强“我没有天赋我毫无创造力”的消极信念。但当我们知道连大艺术家也常常在借鉴引用前人时，这个心理负担就很容易被解除了。 《Show Your Work》by Austin Kleon 这本书讲的是在网上分享、展示有价值内容的重要性和十条建议。 经营一个自己的网络空间，比如博客、网站、自媒体等，就相当于拥有一张网络名片，一个特别的个人身份。这些数字资产将是互联网世界里个人品牌的起点。 很多人犹豫要不要在网上分享自己的思考、学识、经历，总觉得自己并不是大牛，好像没资格分享内容。但这种“资格”又是谁定义的呢？ 对于普通人来说，大牛的分享有时候反而作用很有限，因为他离我们的生活太远了，那些建议和思考很可能参考性不是很大。对大部分人来说更实用的建议来自那些初始条件差不多但事业发展或人生步伐先于我们几步的人。同样是教一道初一数学题，大学毕业生往往不如初二初三学生的教学效果更好。 所以确实任何人都有资格在网上分享内容。当然，从读者和观众的角度考虑，这些内容最好不是自说自话或者单纯展示自己生活优越性的，而是能给人带来价值的。 当你在网上免费分享一些原创内容时，看似像是在没有报酬的情况下免费劳动了，但实际上这个行为长期下来等于在你和读者之间建立了某种信任关系，同时你是这段关系中的付出者，通过你的内容接收到价值的人有一部分在将来会愿意以其他形式回馈你的付出。 此外，在网上持续分享某个主题的原创内容，时间久了很可能就会吸引到一小批和你一样关注这个主题的人——这也许会改变你的人生。 《Keep Going》by Austin Kleon 任何把创作当作长期追求的人都要面对一个现实的问题：创作存在干涸期。有时这个干涸期可以长达数月甚至更久。如何安全度过创作干涸期是每个创作者都需要根据自己情况，量身定做出一套应对策略。这本书写的是作者保持长期创造力的十条建议。比如，维持稳定日常routine，比起名词名号（“作家”、“艺术家”），把注意力放在动词和过程本身上（“写写画画”）。 你可以把Austin Kleon的这三本书当作一个灵感供应台。这三本书不厚，设计感强，文字不多，充斥着插图和引用，放在书桌上，工作中感到疲劳或卡住时就可以随手拿起一本来翻一翻，可以达到高效休息的目的。 从脑科学看创造力：《The Art of Impossible》by Steven Kotler 这本书是几个月前看的，但书里有一章关于创造力的脑科学研究总结，归在这个专题下再合适不过了。同时也是一个可以满足更理性硬核读者需求的视角。 什么是创造力 当我们谈「创造性」时，准确地说这是一种可以产生有独创性且有价值想法的过程。 从脑科学角度来看，创造力是由大脑的注意网络、默认网络和突显网络三者共同调节而产生的。普通状况下，注意网络和默认网络不会同时运转——人要么注意力集中（注意网络），要么注意力分散（默认网络）。但对创造力强的人来说，他们的大脑中，注意网络和默认网络可以同时保持活跃，他们能以比常人更加自如地在两者之间切换。这种在默认网络和注意网络之间快速切换的能力，让人脑既可以发散出很多想法（类似白日梦状态），又能注意到那些想法中少数有价值的几个。这种切换和选择性注意的能力是由突显网络神经机制进行调节的。突显网络会抑制大脑对人体内体外熟悉事物的反应，而突显对陌生事物的反应。 因此，提高创造力实际上是调节改进大脑注意网络、默认网络和突显网络的相互合作的过程。 如何hack创造力 根据大脑神经机制，作者总结了7项提高创造力的科学策略： 善待你的大脑前扣带皮层（ACC） 科学家发现ACC可以让大脑从默认网络切换到注意网络，同时ACC影响突显网络和注意网络的工作机制。这意味着ACC和产生洞见（aha moments）关系非常密切。那如何让ACC发挥其作用呢？保持好心情，写感恩日记，正念练习，锻炼身体，保持良好睡眠。 开阔眼界 我们所处的环境会反过来影响我们的思维方式。身处开阔舒展的空间中，不仅有利于保持好心情，还可以让大脑的注意力从细节转移到整体上，有利于刺激大脑产生创造性的想法。长时间处于窄小逼仄空间则会让人思维上也“只见树木，不见森林”，不易产生创造力。 远离压力的独处时光 大脑默认网络会在感到无聊和做白日梦时活跃，这时潜意识可以帮我们找到平时注意不到的不同想法之间的连接（远距联想 remote associations）。没有外界压力的这段时间让我们可以充满耐心地从事创作。 突破大脑的常规模式识别 大脑非常擅长模式识别，即寻找熟悉的事物和连接，但创造力往往需要打破这种模式识别倾向，建立不常见事物或想法之间的远距联想。有利于大脑突破常规模式识别的行为包括：以游戏心态做一件事；从不熟悉的事物开始一件事。 带着限制条件思考 有句俗语是“打破常规思考（think outside the box）”，但实际上完全无限制条件并不利于激发创造力。合适的限制条件可以驱动创造力。 更多输入 建立远距联想或任何联想的前提是大脑里存在足够多的能产生联想的想法，也就是大脑需要输入。当输入内容在个人专业领域之外或是交叉领域时，会更有利于建立远距联想。过度专才化会使人无力产生创意。 麦盖佛创意问题解决法（the MacGyver method） 第一步，在纸上写下自己想要解决的问题，越细节越好；第二步，用几个小时到半天的时间来“孵化”前面写下的问题，这期间可以做一些不需要专注力的重复性活动，比如散步、轻家务、轻度运动、睡觉，这个过程大脑潜意识会忙着帮我们解题；第三步，拿出纸笔，开始自由书写，比如“我想要写一篇新文章，但我不知道该写什么主题”，接着想到什么就写么，然后很神奇地，这时候潜意识往往就会给我们一些答案。 以上7项提高创造力的策略更偏向于短期效果，那如何发展长期创造力呢？毕竟很多职业需要源源不断的创造力才能持续多年。这本书里也有一节专门总结提高长期创造力的策略。这里因为篇幅就不细写了，感兴趣的请阅读原书。 " }, { "title": "《Good Economics for Hard Times》读书笔记", "url": "/sinantang.github.io/pr-7/posts/good-economics/", "categories": "Reading Notes", "tags": "reading, books", "date": "2021-10-17 00:00:00 +0200", "content": "这是一篇我读《Good Economics for Hard Times》过程中写下的读书笔记片段的集合。 作者Banerjee和Duflo是MIT的经济学教授，共同获得过诺贝尔经济学奖。两人于2011年出版过另一本也非常值得一读的《贫穷经济学》。 这本2019年出版的《艰困时代的经济学思考》讨论了多个发展经济学议题，包括移民/难民、国际贸易、经济增长停滞、收入不平等、气候变化、政府公信力、失业问题等。通过阅读这本书可以了解经济学家在这些热点议题上的当前观点和数据。与其听媒体或自媒体借这些话题助推焦虑情绪和极端观点，或听美国政客煽动性的口号式言论，不如读一读来自社会实验的真实数据和经济学家的分析思路。 本书写得也非常好，语言朴素易懂，态度真诚，尽量做到了客观，处处显露出人文关怀。非常推荐！ 关于移民 很多数据证明，经济发达地区本地人害怕担心的移民潮发生的可能性其实很小；就算发生了，对本地就业、经济的影响其实是利大于弊。 一个很有意思的数据：希腊2010-15年间由于国家破产，带来了经济最差的五年，失业率一度接近30%。但这五年间选择离开希腊的人却还不到总人口的3%。 要知道从希腊移居到欧盟其他国家比国内跨省移居还容易！一是因为欧洲真的很小，雅典到德国飞3小时就到了；二是欧盟内无边境控制迁徙自由，说走就走完全没问题，去另一个国家找工作上学没有任何签证、户口限制。 别说跨国了，就算在离家不远的另一个地方有更好的工作机会，能为赚更多钱而动身的人也是人群中的少数。 在孟加拉印度一些贫困农村乡下地区，碰上年景不好收成不足，一家人就不得不饿肚子。明知动身去城里打工就可以马上带来更多收入，但还是有很多人宁愿饿着肚子也不愿动身去城里打工。 那些愿意为了更好的经济条件和社会资源而主动长途迁徙移民的人，必然是人群中的少数，属于achiever了。 当有大批人离开家乡时，往往不是出于经济原因，而是家园已经变得完全无法居住，只能为逃命离开，比如由于战乱或自然灾害。近几年的战争难民主要来自叙利亚阿富汗等国，这些国家在世界范围比较来看经济绝对不是最差的，算是中等。那些比它们还穷得多的（但生活较为平和的）国家里，国民移民离开的比例和意愿都相较低得多。 保证有一定数量的民众迁徙对于政府来说反而是件需要鼓励的事，因为劳动力的迁徙和集中对经济发展的好处很大，而绝大部分人是不愿意离家的。所以有些国家为了促进迁徙而动用计划经济手段，中国也是其中之一。政府曾通过限制压低农产品价格，使小户人家务农的收益非常低，从而让农民入城打工，建设城市经济。 供求关系和工资水平 本书第二章有一段讨论为什么供求关系不像很多人以为的那样会直接影响劳动力价格。 大众观点一般认为，劳动力市场上，当劳动力供应相对需求增加时，平分到每个劳动力上的报酬就会降低。这也是很多排斥外来移民来“抢工作”的本地人的观点。但事实并不一定会这样发生。根本原因在于，雇主和雇员在一段雇佣关系中的「风险不对称」。 一个不合格员工会给受雇企业带来巨大的潜在损失，比如搞砸重要的客户关系，损害昂贵的企业资产，行为不端使企业名誉受损。但多付还是少付一点工资，这点摆在桌面上的支出对企业来说，比起一个员工可能带来的潜在损失倒是没那么重要。 事实上，企业对不合格员工在合法范围内基本上没有开除以外的惩戒措施。 当工资很低时，开除员工都无法给他带来太大震慑，人家耸耸肩就去找下一份工作了。但高工资高福利就不一样了，这时的开除行为才能让员工感到痛苦，拿开除作为让员工打起精神应对工作的措施这才有效。 所以当供求变化时，雇主并不一定会因为劳动力充裕而趁机压低工资。企业在意的不是节省一点点工资，而是尽量减轻潜在损失。 关于极端化 极端化确实存在，并且在增长。 虽然人性决定了“非黑即白”地看待事物是天性，且是最轻松的思维选项，但思想上更走极端化的人的比例确实也在增长。 微博上很多人会觉得中文互联网越来越极端化，然而这个现象也不止局限于某个国家。 《Good economics for hard times》里列了几个美国民意也越来越两极化的数据： 81%认同某一政党的人，同时对另一个政党持否定负面看法。 61%的民主党支持者认为共和党支持者是种族歧视者、性别歧视者或固守偏见的人。 54%的共和党支持者认为民主党人居心不良。 1/3的美国人会对亲人与另一党派支持者结婚而感到失望。 中间商与贸易信任 本书讲贸易的一章，其中关于中间商在贸易中重要作用的内容刷新了我对中间商的认知。 我以前觉得，中间商不就是不直接事生产，通过提高供与求之间商品流通效率来赚钱的公司么。对于终端消费者来说，多个中间商的存在提高了商品价格。有些公司、产品还会以“厂家直销”，所以无中间层层“盘剥”有价格优势，来作为商品卖点。 但这一章作者就讲了，对于跨国贸易来讲，中间商的作用究竟有多关键。 中间商在贸易中不只是连接买家和卖家，更是买卖双方降低信用成本的主要桥梁。 对于买家（通常是富裕国家的公司）来说，与某个没听过名字的卖家（通常是穷国的公司）建立进口贸易关系的风险很大。短期利润并不是买家最大的考虑，更重要的是合作方是否靠谱：商品质量能否保证，商品运输是否准时，商品供应是否稳定。这些都是会直接影响到买家公司商誉的重要因素。 而商品的制造成本能降得多低，倒是没那么重要。 一是因为大多商品的制造成本往往只是零售价的10-15%，就算换一个制造成本低50%的供应商，最终这个影响最多只能让零售价降低7.5%。这个幅度对日用品来说不算什么。 二是因为富裕国家的消费者对价格不敏感，而对质量和服务更敏感。比起买最便宜的，相当多人愿意多付钱，只为质量保证和退换方便。 所以，大家普遍认为的来自发展中国家卖家的低劳动成本优势在现实中其实很有限。 另一方面，跨国贸易对穷国卖家的风险也不小。卖家很多是小本买卖，承受不了多次因商品验收不合格而收不到尾款的经济成本。跨着国，追讨款项的可能性也很小。 所以这样的跨国贸易需要强大的中间商作双向的信用保证，在中间做大量沟通协调、双向承担风险的工作。 这也是为什么就算川普打贸易战，中国作为第一世界制造工厂的地位在中短期内也很难被撼动的原因之一。因为中国的大量供应商已经在全球范围内广泛建立了物美价廉稳定靠谱的声誉。对于外国的进口公司来说，除非中国制造的成本大幅提高，否则它们没有理由放弃长久以来的合作关系，而转向其他也许报价更低但信用成本极高的外国卖家。 关于统计歧视 讲歧视的一章里提到美国一些州最近几年一场叫“Ban the Box”的运动，指的是限制雇主在招聘时询问求职者犯罪前科权利的政策。以前雇主有权询问求职者是否有前科，但在实施BTB政策的地区，雇主不能问这个问题。这个政策本意是想减轻企业在招聘过程中对年轻黑人男性的歧视，因为年轻黑人男性的犯罪率远高于白人男性。 有经济学家在实施这个政策的地区做了实施前后的对照实验，结果发现，这个政策反而让黑人求职者更受歧视了…… 因为HR不能通过直接询问犯罪记录来筛人，所以选择了筛掉所有看起来像来自黑人的简历（主要靠名字推断，因为种族、照片什么的本来也不能放在简历上）。因为黑人的群体犯罪率高，所以在无法准确得知求职者是否有前科的信息时，HR不得不靠统计歧视（statistical discrimination），把对群体的统计结果推广到个体上。 一个感想：参与公共事务决策的人若不懂经济学和心理学，就很可能把事情越搞越糟。 关于偏好 书里用很多社会实验和事件说明，我们对别人的强烈好恶，并不一定经过认真考虑，常常源自非常随机的因素。当那些随机因素发生变化时，很可能我们对别人的印象会跟着完全反转。 一个例子是1994年发生在卢旺达的大屠杀。 比利时殖民者到达卢旺达后，为了更好控制殖民地，于是硬生生把原本差不多同一种族的当地人分成社会地位相异的两个种族：高等的图西族和低等的胡图族。 在后殖民时代，胡图族对图西族进行报复，同时图西族也对胡图族进行种族清洗。两族对立的紧张局势直接导致了1994年的卢旺达大屠杀事件，100天内有近千万人因此死亡。 图西族和胡图族的相互仇视，并没什么逻辑和道理可言。本就是同种族的人，不存在外貌上、智力上或体能上的差异。两族对立完全只是因为当初殖民者出于私利把他们随机分成两个部落而已。 这让我想起来之前写的一条微博，关于「随机发生」的先入为主的第一印象是如何大大影响（基本上是决定了）我们对一件事一个人的看法。 人在天性上不是理性的生物，古典经济学的理性人假设肯定是不切实际的。大脑理性的部分是新近发展出来的，决定我们情感和行为的原动力还来自底层的鳄鱼脑。 打破网络回音壁 书里讲了一个很有意思的实验，证明了也许有办法打破网络世界里的回音壁效应。 这个实验大体验证了当给新闻App用户评估、选择信息来源的机会时，原先观点更极端分化的用户会慢慢地向中间靠拢。当给读者机会了解一条新闻背后媒体的立场倾斜程度时，就是给了读者修正自己立场的机会。 这也是为什么推荐算法被经济学家批评的原因：推荐算法不断把随机来源的信息流推给用户，使得用户没机会判断信息来源和来源的立场，所以也无法根据历史数据来进行评估和自我修正。 这个研究确实很有意思，不由地引发了我的很多想法。比如，这会不会成为未来政府对App推荐算法的管理制约思路之一呢？ 收入不平等与金融业 讲收入不平等的一章里提出一个理论说，英美两国自1980s以来民众收入越来越不平等的一部分原因（注意只是部分原因）在于金融业。 英美是金融业最发达的两大国家，它们发达的部分在于投资银行和各种金融衍生品。相比之下，其他发达国家的金融业更加传统，主要是普通银行和保险业。 英美金融业的问题在于，其中从业人员收入非常高却不是因为工作技能或作出的贡献高于社会中其他人。基金经理的收入相当于租金，来自雷打不动的管理费，而不是传统的劳动收入。早就有统计显示，主动管理的基金并不比被动型基金（如指数基金）收益更高，有时甚至还不如被动型基金。这说明了基金经理并不是一个靠才能赚钱的职业。 但这样的高收入行业对年轻人的吸引力很大。 五十年前，哈佛大学毕业生中只有6%选择进入金融业；但最近的数据是将近30%的哈佛毕业生都进了金融业。 全社会享受最优质教育资源的精英年轻人中，有近1/3都因为高收入而选择金融这个并不主动创造多少社会价值的行业，这是对社会资源的极大浪费。除了不主动创造价值，有时还会给社会带来很大灾难，比如08金融危机，是拿着超高收入却才不配位的金融从业者把行业风险转移给了全社会。 因为美国金融业越来越发达，金融业从业人员的收入越来越高，包括CEO们。其他非金融行业的CEO因此也要求越来越高的收入。CEO的收入一般是由董事会商议决定的，这个决定受市场上最高收入水平（也就是金融业CEO）的影响。再加上CEO的收入越来越和公司股价挂钩，所以CEO的收入就自然而然地脱离了公司内部的工资体系。 以前当CEO也受公司内部工资系统制约时，提高CEO的收入意味着调整整个工资系统，也就是最低级别的员工也可能因此而涨工资。但CEO收入与其余员工的工资水平脱钩之后，提高CEO工资就不再会影响其余员工的待遇，反而对公司来说，尽量控制对其他员工的工资支出更有利于提高利润率和股价。 所以收入水平就这样变得越来越不平等。越高收入的人的收入水平越来越高，越低收入的人的收入水平不太动甚至还降低了。这就是美国1980s以来社会面临的收入不平等问题的状况。 （这里有个数据：过去几十年来，美国工资在100k-200k之间的人收入涨幅仅略高于平均值，工资超过500k的人却看到他们的收入发生了爆炸式增长。低于100k的不一定有增长。蓝领工人相对工资则是降低了。） 政府公信力、政府能力与收税难度 书里讨论的主要是美国政府。 美国政府以及政治家在美国民众心中普遍没有公信度这个事实大家都知道。很多人不觉得这是个问题——政府的权力就是要防着啊；世界上还有不脏的政治家吗；比起穷人普通人，政府作出的决定更被精英和大企业所影响。很多人都怀有前面这些想法。 但是这些把政府当作民众敌人的想法会带来很多负面影响。 一是，政府很难收上来税。加税成了一件极不受欢迎且几乎不可能的事。然而任何公共事业都必须靠税收来支持。越是收入低的人就越需要公共支出的帮助，但在美国这部分人反而非常反对政府扩大税收。 从数据上来说，美国政府税收额占GDP的比例在发达国家中排倒数。因为没钱，所以政府无法支持很多公共事业，比如全民医保、基建等等。 第二，公信力低形象负面的政府难以吸引有才能的年轻人加入。在美国最有才能和抱负的年轻人基本不会先考虑去当公务员。结果就是政府里大量雇员都是业务水平非常一般的人，这就反过来影响了政府的工作能力和决策水平。这是个恶性循环：大家对政府和政治家没啥高期待，有能力的人不会加入，所以接着又验证了对政府无能的看法，因此政府无力征更多税，因为大家不信任政府能够有效利用税收做出利于社会的决定…… 其实2020年美国总统竞选是两个70多岁的老头在争，这一点也从侧面说明了美国政府的人才储备不足吧…… 第三，公信力不足让政府展开工作的阻力变得很大。因为不信任，所以对政府工作设置了大量条条框框的限制，导致事情不总能按最有效的路径去完成，最后导致了低效和资源浪费。 举个例子，美国政府开发软件系统的合同，那些知名大科技公司一般不太会去竞标，因为政府合同的条条框框太多（几万页的规章制度细则），比起软件最终的质量和可用性，更重要的是不要不小心违反任何一条细则。 如何应对未来的失业潮 最后一章讲的是如何为陷入经济困境的人群设计有效的社会政策。 其中一个重要方面是，所有未来可能被AI和机器人替代的工作都会给现有从业者带来风险，政府将来如何帮助这些或许为数众多的失业者，是个值得提前思考讨论的问题。 这并不仅是给失业者统一安排个工作或发点失业金这么简单。在发生巨变的经济结构下，如何给予处于不同地理位置的数量巨大的人群适宜帮助，帮他们匹配到既有尊严又有合理收入的有意义工作——社会将要面对的其实是这个问题。当社会发展到高度自动化的先进阶段时，人类的精神需求也是水涨船高，大部分人不会满足于一个填饱肚子的差事，而需要有尊严有意义有公平收入的职业。 书里提出一个相当实际的提议，即政府可以通过提高划给劳动力密集型公共产业的预算，来间接创造对社会有益的就业。这些产业包括教育、幼儿托管和养老等。 现在人工智能算法是以海量数据训练一个对具体问题的解决方案，比如下围棋，识别图像，检测关键词，翻译文本。因此那些本质上主要依靠有限特定技术的工作岗位，都存在大规模失业风险。 但同时随着自动化的发展，人类相比机器人和算法的相对优势，也会变得更加难以取代。这些相对优势包括：灵活度、同理心和社交能力。 教育、幼儿托管和养老都是非常需要人的灵活度、同理心和社交能力，所以很难被机器人替代的产业。不仅如此，这些也是无法规模化（think about things that don’t scale），能够吸收大量从业人员的行业。而且当经济越来越发达，社会越来越文明之时，这些产业的重要性也会越来越凸显出来。即使我们将来进入了元宇宙阶段，教育、育儿和养老也是人类社会不可移除的公共事业。 对教育和幼儿托管上的公共投入，也是改善社会不平等（包括贫富差距和性别不平等）的重要手段。很多对照试验表明，对学龄前儿童的教育干预，具有提高一个人一生生活质量的积极作用。这些教育干预包括在有资质幼教陪伴下的全天幼儿托管，寓教于乐的活动，以及家访。（家访是指社工和教育工作者上门，向家长普及科学的家庭教育方法，比如如何互动玩耍对孩子的情感智力发育最有益这种细节） 全民基本收入 作者也讨论了UBI（universal basic income 全民基本收入）这个大部分人第一反应都声嘶力竭反对的政策思路。 UBI是指给所有国民都发一份基本工资，能保证最低限度的吃喝住开销，以取代现有所有福利政策（以及复杂的福利审核程序）的一个政策构想。 反对的人通常认为，如果给所有人都发基本工资，那不就没人工作了吗，那人类社会还能运转下去吗…… 很多经济学家却不是这么认为的。我们确实也有局部地区进行UBI实验的数据，这些数据显示，其实绝大部分收到基本工资的人并不会停止工作，连选择减少工作时间的人也不是很多。其中很大的原因在于，工作带来的不仅仅是一份收入，同时也是一个人与社会产生联系，嵌入人际关系网，获得成就感和社会身份的方式。 人类是有精神需求的，绝大部分人都想要以有意义、充实的方式度过时间。自己手头的工作也许不是最理想的打发时间方式，但总好过什么也不做或不被任何人需要地待着…… " }, { "title": "写给19岁的自己的9条忠告", "url": "/sinantang.github.io/pr-7/posts/life-lessons/", "categories": "Thinking Tools", "tags": "philosophy, books, meditation", "date": "2021-09-13 00:00:00 +0200", "content": "这是一篇高考十周年纪念文。用以记录结束高考之后的这十年间，我学到的也许是最重要的几条人生经验。 Know your game. 每隔几个月，都花点时间想一想，我正在做的这件事的规则是什么，我想要赢的最佳策略是什么，这件事值得我去做吗，我还有其他选项吗。 在高考结束之前，生活是简单的，规则是明确的：分数最重要，只要能拿到高分就能解决目前人生最重要的问题（上大学）。我们甚至不需要自己去想这个问题，周围所有大人都会把这套规则反复灌输给你。 但高考结束后，从高中升入大学，看似只是从一所学校换到另一所，也许同时从一个城市换到另一个。所有大一新生都能模模糊糊意识到这是个人生转折点，但绝大多数都没意识到，此刻我们面前的整套游戏规则已发生巨变。分数、成绩、老师家长的赞许，那些高考前生活中最重要的目标，已不再适用于高考后的全新人生。此外，小时候被灌输的“好”与“坏”的道德标准，有一部分也已经过时。逃课不一定是什么坏事，花很多时间写作业也许不是好事，对老师的观点抱有异议也不是坏事。 高考前与高考后人生的最大区别是什么呢？ 我觉得，区别在于高考前的人生是一个高度同质化竞争的封闭系统。不论是谁，只要决定参加高考，那需要掌握的知识、参加的测试都是一样的；此时竞争的难度很大，只要打败更多竞争对手，高考中的排名就会越高，高考的结果也就越成功。 而高考后的人生则是个开放系统。开放系统意味着一个人不需要和别人竞争同一样东西，不需要和别人遵从同一套规则。在开放系统里一味地照葫芦画瓢，只会给自己增加不必要的竞争难度，最后达到的目标也许还不是自己真正想要的。此时，比起盲目地冲入周围大多数人都看得见的白热化赛道，不如开始认真思考自己独特的不公平优势（unfair advantage，比如环境、家境、头脑、特长等）是什么。摸索到一条真正适合自己的阻力相对小的路径不容易，但肯定会比持续通过同质化竞争来获取虚假人生成就感的回报要丰厚得多。 这一条特别写给那些像我一样，带着“好学生”的标签长大，但却在高考后很长一段时间内都无法对旧游戏规则撒手的人。我非常理解那种感觉，也希望更多年轻人可以早一点明白这个道理。 把社交媒体当作输出而非输入的平台。 这条建议是关于早点开始在网络上建立个人品牌，积累虚拟资产的吗？是，也不是。在社交媒体上做个输出者的意义其实大大超越了那些功利的好处。 大多数人在社交平台上都是贡献流量和数据，被动接收信息的角色。社交媒体对于这样被动接收信息的人来说并不总是个好消遣。这里不是指浪费时间精力，而是说，被动接收信息者时间常了很可能会受到偏激、不理性、有害信息的毒害而不自知。社交媒体平台流量分发的规律决定了越偏激极端的信息就越容易得到眼球和转发。 如果你在社交媒体上是个持续输出的人，无所谓什么定位或有多少阅读量，时间久了你会对自媒体和社交平台这些相对新生态的事物产生更多亲身体会。例如，你就会慢慢感知到，什么样的内容更能引来转发评论或者攻击，被突然爆热门的内容引来的流量冲刷是种什么感觉。知道这些后对靠做自媒体变现自然有直接好处，但我觉得更重要的是，你就可以知道当看到一条全新信息时，该以什么方式来解读它：撰写那条信息的作者是不是想红，这一点其实就一望而知了；信息夸张、虚假的程度有多大，也会多少有个判断；是不是在蹭热度，贩卖焦虑，挑拨离间，故意搞极端言论，其实也很容易看出来。这个时候，你才会明白，为什么在社交媒体上做一个单纯的信息接收者很危险——是真的危险，你贡献的不只是数据和流量，同时还可能被污染了大脑。 正在看这篇文章的你，作为一个受教育程度高、相对理性的人，也许觉得自己肯定不会中招，自己应该能够做出正确判断。但人总有疲惫、低落、焦虑的时候，这时还特别容易被偏激有害的信息影响，引发难以快速跳出的负面循环，造成更长期的负面影响也未尝可知。 那完全拒绝社交媒体呢？也不是不可能，但我觉得不太现实。短期内我看不到社交网络消失的可能性。那开始学着以对自己有益（或至少无害）的方式使用社交网络，长期看来还是很有意义的。毕竟，社交网络也不全是坏处，至少它大大增加了我们找到有趣的人和资讯的可能性。尤其若你是个（或以后想成为）创作者或创业者，那社交网络无疑是个有潜力极大扩张个人影响力的神奇工具。 看非虚构课外书。 不把社交媒体当作输入源，精神食粮当然要从书中找。 我开始把非虚构书籍当作读书主粮的时间较晚，大概是2016年左右。几年下来，虽阅读速度一般，但也颇看了一些好书，我从中的获益完全不是所投入时间（更别提书价）能衡量的。可以这么说，大量涉猎优质非虚构书是我主动升级大脑认知方式的开端。 不知道从哪里开始的读者可以参考下面的类别，和我列出来的几本对我影响较大的书（没找到中译本的我就写了英文书名）。闲着没事就多看好书，没空也要挤时间看，这将是生活中回报率最高的活动之一。 思维： 《超越感觉：批判性思考指南》by 文森特•鲁吉罗 《把时间当作朋友》by 李笑来 脑科学： 《The Art of Impossible》by Steven Kotler 《A Thousand Brains》by Jeff Hawkins 心理学： 《Mindset》by Carol Dweck 经济： 《贫穷的本质》by 阿比吉特•班纳吉 &amp; 埃斯特•迪弗洛 理财： 《富爸爸穷爸爸》by 罗伯特·清崎 &amp; 莎朗·L·莱希特 商业： 《每周工作四小时》by 蒂莫西·费里斯 《Little Black Stretchy Pants: the Story of Lululemon》by Chip WIlson 历史/政治/文化： 《论中国》by 基辛格 《枪炮、病菌与钢铁》by 贾雷德·戴蒙德 社交/职场： 《如何结交比你更优秀的人》by 康妮 传记： 《别闹了，费曼先生！》by 费曼 开始理财投资。 理财趁年轻。 哪怕没有收入，也可以从生活费中省出一点零花钱来练习理财投资。此时本金少，可能产生的损失也小；年轻人大多没有沉重的家庭责任，就算有损失也不会对生活造成太大负面影响。此外，复利效应决定了对大多数人来说，理财投资的总时长比开始的本金重要地多。活得越久，钱在市场里待得时间越长，那收益就越高。 同时开始阅读一些非常基础且积极正面的入门理财书，例如《富爸爸穷爸爸》、《小狗钱钱》。 理财投资作为一种门槛低的被动收入来源，能让你体会到一点对未来的掌控感。这对容易焦虑的年轻人来说很有价值。 理财投资可以让任何一个人不必囿于某个具体工作、老板、公司甚至地理位置，开发多样化收入源，降低未来的风险。通过理财投资，「时间」从一个不断带来未知和熵增的“敌人”角色，变成了可以帮助我们达到财务目标的朋友。 社交是给别人提供价值。 作为一个天性内向的人，以前的我很排斥与熟人、陌生人社交；有时在路上远远看到一个熟人，还会换个方向走开以免打照面……是的，曾经的我是个典型社恐患者。 然而一直以来我也知道 networking（搞关系）的重要性，所以以前常会以挑剔、排斥的心态去社交。比如会根据对利益的估算，而决定要不要参加一个活动，或者见某几个人。这种心态也进一步加重了我对社交的反感，因为充满目的性去做一件事就不得不把自己当作工具人，这样毫无主观能动性的态度不太会带来好结果。 但是开始工作后，我渐渐地完全转变了以前对社交的认识。 一是，承认所有人都需要社交。人是社会动物。一天中与别人社交的质量其实非常影响那一天的生活质量，这从侧面证明了社交对人的重要性。社交是我们从婴儿时期就开始使用的学习方式，我们在社交中学习语言、文化、常识，以及自我认知。 二是，改变对社交的心态。不要总怀着“这个人以后也许对我有用”的想法去接近别人，而是转而去想“我能给别人提供什么价值”，以这样真诚开放的心态去与人交流接触。这种转变会彻底改变你对社交的体验。 锻炼身体，不必减肥。 不论身高体重外貌性别，健康的身体对任何人来说都是个大大的外形加分项。 规律锻炼已被无数科学研究证明，不仅有益于身体健康，而且对心理、大脑健康也大有裨益。 本来写到这儿已经足够，但我还是想对年轻女生多写一句：不要浪费时间精力在过度减肥上！停止将自己的身体与明星、网红或网上不知道被PS过多少遍的照片作比较。有空闲时间不如多追真正的运动博主，通过规律运动来慢慢矫正东亚人追求“白幼瘦”的不健康审美观。既然已经写到这儿了，再顺便加一句吧：化妆护肤同理。女性在职场上本就处于劣势，再把注意力用在没啥经济回报的化妆护肤这类事儿上，可想而知对事业发展积累资产就更不利了。 学习冥想，养成习惯。 长期冥想带给人的巨大益处很难向从没规律冥想过的人准确传递。我两三年前刚开始尝试冥想没多久时曾写过一篇文章《连续冥想28天》，可供参考。 神经科学层面上，已有很多研究说明长期冥想能够改变大脑，使大脑皮层增厚，提高大脑注意力等等。但作为一个已经冥想近三年的人，我想说，冥想的益处远不止给大脑带来的那些正面变化，或者说我们开始练习冥想的最大动机并不是为了“增强前额叶皮层厚度”——冥想，是为了成为一个更好的人。至少，对我来说，冥想的习惯让我成为一个更好的人。 我一直在用 Sam Harris 的「Waking Up」App 进行冥想练习。客观地讲，如果不是通过这个 App 上的内容，冥想对我的影响也许不会这么深刻。 勇于尝试自己感兴趣的事。 这条我很犹豫要不要放上来，因为我一直觉得这是句正确的废话……虽然无数人这么说，但极少有人会同时提供对问题的分析和方法论。一句鸡汤其实对读者的价值不大。 但我最后还是选择放上来，因为我觉得这毕竟是个很好的提醒。不必把这句鸡汤看作“年轻时必须叛逆必须想做什么就去做”、“再不去就来不及”这类思路，而是把它当作一个长期的提醒。 人生是场长期游戏，现在不知道自己热爱什么不代表以后就发掘不了，现在没条件做的事不代表以后也没条件，现在机会不成熟不代表一辈子遇不到属于自己的机会——不要丢弃年轻时那种看向未来充满希望的感觉。 Just have fun! 咱们东亚人擅长内卷，导致大家容易焦虑。 我就是个天性容易焦虑紧张的人，经常会在一件事发生之前很焦虑，但过后又会觉得很没必要。 大幅改变焦虑倾向不太可能，但学习一些控制负面情绪的方法依然很有好处。 比如，学着不把所有事情都看得那么严肃，学着用玩笑来化解问题和困境。这种生活态度的意义不仅可以让日常心情更轻松愉快让血压更低，更重要的是可以培养一个人的韧性。 当你以苦大仇深的态度去做一件事，如果失败了，那个打击会变得很大很大（“我都这么努力这么拼了，为什么还是不行”——悲剧主角即视感）。很多人会因为这种打击而放弃继续尝试，变得消沉或愤世嫉俗。但作为想要做点事的人来说呢，我们更需要“想要赢，也输得起”这种有韧性的精神。我们需要把人生当作一场长期游戏，这次闯关不行，下次还可以再来，每一次尝试都是在增加经验值和技能集。 我知道这么说说对于大部分人来说实践起来还是很难，所以一个更实际的建议就是，看看你周围有没有那种总是很乐观放松幽默但并不耽误做正事的人，找到后就去和他们做朋友！观察学习别人是如何以与自己不同的视角来看待同一件事的。 " }, { "title": "极简反消费主义的消费原则", "url": "/sinantang.github.io/pr-7/posts/spending/", "categories": "Thinking Tools", "tags": "money", "date": "2021-09-07 00:00:00 +0200", "content": "就两条—— Spend money where you spend time. 在你经常用的物品上花钱更值得。 比如床垫、枕头、日常穿的鞋、手机、电脑等。即使单价高，但长期看来，它们单位使用时间的花费其实很低。 以单位使用时间的成本计算，3000欧的床垫明显比3000欧的包包更值得买。 Spend money where you want to spend time. 在你想要花更多时间使用的物品上花钱。 花越多的钱购买超过平均品质的物品，就会越让人想花时间在那样物品上。 沙发太舒适了，会让人不由自主地花更多时间躺沙发；车太豪了，会让人想多花时间开车养车炫耀；吃得太高级了，往往得腾出时间穿上好衣服专门去吃，同时咔咔拍上几十张照片。 所以对于那些你不想花太多时间在上面的物品，买个来自值得信赖的大品牌的大众产品线的就已足够。 对于我来说，就是不花过多钱在厨具、家居软装、衣服上，因为我不想花太多时间在做饭、清洁、装饰，挑来挑去选衣服上。 相对地，对于可能提高学习、工作效果效率的商品和服务则应该多花钱，因为我想把更多的时间花在学习和工作上。 " }, { "title": "读书笔记《A Thousand Brains》by Jeff Hawkins", "url": "/sinantang.github.io/pr-7/posts/thousand-brains/", "categories": "Reading Notes", "tags": "reading, books", "date": "2021-08-05 00:00:00 +0200", "content": "这本书太惊艳，讲科研的书能如此引人入胜激动人心，我可能还是第一次遇到。 看了作者Jeff Hawkins的自述经历，真乃牛人也。他是那种我想象中的科学家，一个有强烈的好奇心和热忱，可以超越既有规则，创造新游戏的人。 Jeff本科学的EE。但后来某个时刻读到一篇跨时代的大脑皮层论文，一下子被那个理论吸引，因此对大脑皮层理论研究产生极大兴趣，后来去伯克利读博。 在博士开题论文里，Jeff叙述了自己的科研想法。几位教授对此赞许有加，但拒绝了这个课题……因为博士生是要给导师干活的，导师要靠能做出成果的课题来拿科研基金和教职。学术界研究的问题都非常非常小而具体，极少有人有野心和才华像Jeff一样想去研究一个类似物种起源或牛顿力学那样宏观伟大的理论。像Jeff提出的当时很少有人在做的成果虚无缥缈的神经学纯理论研究，既难拿基金，又难找导师，也难毕业。 所以Jeff在伯克利的读博期间，有两年他是完全自己一人在图书馆度过，就一直不停地看相关的书和论文。 后来过了几年，没找到合适机会，他就自己创建了一个专门研究大脑皮层理论科研的科研初创公司。后来这个公司直接并入了伯克利的神经学系。Jeff吐槽说，他读博时伯克利的人都说研究纯理论没前途，若干年后大家又觉得有前途了…… 再后来Jeff又创立了更符合他科研目标的新科研小公司。这个公司创立后第五年才发表第一个科研成果，第二个成果则是在那之后的第六年。这本书就是关于从那以来，Jeff和同事对于大脑皮层理论神经学的最新研究成果的。 这本书分为三大章，分别为： 对人类大脑皮层工作模式的新理解； 现有人工智能的局限和为什么真正的人工智能并不会带来想象中的道德危机； 未来人类与机器可能的共存模式。 虽然是一本书，但三大章的内容跳跃还挺大的。个人认为第一章价值最大也最推荐阅读，第二章也算可以一读，但第三章完全跳过也没什么（除非你平时热衷于了解“硬科幻”内容）。 我说一下这本书（主要是第一章）对我来说最具启发的两点： 第一，这本书让我了解到一个优秀的科学家是如何工作的。 Jeff用了不少笔墨描述他研究脑神经理论的旅程，包括最初如何受到启发激励开始科研之路，他如何决定科研的方向，近十年如何做出几个关键的理论突破。细节上包括他在什么情境下找到研究突破的灵感，具体什么契机启发了他，以及他为什么对自己提出的理论假说充满自信。 我印象特别深刻的几个段落，是Jeff推理出皮柱层（cortical columns）使用reference frame来处理组织信息这个理论的时刻。Jeff当时在办公室等妻子来找他吃饭，手里拿着一个马克杯，感受着手指在杯子表面移动的触觉变化，思考着大脑皮层如何预测手指触觉。他意识到大脑肯定为杯子建立了一个相对人体位置的参考系，这个想法也和前人的假说也连接上了。 这些生动的细节让人立体地看到，一个理论科学家每天是如何工作的。科学家不仅仅是天天埋在书里或电脑前的脸谱化形象，也不总是人物传记里靠灵光乍现作出新发现的天才形象。 从Jeff的经历上我看到，除了智商，好奇心和品味对成为优秀科学家来说或许更加重要。做研究需要一定智力水平，但我现在觉得智力的重要性和门槛也许并没有普通人想象得那么高。但是好奇心作为一种原动力，却是优秀科研工作者所必需的。品味的高下则决定了研究方向的选择。有些方向越走越宽，有的越走越没前途…… 比如，在能力上我其实完全可以继续读博继续做语言学领域的研究，但我承认，我没有那份对语言学的强烈好奇心，我没有特别想要探索的具体问题和方向。我若是走语言学学术路，多半只能算搬砖，而无法做出特别有价值的研究。 第二，Jeff对大脑皮层工作模式理论的研究推理过程写得非常精彩。 Jeff沿袭学术导师Mountcastle的“大脑皮柱层存在通用算法”假说，提出皮柱层的通用算法具体是如何实现的。 作为一个脑科学业余爱好者，我没有判断该理论价值的资质，但我却能够感受到这个创新理论的伟大魅力：大脑皮层可能通过一个简洁通用算法， 而非分区的高度专门化算法，来实现学习能力极强的功能多样化的人类智能。尤其是当作者解释「thinking is a form of movement」时，我为这个理论感到震撼。因为科研理论而感受到直达心灵的震撼，对我来说可能还是头一回。 除了理论本身，Jeff将新神经学理论向非专业人士讲述的方式也很值得学习借鉴。 Jeff多次使用触摸马克杯和认路这样几乎所有人都熟悉的日常生活经验作为阐述皮柱层研究理论的基础，让大部分人都可以很快领会到文章论点。在这里《物种起源》也许不算特别合适的类比，但两者都是在实验数据不足的情况下向所有人提出全新理论的书。这个包装、传达新信息的过程读起来和理论本身一样启发人。 " }, { "title": "推荐不自信的人都去学唱歌", "url": "/sinantang.github.io/pr-7/posts/singing/", "categories": "Others", "tags": "Singing, philosophy", "date": "2021-07-15 00:00:00 +0200", "content": " 今天我上了人生第一堂唱歌课。 我是个毫无音乐天赋的人。 自从懂事后意识到了自己唱歌跑调，因此基本不怎么出入KTV更少在别人面前动嗓甚至哼歌。但在家时，偶尔兴致来了还是会跟着喜欢的华语歌曲唱几句，虽然唱得不悦耳，却依然是个能让我感觉良好并享受音乐的过程。 这就是音乐的魅力吧。欣赏音乐是件没有门槛的事。 那我为什么突然想正经学习唱歌呢？ 因为从前几年开始，我意识到，唱歌和跳舞都是对于人类来说最最自然的事之一。远古时期的人类就开始唱歌跳舞，即便这无助于直接提高人类的生存几率。这种本能的用自己身体来进行美和艺术的表达形式，在几乎所有民族中都广泛存在。 本能的，就是健康的，美的。作为一个不通音律且过去常年运动不足的电脑一族，我想要与这种人类本能的表达方式产生一点真正的连接。 从有想法到今天去上第一节课隔了些时日，也有被疫情耽搁的原因，这里就不表了。 即使中间不少波折，但今天的上课体验完全超越我的预期，让我很受震动。 我第一次发现，其实我是可以唱歌的！我唱歌并不一定会走调，也没有我以前认为的那么糟糕。 通过这堂唱歌课，我深刻地感受到了这个能唱歌的我和那个无法唱歌的我之间存在的两大障碍。 第一个障碍，是我与身体的连接太弱，我对身体感觉的探索太浅。 我的音量和气息偏弱，唱歌老师想让我找到大声的感觉，就让我回想生气时大喊大叫和大笑尖叫的感觉。我想了一下，发现自己好像从不大喊大叫，生气也只是生闷气而已，因此竭尽全力发出自己声音的经历对长大后的我来说竟是个真空。从小在人挤人的城市里长大，城市生活确实不太存在对尽情大喊大叫大笑高歌的包容。 所以我对用力发声的身体感受是陌生的。老师告诉我几个感受声音在身体内不同部位振动的技巧，以及用腹部肌肉控制气息长短的方法。我那样做了，确实接着就体验到以前不曾留意过的身体感受。 发出稳定坚实的声音，是身体不同部位同时配合的结果。如果对身体的反馈不敏感，就无法开启这个过程，也就无法唱好歌。 影响我唱歌的第二个障碍，则是头脑意识对身体能量自然流动的阻碍。 作为一个上班写码下班看书的人来说，我的头脑明显偏于理性，意识里的想法太多。人的大脑一天会产生无数个想法，那些想法中的很多来自父母、学校、社会的灌输或别人的言论，大部分想法出现得相对随机，也转瞬即逝，但我们却常常会很相信那些想法。是的，比起相信自己，我往往会去选择相信那些想法。 今天唱歌课的前半部分，老师带我做了唱音阶的基础练习。后半部分，则是跟着一首简单的歌，老师边弹琴，边一句句带着我唱。 当进行歌唱练习时，老师经常指出我在高音部分上不去。我意识到，这其实就是我唱歌走调的最主要表现啊，高音上不去。 接着，老师提醒我，我完全可以唱上去那个音，十分钟前的唱音阶练习已经证明了我有那个能力，现在没法每次做到，是因为不熟悉单独一两音出现在整首歌里的情况。 在练习高音的过程中，我同时意识到，自己以前唱歌高音总上不去，包括连与人说话时也有时会音量越来越低的原因—— 当唱歌中遇到一个高音时，因为这是个小小的挑战，那个瞬间我面前有两个选择，一是选择相信自己已然具备的能力，放松、投入地去尝试发出高音；二是选择相信头脑中出于恐惧而产生的种种想法。而我绝大多数时候，都在那个临界点仓皇选择了后者，小型恐惧的涌来，让我的呼吸变浅变急促，让我的声带发紧，那身体状况自然是无法发出理想的高音了。 这个解读让我感到有点好笑。其实我本具备发出那个高音的能力，却因为不能全然相信自己，而阻碍了身体去达到那个自然状态。最后结果真如自己事先所恐惧的那样。 是这样的时刻，让我反复体会到，相信自己在现实生活中确有如「信仰之跃 leap of faith」。在那一瞬间选择放弃徒劳地控制一切，放弃头脑对自我的束缚；最重要的，是选择全然地相信自己，相信自己已然具备那样的巨大潜能。放下头脑束缚后的自己，往往可以达到最佳状态。 就好像最美妙的性爱体验往往发生在忘记思考，just letting it go 之后。 回到唱歌。我为什么要给不自信的同学推荐学唱歌呢？ 唱歌是个对外界毫无倚赖的行为。你所能达到的歌唱水平，完完全全地来自你自己。你既是声音的发出器，也是声音的扩大器。在高度分工的现代社会里，这样能够确认个人完整性和自然存在的机会并不多得。 同时，唱歌是个若你不相信自己，就没法自如进行的活动。来自头脑中的任何一点自我怀疑和自我设限，若不被放下，就会很快打乱气息，打乱对身体感觉与能量的感知，从而达不到理想水平。 就写到这儿吧。在文末祝看到此文的你活得更加自然、本真！ " }, { "title": "The Power of Daily Journaling", "url": "/sinantang.github.io/pr-7/posts/journaling/", "categories": "Self improvement", "tags": "Journaling", "date": "2021-06-12 00:00:00 +0200", "content": "如何准确翻译英语语境中「journaling」一词我想了很久，也没想到特别合适的中文词汇。「Journaling」比日记多了结构，比手帐少了花里胡哨的排版装饰，比日程本又多了内容上的丰富性。也许「日志」（每日记录）算是个最接近的概括吧。 从几年前开始，我养成了写日志的习惯。刚开始没想太多，只是觉得这看上去很有意思。到现在，我写日志的结构和内容已经发生了很大变化，也体会到这个习惯带给我的奇妙改变。这使我非常想把这个简单但很有意义的习惯推荐给别人，于是就有了这篇文章。 每日记录这件事虽然最短只占一天中的五分钟，但其功能和好处却可以很丰富。对我来说，每天花在写日志的平均十分钟里，我打卡了计划、总结、记录和正念这四件事。 计划 日志对我来说首先充当了日程本的功能。我习惯把自己想做的事分解成一项项小任务，计划到每一天中去。 年末时定下的新年目标就是第二年的计划蓝图。我会通过月计划、周计划、日计划把年度计划具体分解落实。比如，最简单地，如果我希望一年可以读完至少30本书，那分解到每个月是2-3本，每周0.5-1本书，这些我都会写进日志里去。我觉得如果不这样具体拆分的话，很多美好的愿望只能停留在想法上，一是在忙碌的日常生活中不一定记得，二是就算记得也没有落实的计划和方法，三是确实有时可以靠运气实现目标，但靠好运实现目标的过程很难复制。人生很长，有一套可以提高实现目标概率的系统显然是更优路径。 除了承载年度目标的拆分落实外，生活中不能耽误的杂事我也会尽量写进日程本里，以提醒自己。比如，还信用卡账单，去银行办事，看医生等等。 这部分内容我是以待办清单（TODO list）的形式写在日志最开头。 写年/月/周/日计划除了大大提高完成计划的可能性外，也是我增加对生活可控性的方式之一。把注意力集中在自己可控、能让未来变好的具体任务上，是个降低日常焦虑感的良好方式。焦虑不仅是种折磨人的状态，同时大大增加了人做出不理性决定的概率，比如因为焦虑健康被骗买没用的保健品，因为焦虑育儿去付不靠谱课外班的钱，因为焦虑收入而盲目下场投资……所以很多人特别爱煽动焦虑情绪，这样他们才能赚到这部分钱。 总结 日志的第二个功能是总结。 每天的总结很简单，只要在晚上对着早上列下的待办清单过一遍即可。 此外我会花一些时间来写周总结、月总结和年度总结。待办清单虽是个很好的工具，但其局限性在于不是所有事都能像清单一样列出来，比如心态成长，经验复盘等。所以每到周末和月末，我会用大半页的空间来写形式更随意的总结。写总结的过程也是给自己反馈和复盘的好机会。内容上可以写取得了什么进步，解决了什么问题，学到了什么经验，有什么应该继续提高的；可以分类总结，比如我经常会分成阅读写作、健康、工作、家庭、财务、心理这些类别。 我在写总结的这几年里体会到的最大好处，是这个习惯把我的心态慢慢升级到学着以更长远眼光来看待一切：我希望自己的生活以什么样子来被未来的我回忆，那我就应该以那样的方式在当下做出选择。 比如，我希望当自己在周日写总结时可以记录自己看了多少书，而不是刷了多久的微博——前者使我感到自我认可，后者则不会；所以这个当下，当我面临是看书还是刷手机的选择时，我的意识就更有动力劝自己的肉身去选前者。再比如，如果我现在正为一件事烦心，那不妨穿越到几周后，想象一下未来的我会怎样看待这件事——未来的我还会记得这件事吗？这件事重要到值得写在月末总结里吗？这个思维练习常常让我会意识到，很多事情真的太不重要了，把我有限的时间精力用在为那些小事烦恼上，真就还不如去睡一觉或打游戏呢。例如，不必特意花时间做家务这个结论，就是这样被我完全合理化的 :) 记录 记录与总结的区别在于，记录更重过程，总结更重结果。 当结果并不理想时，难道平时的努力就没意义吗？当然不是。 这其中第一层在于，太看重结果本身的弊端包括容易陷入对自己的苛责，以及容易把一件事过度抽象化而不利于解决具体问题。举个简化的例子，月初计划运动二十次，到了月末总结时发现只做到了十五次，对自己要求高的人此时可能会陷入自我批判中去。一是这制造了没必要的负面情绪，毕竟做总结是帮助自己的工具，而不是个用来论证自己没价值很失败的案发现场；二是这样在抽象层面上的评判，其实对解决具体问题毫无帮助，能有帮助的是客观分析一个具体行为背后的动机，以及针对这些如何更好地帮助自己。 第二层在于，做事失败了其实也是个健康信号，有失败才说明目标有挑战性，若总在成功倒是目标过于保守的体现。把生活中失败/成功的比例控制在既能承受又能提供成长空间的范围内，长期来看是更优策略。 正念 正念（mindfulness）不只是一种刻意的冥想练习，也是一个可以融入生活的好习惯。 我在生活中践行正念的方式之一就是写日记，具体来说是「future self journaling（未来自我日记）」。这个形式我是从一位博主（@Jenn Im）那儿学来的，实践了一段时间后发现很适合自己，也很适合作为自我探索和正念练习的一部分，于是我就把 future self journaling 融入写日志的习惯中了。 Future self journaling 是根据下面这组问题来自由写下自己的答案。 My daily affirmation – 我的每日信念。我常写，”Everthing that’s happening now is happening for my ultimate good.”，”My feelings deserve to be expressed. I allow them to flow.” 其实也算是鸡汤，但重复次数多了，逐渐让它们取代自己小时候被父母或外界灌输的负面思维方式或信念，不也是件很好的事吗。 Today I want to focus on – 今天我想做的最重要的事。 3 things I’m grateful for – 三件我感恩的事。这是非常简洁的感恩日记了。“要感恩”无疑是句陈词滥调，但如果不亲自把感恩落在具体细节上，“感恩”就和“健康很重要”一样只会流于口号。这个部分我经常会写：我生活在一个和平稳定的城市，我不必为衣食住行烦恼，我的家人健康，我和爱人生活在一个屋檐下，我每天可以和比我优秀的人共事，今天阳光很好，世界上有团队创造了动森这么棒的游戏……勤做感恩练习的人可以把这个清单一直写下去。每天写感恩日记能让人意识到自己已拥有的东西，能让人更快乐更平静，而不是陷在没有尽头的与人比较和追逐欲望的转轮里——这是心理学研究验证过的方法。 3 traits I love about myself – 三个我喜欢自己的地方。花时间在发掘自己的闪光点上，而非总盯着不满意、不可改变之处。 The person I’m becoming – 我正在成为什么样的人。我未来想成为什么样的人呢？ I have the opportunity to be my future self today when I – 今天我可以做什么努力来向理想中的自己靠近一步呢？我很喜欢这个问题，因为它一下子拉近了未来与当下、理想与现实的距离。是啊，人人都想成为一个更好的自己，但今天的我是不是已经可以开始为此做点什么了呢？ I’m proud of / that – 我对什么感到骄傲。这个问题我在本子没多余空间时会跳过，因为我觉得和上面第四个问题很像。 写 future self journal 是个愉快的自我探索、自我关怀的过程，也许是这篇文章里每日记录四部曲中最愉快的步骤。推荐给你尝试一下！ 小结 最后，日志最好还是用手写。有研究表明手写和打字对大脑的作用并不一样，用手写下的内容确实更容易留下印象产生影响。 上面写了这么多，其实熟练以后，平均下来每天花在写日志上的时间也就不到十分钟。但这么一个几分钟的习惯长期执行下来，却可以撬动那么多积极影响，这让我到现在都觉得非常神奇。 " }, { "title": "《复乐园》读书笔记：现代的老年生活", "url": "/sinantang.github.io/pr-7/posts/modern-old-age/", "categories": "Book Review", "tags": "reading, books", "date": "2021-01-24 00:00:00 +0100", "content": "这几天读了渡边淳一十几年前出版的小说《复乐园》，写的是日本东京一家中高端老年公寓中发生的故事（是的渡边淳一不止是情色小说家）。 聚焦老年生活的文艺作品很少，像《复乐园》这样描写现代、精彩、不惨的老年生活的就更少了。至少这是我第一次看此类主题的小说，作为以前没怎么具体想过养老问题的人来说，看这本书收获了很多健康现代养老方式知识！渡边淳一在从事写作前是执业医生，在《复乐园》中也是以老年公寓创办者兼医师的角度叙述，所以书中很多对于老年健康问题和生活方式的见解确实是符合现代科学的。小说风格轻快，一个个故事像室内轻喜剧一样展开，读起来相当顺畅。基于以上多个原因，我还是很推荐这本书的！ . 以下是我的读书笔记，主要总结了书中对健康活力老年生活的科普内容。 小说主人公来栖进入中年后创办了一所鼓励老年人随心所欲生活的老年公寓，退休后的老年人在公寓里享受到了自由尊严和幸福的生活。 这所「Et Alors」（法语的“那又怎么了”）老年公寓建在繁华热闹的银座。大多数人都认为老人院要建在清净寡欲、空气清新的郊区，但来栖认为老年人反而应该住在市中心，因为市中心交通便利四通八达，周围餐厅咖啡馆商场剧院等生活娱乐设施一应俱全，对还能走动的老年人来说生活非常便利；而且很方便儿孙来看望老人。此外，对老年人来说，最重要的是外界刺激，适度的刺激可以使人保持身心年轻。越住在安静无外界刺激的地方，身体和头脑衰老得就越快——这是经过研究验证过的发现。至于市区空气污染，老年人本就来日无多，一点污染无法抵消生活便利和外界刺激带来的好处。 年纪越大，人会变得越任性，越不愿受约束。所以除了一应俱全的硬件设施外，来栖更看重的是给入住的老年人提供一个可以尽量满足他们心愿的环境。比如，来栖非常鼓励老年人追求爱和性。老年人的情感生活在很多年轻人眼里常常是某种“为老不尊”行为，很多子女对于上了年纪丧偶的父母积极寻找另一半这件事持反对意见。但实际上，人并不是一到某个年纪就会自动失去对爱情和性的需求。有数据显示，在六七十的年纪，大多数老年人都还有性欲。爱和性是人的原动力，对老年人来说也不例外。大胆追求爱情反而能减缓衰老，成为老人生活的能量来源之一。 除爱情外，老年人还应该培养积极主动的生活习惯。总爱以“都这么大年纪了”为借口拒绝活动一味松懈消极的人，身心也会加速衰老下去，用不了多久就如自己所愿成为废人一个了。除了公寓内组织的各种文艺活动和讲座，来栖会建议身体状况允许的老人去特护老人院做义工。已退休的健康老年人大多不想成为社会的负担，趁还能活动时去帮助别人给社会做一点贡献，对于老年人来说是很有意义的积极行为。而且实际操作起来，老年人之间相互更谈得来，也更体贴，所以老年义工很受特护老人院的欢迎。 男性在退休后常常会迅速衰老下去，女性却往往一直保持活力。这其中原因之一是女性有不减的好奇心。几个女性聚在一起，不论多大年纪，都能叽叽喳喳起来。家长里短，八卦琐事，甚至唠叨多事，这些都能成为人的生活能量。越是上岁数，越要用脑子。说话就是刺激大脑活动的方式之一。与人交谈不仅只是动动嘴皮这个动作，还会涉及对人际关系的思考，这些都可以让大脑不停运转。 在吃饭上，很多人会认为老年人要清淡饮食。但来栖认为，比起低热量高碳水的日餐，高蛋白高脂肪的西餐其实更适合老人。“七十岁以后，倒是吃肉类和火腿的人显得比光吃日餐的人皮肤光泽好，身体健康。”低碳水高蛋白的饮食观念对于很多城市年轻人来说并不陌生，但普及给老人还是需要一些工作。 以健康有活力的生活方式活到八九十甚至百岁之后，往往辞世的方式也并不太痛苦，可能一个感冒两三天后就会去世。但若在六七十岁时生个麻烦的病，常常要痛苦生活很长一段时间才能离开。这其中当然也有很大的基因因素，但来栖鼓励大家尽量选择积极有活力的生活方式。 . 这本小说算是对现代养老观念很好的科普了，我读完后很具体地感受到，老年生活其实也可以很精彩。不过，观念是一回事，要住上小说中描述的那种理想老年公寓，存款和养老金上怎么也得超过百分之六七十的人才有可能呢…… " }, { "title": "读《弃业医生日志》：医生的困局", "url": "/sinantang.github.io/pr-7/posts/doctor-diary/", "categories": "Book Review", "tags": "reading, books", "date": "2021-01-17 00:00:00 +0100", "content": "我这周看了一本英国前妇产科医生写的畅销书《绝对笑喷之弃业医生日志》，有几句话不吐不快。 专业度 vs 工具人 「虽然他们脖子上挂着听诊器，还总爱把生生死死的玩笑挂在嘴边，但他们依旧是那个小孩子，高中毕业时武断地在大学申请表的“医学”一词旁打了个勾。他们是像你一样脆弱的人类。」 ——这是本书读者很爱引用的一句书中原文。作者作为初级医生，工作强度极大，个人生活被无限挤压，此外还常常面对不被别人（包括病人、亲友、政客）当作「普通人」的精神压力。比如，当病人听说医生生病时，会惊讶道“原来医生也会生病啊！”；再比如领导认为，在值完十小时夜班的时候，医生依然能够以刚开始值班时的体力精力和水平做一场复杂接生手术；朋友熟人也会时不时不分场合地拿个人健康问题来“骚扰”医生。 是的，医生这个职业因为门槛高专业性强且事关生死，所以常常被脸谱化，被剥离普通人的属性，成了所谓的工具人。但这个问题的解决方案会是像作者暗示的那样“重新把普通人属性归还给医生”吗？这个问题的矛盾之处在于，专业度高就必然意味着普通人属性被削弱。例如，文明人去看妇科或男科，并不会因为医生的性别而感到窘迫，因为他相信医生很「专业」，医生的性别并不影响诊疗过程，自己在医生面前只是所有病人中的一个，被医生检查身体与被普通人触碰身体相比完全是两码事。如果此时病人想起来，哦医生其实也是普通人，他也有其他普通人的人性弱点，他也会在检查身体时产生与医学无关与性别有关的看法和联想，他面对医学难题也会很脆弱也会判断失误。那这些想法是不是会反过来影响病人对医生的信任呢？ 专业即等同于削弱普通人属性。这不仅仅出现在医疗行业，各行各业都是如此。空姐的专业意味着在飞机遇到气流时，他不会像普通乘客那样陷入慌张忙乱，所以乘客可以信任他；警察的专业意味着他面对恶人恶事时不会像普通群众一样退缩逃跑，所以居民可以信任他；公司职员的专业意味着他在与讨厌的同事打交道时，依然可以把工作放在个人喜好前面，所以客户和老板可以信任他。说实话，就连作者一直攻击的政客也是脸谱化的“工具人”啊，挨骂不还口就是他们的工作内容之一呢。 人人走向专业化是高度分工社会的必然结果，不然人类没有能力驾驭如此高度发达的现代社会。 但是，专业不代表就我们都必然要成为工具人。我觉得，认为自己是专业人士还是自己只是个工具人，有时是由个人心态决定的。是“我工作是为了实现一点个人价值并同时获得一些可以用来改善生活的报酬”，还是“我不得不工作是这个吃人的社会在逼迫利用我”，还是处于中间地带的任何观点，很多时候确实是个人思维方式的区别。 医疗资源有可能不再紧缺吗 很多医生热爱自己的工作，但普遍会诟病的一点是医生工作强度过大。表面上看，就像作者所说，医院预算不够，人手永远不足，导致所有医生都不得不超长加班。然而这个医疗资源紧缺的局面，真的能靠“涨工资多招人回头再加所有人的税”来解决吗？我觉得很难。 我刚刚查了下OECD近两年的数据，从事医疗健康行业的从业人员占所有工作岗位的比例，在不少发达国家已经超过10%；在澳洲、比利时、丹麦、芬兰、德国、荷兰、挪威和美国，这个比例甚至已经超过13%。但我们平时在网络上可不乏听到对在这些国家预约医生和小手术不顺的吐槽。当发达经济体中所有就业人员中超过十分之一都在医疗行业工作的背景下，还依然解决不了医疗资源紧缺的困境，那还要再加多少人手才能让所有国民都及时获得医疗资源呢？很多医疗岗位也很难被机器替代，所以机器自动化似乎也不会是这个问题的答案。 更何况，跟几百几十年前相比，现在的医疗资源已经大大丰富。当然啦，在以前医疗资源可是个稀缺品，不是普通人就能随便使用的。但从另一个角度来看，随着科学和医学的快速发展，人类对人体和疾病的认知越来越深入，现代医学能治的病越来越多，这也意味着病人也越来越多。一个典型例子是心理疾病，以前大家全不当回事儿的“情绪问题”，在现在被逐渐越来越细致地诊断为各种各样的心理问题，那可不是凭空多出无数病人了么。不论怎样快速地增加心理医生供应，也不可能追上病人的增长数字。 而且在现代文明社会，「科学」可谓是每个经过义务教育的人的信仰了。我们都相信，科学可以解决绝大多数健康问题，现在解决不了，那是因为人类的科研水平还不够发达，将来一定能解决。我们都不太能接受”世界上存在治不了的病“这个我们祖先习以为常几千年的观念了：不行，人定胜天，我们要大力发展科学，有一天一定能治好。所以，医疗资源供应相对需求短缺将永远是个无法解决的矛盾。 不得不被政治化的医疗问题 作者在书末还发表了《致卫生部长的一封公开信》。读之前我还好奇这位前医生会有什么好提议，读过之后我的心情：就这……？ 作者对卫生部长的建议就是，来体验一下英国初级医生的真实生活，再制定与医疗有关的政策…… 政客难道是因为不了解医生的工作有多难才做出某些提议的吗？ 有个社会学管理学概念叫做「wicked problem」，中文似乎译作“棘手问题”（我觉得这个翻译不是很好），指那些不可能彻底解决的复杂问题，因为信息和需求不完整相矛盾且总在变化，且我们难以承认这些情况（“a problem that is difficult or impossible to solve because of incomplete, contradictory, and changing requirements that are often difficult to recognize”，抄自维基）。治理国家就是「wicked problem」的一个典型例子。政客的工作其实就是综合了解社会各方的需求和矛盾，尝试做出一些不那么糟糕的决定来缓解矛盾，推动发展。比如在医疗问题上，大部分依赖公费医疗的国民的需求是：我不想为一个预约等两个月！我不想去医院急诊还要等四五个小时！我不想因为自己的问题不严重就不被医护重视！我不管我就是要免费或低价但高效还态度好的医疗服务！医护人员呢，肯定不想每周工作超过80小时，也不想免费加班，还不想花太多时间在写报告上，更不想因为一天看的病人太多而误诊其中任何一个。难道政客就不知道这些自相矛盾的需求吗？ 由于医疗问题关乎民生，医疗资源紧缺也是个无法解决的困局，所以政客也只能像在平衡有一百零八个盘子的天平一样，预测哪边还能再多承受一点压力就把重量放到那里去。 小结 虽然好像看起来我没写多少好评，但这本书确实值得一看，一是我很久都没看过像这样真能让人大笑出来的书了，二是对于非医护人员来说，从医生的角度来认识这个问题，有利于医患关系的改善。 作者在其中提出的问题该如何去看待，解决方案是否真的存在，这就取决于每个人自己的思考了。 " }, { "title": "The Food Chain of Information", "url": "/sinantang.github.io/pr-7/posts/info-food-chain/", "categories": "Thinking Tools", "tags": "career", "date": "2021-01-09 00:00:00 +0100", "content": "“有效搜集信息”是每一个生活在互联网中的现代人都应该拥有的重要技能。我没怎么写过这个话题，是因为我觉得这是个虽重要但并不复杂的技能，熟练使用互联网的人应该都略知一二吧。但我还是一而再再而三地发现，还真依然有太多人不知道如何搜集信息。所谓不会搜集信息，很大程度上体现在不知道如何判断眼前信息的价值上。 去年年底我在微博上搞了个 #AskMeAnything 的活动，其中很多问题集中在职业选择职场规划上。当然，所有人都想知道什么行业在未来会持续走上坡路，蓝海和风口在哪里，在欧洲什么职业吃香，在国内什么工作值得跳槽。但你若直接问网络上一个陌生人他对此的看法，这种信息的价值很低——一方面取决于回答人是谁，但大概率上来说，这种信息的价值对你个人来说确实很低。虽然价值低，但这么做的人却永远络绎不绝。 这里我就想举另一个相反的例子。前几天我在微博上分享了一份新鲜出炉的行业报告，主题是 European Unicorns（欧洲独角兽）。这份报告集结了很多可信度高的行业数据以及作者本人（一个在咨询分析和科技风投行业从业二十年的行家）的总结和看法。但这条微博却鲜有人点赞评论。然而其中的价值呢，绝对超越社交网络上99%的碎片内容。 比如，这篇报道指出，近年来全球风投和初创科技公司开始不再像过去一样高度集中在硅谷，在去年，欧洲筹集到种子期投资的初创公司数量已达美国数量的70%。截至去年，欧洲已经出现120个以上估值过一亿美金的独角兽公司——十年前，这个数字还是个位数。 欧洲电商和网络营销（online advertising）的发展还大大落后于美国，说明这两个行业在欧洲还处于起步阶段，未来很可能会迎来快速、长线发展。 报告还指出欧洲科技公司具有优势的三个行业：前沿科学（frontier science）、金融科技（fintech）、生物。 对于一个计划或已经来欧洲留学、工作的人，这些信息得多有价值啊。这样公开、免费、准确、前沿的行业报告，却是放在普通读者面前都不怎么会去问津的信息。到底是为什么呢？ 这样一份行业报告的比社交网络上一条职场问答碎片价值高是显然的事，但我们不妨花两分钟来分析一下为什么有的信息价值高，有的信息价值低。明白原理后才能更好地降低自己以后视价值而不见的概率。 道理很简单：离“源头”越近的信息，价值往往越高。拿科研领域的一条信息传播链举例：在实验室里通过科学方法验证的一个科研假说，就是处于源头的信息。论文是其载体。往下走，加工一手科研论文信息的包括文献综述、一手行业报告和专业书籍，再把综述和行业报告选择性翻译传播给大众的有大众媒体和通俗图书。再往下游走，社交媒体上传播的往往是对媒体专业记者所写内容的再加工。最后还可能下沉到完全无法回溯信息源的形式，比如”我听村口老大爷说……“。这个信息下沉的过程持续数十年也不少见。 从这儿很容易看出，离创造信息的源头越远，这条信息的精确性就越低，前瞻性越差，价值也是由高向低走，到最后可能就完全没有任何价值可言。表面上看，信息依靠一级级的物理载体（论文、书籍、新闻报纸、人口）向下传播。实际上，最初提取拼凑信息的和中间不断解读加工信息的本质上都是人脑。人脑活动对外不可见，有的人脑加工解读信息的过程中联想了更多信息，更多人脑连准确全面的阅读理解都做不到。选择将加工后信息继续传递下去的人脑还各有各的目的，有意选择性甚至歪曲原意传递信息的也不在少数。 所以这个过程就像”传话“游戏一样，即使中间环节的人脑都怀着尽力传递准确信息的态度（现实场景中这基本不可能）传播信息，信息的变形和衰减无法避免。链条越长，衰减越厉害。因此，当面对信息时，不妨从”距源头有多远“的角度来判断此信息的价值。当你站在信息源头，甚至自己尝试根据已知条件才拼出一条信息时，你获取的信息对未来行动的参考价值可能辐射长达数年甚至数十年。但你若站在信息食物链的下游的下游的下游，轮到你消费时，确实只能剩下渣渣了。 " }, { "title": "Ask Me Anything - 2021 New Year edition", "url": "/sinantang.github.io/pr-7/posts/ama-2/", "categories": "Self improvement, Thinking Tools", "tags": "career, problem solving, learning, planning, communication", "date": "2020-12-31 00:00:00 +0100", "content": "这个月在微博（@思南说）上搞了个回馈读者的 #AMA Ask Me Anything 的活动。我觉得其中很多问题和回答很有参考价值，所以在此分类整理出来。第一次发起此类活动，我自己玩儿得很开心，也谢谢大家参与！ 合集之一请点这儿. 职场 问：请问是否了解德国环境科学或者气候经济方面就业情况，这种小众专业是不是很难找到工作？谢谢！ 答：教给大家一个相对客观的了解当地就业市场的小贴士：去几个当地主要就业广告网站，搜你关心的关键词，看看有多少机会，那些机会分别需要什么技能，用自己人脑来个初步的“大数据分析”。这是没有行业人脉时最简单有效的就业调研方法。 . 问：想问怎么在读博和工作之间做个选择，目前是两个方向都不排斥，但是也都没有十足的信心。专业是汉语教学方向，有过几段汉语教学经历，对语言学也挺感兴趣。但是学长学姐们的出路大多数是去国内中小学做老师，我有点儿害怕中小学的生活。 学术上，这个学期发了两篇会议论文，也开始学Python，但是深知学术之路的艰难，所以很怀疑自己到底有没有能力。现在已经国内研究生二年级了，很迫切地想要做个决定，朝着一个方向好好努力，但是又总是定不下来，不知您有没有什么好的建议，谢谢姐姐的耐心和时间～ 答：科研也是一份工作罢了，不必在心态上给普通科研工作者加太多光环。你不是也发两篇文章了吗，那就说明你有能力做好这份工作。要想当中小学老师应该也没什么难的吧。我觉得只看这两个选项的话，你对比的更多是两个工作不同的生活方式，可以选一个你更喜欢的生活方式。工作选项肯定也不止老师吧，可以再多打听下没去搞科研也没当老师的学长学姐最后出路是什么，开阔一下思路。 . 问：还想请教一个关于职场沟通的问题，我是我们组唯一一个非德语母语者，在大家argue的时候，我总会有自己德语不好，不能/不敢非常自信表达观点的感觉，哪怕其实我有idea。虽然知道不该这样想，可感觉还是很难自然地参与到讨论中。请问思南有没有建议怎么克服这样的心理？ 答：在职场要试着把事情排在人前面。重要的是参与讨论做好工作，而不是个人感受（包括自己的和别人的感受）。 转行 问：请问你作为面试官会对那些「在职且想通过自学转NLP的人」有哪些知识和经历上的期望？ 答：我个人看重过去成绩和潜力。过去成绩指至少曾把一件事做到非常好，潜力指学习能力和兴趣。具体行业知识和技能我不觉得是最重要的。但像我这样的HR似乎比较少……大部分人是机械地寻找JD和简历上重合的关键词。 . 问：小姐姐请问转行前要着重考虑哪些事情呢？我是学经济的，现在想转数据分析，我该怎么去判断自己到底适不适合这一个行业？另外对编程也有点兴趣（薪酬吸引力）但不知道能否做得好…… 答：可以先参考一篇旧文（博客站点内搜“职业道路”）。 看适不适合一个行业：询问从业者，积累非正式工作经验（如实习）。 若转行动力只是薪酬，最好先调研一下，这个是否真是自己能够到的薪酬最好的工作。风很大的高薪专业也许薪酬确实不错，但风已经很大了说明竞争也会很大。现实生活中也有风没那么大但实际上很吃香的工作，此时就需要自己的调研和人脉了。 . 问：请问你觉得能够转行成功的最重要因素是什么？或者对影响转行的不利因素该怎样克服？比如年龄，无对应行业直接经验等。 谢谢。 答：我第一反应是正确的废话：转行和大部分需要综合能力的事没什么太大区别，能力强的人不论做什么，成功率都高……还有，年龄真不算不利因素啊，我不都发了好几条微博说这事儿了么。 心 问：怎么样去找到自己真心喜欢的事业，我体验过各种不同的工作，还是不清楚自己的内心。 答：我几天前刚发过一条相关微博。其实不必纠结一定要做真爱事业。当然可以保持开放心态也许哪天会碰上。但我现在更倾向于认为，相当多人的潜在天赋错过最佳开发时期后，也许就很难再发展出来。 . 问：想请问一下，如何自我觉察，并作出改变。 答：去年写过一篇关于冥想的文章，可以在博客站点内搜“冥想”参考一下。不过冥想只是一种流行的辅佐实现“自我觉察”的手段，不必拘于形式。 . 问：禅定境界也不过是种种现象。我想问的问题是：通过禅定观察能否获得人生的终极意义？ 答：凡人不要轻易说“人生终极意义”。形而上的空气太稀薄会让你喘不动气。 人生本身也许有意义，但那意义不是空想出来的，而是活出来的。至于“终极意义”，我不觉得这是个有意义的问题。 . 问：想冒昧的问问你怎么处理生活中的不如意并控制自己的情绪。抱歉这么问好像有点负能量。比如遇见网络的喷子，遇见消耗你的朋友，会忍不住去想去琢磨去生气。我意识到自己是“讨好型人格”，觉察到自己的“吸渣体质”后，在努力的学会说“no”、过滤身边的朋友以及让别人对自己的负面影响降到最低。 答：有一个有点唯心主义的观点是这样的：我们生活中的一切都是自己内心的映射。比如过去糟糕的经历还在困扰我，是因为我赋予那件事负面意义，并且一直坚持不放手。我会被网上随意出现的喷子气到，是因为我确实在意它们的言论，它们言论中存在着无法让我快速产生认知闭合的部分。比如看到一句有逻辑问题的句子时，我却无法快速想清楚哪里不对我有什么论据，那这个事儿就会多少有点困扰我；但如果有人宣称地球是方的病毒不危险人可以吃狗屎，这种言论一般不会造成困扰，因为接受过基础科学教育且有实际生活经验的我们清清楚楚地明白这些个言论的问题。 如果想要更长久地解决这个表面看起来是“处理生活中负能量”的问题，那不妨每次这种事发生时，都留个记录，把它当成一个认真分析自己的机会（“分析”就是连续问自己问题再尝试去回答）。这个过程不会特别轻松愉快，但当我把外界（准确地说是外界对我产生的影响）当作认知自己的工具时，会发现我随时随地都能找到提高自己的时机，现在困扰我的事情很可能一年两年后就不再是个事儿了，这么想想应该会觉得很开心吧！ . 问：如何确定自己想在哪里安定下来呢？感觉自己老是觉得还有其它地方想尝试，怕贸然在某个地方安定下来之后后悔，但又怕自己只是想逃避生活中困难的事不去做决定。现在这样一种不算安定，随时打算拔腿就跑的状态的后果是，很难在一个地方踏踏实实地发展出长期的关系，在哪也都没有归属感。 答：归属感也许和在多少个城市里生活过没什么直接关系。我觉得没归属感还是不适合一个城市的表现吧。如果你是个潇洒的人，可以趁年轻时去别的城市工作生活看看。如果你做不到那么潇洒，可以尝试在本地寻找玩儿得来的社交圈，有时候找到一个社会支持网之后就会觉得有归属感了。 . 问：我不知道我的问题属于哪一类。我母亲三年前去世了，我一直接受不了这个事实。我很想她。我认为科技在我有生之年会进步到复活人。感性的我控制了理性的我，只有这样我才能活下去…… 答：可以学着接受自己接受不了这个事实的这件事。应该没有人会逼你在短时间内一定要“接受”。你一直很想她，说明你们以前的关系很好，她是个值得想念的人。 技术 问：想请教一下思南编程的问题，因为不是学cs科班出身，工作中能感受到自己写的代码质量不如学cs的同事，想问问思南有没有什么提高编程能力以及写clean code的建议？非常感谢！ 答：1. 积极向身边做得更好的同事讨教，比如通过pair programming和code review。2. 多练。3. 多读优秀代码。 社交 问：我的问题与社交困境有关。我的能量来自独处，与人沟通联系属于消耗能量，所以不喜欢花费时间精力去维持和扩展社交关系（即使是几分钟的微信问候）。但是狭窄的社交圈正在给我文员性质的工作和单身沪漂的生活带来限制，这是我苦恼的地方，想问问你的看法或建议，如果你感兴趣回答的话，谢谢。 答：内向的人更适合以吸引他人的方式进行社交，让别人看到你（的价值）后主动来交流。这样就不必自己主动啦。 留学 问：比较感兴趣留学的话题，想问下思南，在英国读语言学（具体分支还没有确定，应该是macrolinguistics里的一个吧）这种比较理论的硕之后除了读博还有什么建议么。另外家境不好的情况下，建议回国读博还是申请美国奖学金呢。 答：理论语言学走科研路，大概率上不论在哪国这个路都会越走越精专（窄）也没法赚啥钱。不过确实喜欢或擅长科研的话，在中或美有个稳定教职肯定不会愁吃穿用。求学方面，语言学研究肯定还是美国更强。 想要多赚钱还是得去工业界。如果要走应用路线，那就最好不要读重理论的硕士。更重要的是先找好科研方向。 补充：对赚钱没啥执念不饿死就行，果然最难的还是选分支。 答：那能申到奖学金的话还是更建议去美国读博。毕业时可以选择留下还是回国。 " }, { "title": "My Book Recommendations, 2020", "url": "/sinantang.github.io/pr-7/posts/book-recommendations-2020/", "categories": "Book Review", "tags": "reading, learning, books", "date": "2020-12-30 00:00:00 +0100", "content": "Nonfiction Science / History 我们如何走到今天 How We Got to Now: Six Innovations that Made the Modern World | Steven Johnson 一本融会贯通的以六大发明为主题的科学史书。相当推荐！主要是作者写得好。作者思维严谨但活跃，还不说废话。很多具体科学史实我并不陌生，但作者的切入角度不俗，对于我来说启发良多。比如，我以前从没想过玻璃制造工艺、读书和印刷术三者之间存在着强联系：印刷术的发明带动了识字率的提高，进而使人们意识到自己原来看不清字啊，于是对眼睛（玻璃）制造的需求激增。环环相扣好像有谁精心安排了这情节似的…… 作者选出的重塑人类文明史的六大创新发明为：玻璃、制冷技术、声音技术、清洁技术、记录时间技术、人造光源。每一章读来都很有趣。如果学校的历史和理化教学方式能借鉴下这本书和下面一本《万物发明指南》的思路就好了。 万物发明指南 How to Invent Everything | Ryan North 一本设定很好玩儿的科学史书。 物化科学知识发展史的内容我看得津津有味。没想到我在读此书的过程中解决了几个自己高中时不理解的理科知识点！比如，高中化学学到化学反应式时，我有一个疑问：为什么有些元素要在化学反应里失2个电子，有些失1个电子，有些视情况失2或3个电子？除了死记硬背（我的弱项）外，我该怎么理解这个规律呢？当时化学老师应该是没讲过此处原理。在这本书里看到分子级别的科学解释时，发现我当时其实离真相只隔了一层窗户纸而已，但捅破它却已是十几年后的事了。 I really enjoyed the first two science history books. I advocate including them as recommended readings for high school students. I happened to have found the answers to some of my questions when learning physics and chemistry back in high school, while reading the books. History 剧变 Upheaval: Turning Points for Nations in Crisis | Jared Diamond 《剧变》是全球畅销书、普利策获奖作品《枪炮、病菌与钢铁》作者的最新作。 可以通过此书了解7个不同国家（芬兰、印尼、澳洲、日本、德国、智利、美国）近现代历史上遭遇重大危机的时期和历史事件。当作历史总结类书来看可以学到不少世界近代史内容。以史为镜，结合今年的各种国际新闻，倒是有些许尝试解读各国政府风格和国民性格的乐趣。 回到此书，作者最后的分析和观点我没太看出有什么特别之处来。 This is the most recent work from the author of Guns, Germs, and Steel. It’s a good read for me in that I got to know one aspect of the modern history of 7 countries (Finland, Indonesia, Australia, Japan, Germany, Chile and America), some of whose history I didn’t really know too much about. The historic recount chapters are interesting, but I don’t find the author’s analysis and interpretation very enlightening. I think a better approach in general for information consumers is to read the history (near facts) and take the analysis (opinions) with a pinch of salt. Psychology 游戏改变世界 Reality is Broken: Why Games Make Us Better and How They Can Change the World | Jane McGonigal 这是一本看完第一章就可以直接跳过余下所有篇章的书。 这本书主要就讲了两件事：1. 如何利用游戏思维做产品设计；2. 如何利用游戏思维更高效愉快地工作学习。而这些内容都能在第一章找到。之前我在AMA合集#1中一个关于效率问题的答案中就提到“游戏化思维”，想要看到如何在生活中具体应用的例子的读者可以去翻那篇。 越往后翻内容就越不靠谱。书最后一部分充满了“认知盈余”、“重塑人类文明”、“人人时代”等缺乏准确定义的互联网爆款词，让我不得不跳着才能翻完（敢情在作者眼里真的没有游戏做不到的事）。 I think only the first chapter is worth reading. The book basically delivers: 1. how to use game design principles in product design in general to hook users; 2. how to use game design principles in your life so it’s less painful to live through boring tasks. You will get all that in the first chapter. Get out of my head: Inspiration for Overthinkers in an Anxious World | Meredith Arthur 一本很可爱的帮助缓解焦虑的小书。书中插图令人平静，内容上确实简明扼要地写了不少可以帮人切换思维方式的好建议，还附了一本小小书，适合随身带着在焦虑发作时拿出来翻一翻看一会儿平和的色彩。我觉得也挺适合用来引导容易焦虑的儿童的。 很多内容相似的书籍，其实内容上写得很有借鉴性，只要你照着去做其中一部分建议，时间久了就肯定能有所收获。但所有落脚在「改变思维方式」的建议都很难做到，因为成年人存在对现有思维方式的路径依赖。对此我自己也想了很久，发现也许只有“重复”这一条方法可行，即把一个思维方式具化成许多事例，在很长一段时间内以开放心态反复复习强化，然后有一天在生活中遇到一个场景时，你可能会突然自主意识到，噢我完全可以这么想那么做呀！！除此之外，我是想不出作为成年人，还能如何从根本上改变自己某些思维方式了。有人可能觉得，像文艺作品里那样，一个突发事件就会改变一个人的思维方式。然而根据我在生活中的观察，那种只因一个单一事件就触发积极个人改变的人通常拥有超出常人的悟性，这在真实生活中其实是很难得的。对常人来说，可能性更大的是缓慢量变带来质变。 在微博上，常常看到一些博主回答网友提问，一个对具体场景的具体回答，基本不可能帮提问者在下次遇到新场景时学会用别人看事情的角度去解决这个新问题。但如果以一个稳定的思维方式为基础，配合几十个不同场景的应用题加应对“答案”，在一定时间跨度内（时间跨度也很重要，一天几小时内塞完所有新内容的话，往往第三、四天开始就记不着了）多复习巩固几遍，很多有心人就能学会如何自主切换到一个新的思维方式。 其实仔细想想，这种通过重复带来的改变其实是在模拟人小时候从周围环境学习的过程。每个人的行为模式里往往都带有父母的一部分思维习惯，不论父母是否有意识那样做，就是因为日积月累的相处，孩子就会内化来自父母的很多习惯。 This is a little workbook with peaceful illustration art to calm down an anxious mind. I like the simple language and the calming colours. Business Little Black Stretchy Pants: the story of lululemon | Chip Wilson 五星推荐的一本书，我已写过书评。 Highly recommended. A previously written book review here. Shipping Greatness: practical lessons on building and launching outstanding software, learned on the job at Google and Amazon | Chris Vander Mey 我犹豫了两秒这本书是该归在“技术”类还是“商业”类。最后还是选择放在“商业”类下，因为我觉得这本书不仅对技术工作者有帮助，而且对于所有在科技软件行业里工作的人（工程经理、产品经理、项目经理等）来说都有一定借鉴意义。适合已有几年工作经验的职场人士翻阅。也适合一直从事技术岗未来有意转管理岗的职场人参考。不过因为作者是在美国（硅谷）科技公司工作，所以书中宣扬的职场风格不一定适合其他地方，比如我经历过的德国职场基本没有太多 aggressiveness，但第一份给美国公司打工的工作中就曾收到过老板发怒批评开会低效的群发邮件。总之还是要自己有所思考因地制宜吧。 这本书的副标题起得很准确，内容确实非常实用，具体到会告诉你一些重要邮件该怎么写，也写了很多在谷歌亚马逊的第一手工作经验（和八卦）。 这本书前几章比较无聊、过时（毕竟是近十年前的书），我觉得可以直接从第五章开始看。 I put it under label Business instead of Technology, because I believe it’s helpful not only for engineers, but for most people working in tech, incl. product managers, engineering managers, project managers etc. This book gets better as you turn the pages. My suggestion would be to skip the first dozens of pages and start from Chapter 5 directly. Design 写给大家看的设计书 The Non-Designer’s Design Book | Robin Williams 一本非常不错的通俗设计书！作者以“亲密性”、“对齐”、“重复”和“对比”四大设计逻辑，解答了很多我以前的“感觉这个设计更好看但我不知道为什么”式困惑。我在读这本书时很享受的一个原因在于，作者解释了设计要点背后的功能逻辑（遵循现代设计原则，”Form follows function”），比如在平面上距离更近的两个元素一定是比距离更远元素在逻辑距离上也更近，否则只会迷惑观者。 除了理论外，书中占更多篇幅的是专业但易懂的例子。看了之后我确实在写工作讲演 PPT 上能做到更有的放矢。 我很喜欢占了本书后小半章节的对字体的讨论。乔布斯本科时无意中选了一门字体课，后来这门课影响了他对苹果电脑的设计。第一次听说这个故事时，我不太理解字体（而且是简单的英文字母字体）怎么会有这么多值得学习的知识，且包涵足以启发苹果电脑设计的灵感。看完这本书后，我开始有点理解了。字体设计的世界的确别有洞天！印刷字体的历史发展、技术进步，字体设计与社会文化发展之间的联系，字体选择与文字表达目的之间相辅相成，这些我以前不了解的事情成了我以新眼光看旧事物的钥匙。现在我坐在马桶上研究牙膏外壳说明书的乐趣都比以前多了不少。 As the title suggests, it’s a great design book for non-designers! I like how the author only talks about 4 fundamental design principles (proximity, alignment, repetition and contrast) in print media and uses ample examples to illustrate them. The look of my presentation slides has improved with the help of this book :) Self Improvement 如何结交比你更优秀的人 Network Up | 康妮 这本书可以说是今年给我启发最大的职场沟通类工具书了！从心态到方法到真实案例，作者都写得相当到位。如果你想在结交人脉、职场沟通方面有所提高，那我非常推荐此书。 作者本人的职业经历也颇有点传奇色彩：初入职场实习，作者在6个月内为GE收回2000万美元旧账，被授予“GE管理奖”，获时任CEO杰克•韦尔奇当面称赞。当时的老板也成了后来的丈夫 :) 09年在美国创业，做环保行业的小咨询公司。此书基于作者二十多年职业生涯积累的工作和交际经验。我觉得作者本人基本要有十几、二十多年的成功工作经验，他产出的职场内容才较值得一看。职场老油条的经验并不是二十多岁的“小编”就能传授的。 “人脉”一词有时听起来不讨人喜欢，是因为其暗含把周围人看作具有利用价值的工具的意味。这确是一种很典型的学生思维。然而离开校园进入社会后，人脉会成为一个成年人非常重要的社会资产之一。人作为社会动物，现代人类又生活在无数人共同协作才能运行的现代社会中，我们无法脱离社交关系而单独存在。社交关系分为强社交连接（strong social ties，联系频率超过一周一次的人）和弱连接（weak social ties，联系频率从低于一年一次到一周一次的人）。有研究证明，在找工作跳槽时，超过80%的人是通过弱社交关系找到的新工作，而依赖于强社交关系找到新工作的人不到20%。这个数据对比实在很强烈，也反映了人脉（当我们说“人脉”时，更常指“弱社交关系”）对获得顺畅社会生活的价值。 扩展人脉上，最有持续性最健康的心态是出于帮助他人的目的而广结善缘。听起来像客套话，但若你真的尝试转变这个心态，确实在与人交往时的感觉会大有不同。每个人都能提供帮助另一个人的价值。帮助别人的过程，也是确认自身价值增加自信的过程。而且“助人使人快乐”也是条古老的真理了。较之只是自己微笑，我们让别人微笑时大脑会体验到更强效的“多巴胺剂量”。当人比较快乐时，他的人际关系也会更加顺利。而良好的人际关系是促进大脑健康发展、延缓大脑衰老的良方。总之，有时一个心怀善意的举手之劳就可以启动自己生活的正向循环，其实是一件非常有利可图的事呀。 说完助人，再提一句接受别人的帮助。这一点对于很多人来说反而是更难做到的。大脑认知上的槛儿自是只能个人解决个人的，但有一个看待此事的角度我想在此写下来： 助人的快乐，你也应该给别人体验到的机会呀。 接受别人帮助恰恰是强化两人关系的催化剂。 能借助别人的力量来达到自己的目标也是个人能力的一部分。 选择这次接受帮助并不是这段关系的终结，只要你下次也真诚回报别人的善意，这段关系就能在良好互动中持续下去。 This is a very helpful book on workplace communication skills and developing one’s network, but I’m not gonna write too much in English here because it’s a Chinese book. Hopefully some publisher would translate it into more languages! 极简工作法则 The Rules of Work | Richard Templar 极简生活法则 The Rules of Life | Richard Templar 极简父母法则 The Rules of Parenting | Richard Templar 实话实说，看完这三本“极简法则”后过了几个月，我已对其中内容毫无印象。作为鸡汤书，这个系列不太行。 Average writing and content… Not recommended :( Cultural 地下 Underground: The Tokyo Gas Attack and the Japanese Psyche | Haruki Murakami 如果不太了解1995年东京发生的这起国内邪教发起的恐怖袭击事件，建议听日谈公园的120-122这三期专题播客节目（在播客APP内搜“日谈公园 沙林”），讲得特别好，很带劲。 《地下》是村上1996年采访东京沙林毒气事件受害者的纪实文集。我看了没下架的那部分采访稿，受访者的言行都非常日本人。认为工作职责高于一切的铁路工作人员，中毒沙林却坚持早早回到公司正常上班的白领们，认为受害者同事的中毒后遗症是为逃避工作的借口的上司……哎上班工作、对社会有用真有那么重要么。整个社会太走集体主义和工具人路线，大概对从根基上打压类似奥姆真理教的极端思想不会很有帮助吧。 We should be cautious of any religious ideology creeping into the normal decision making process. Biography 当我谈跑步时，我谈些什么 What I Talk About When I Talk About Running | Haruki Murakami 已写过一篇短书评。 最初想看这本书，是因为这是本在欧美知名度美誉度较高的村上春树的作品。有时人们会引用书中略带哲学意味的观点，包括我的同事。所以我觉得自己作为东亚人必须要看一下。还挺推荐的！ A comfortable yet somewhat thought-provoking read, even for non-runners like me. 行动的勇气 The Courage to Act: A Memoir of a Crisis and Its Aftermath | Ben Bernanke 微信读书显示，我累计用19小时读完此书，可见此书的信息量。 本书作者是06-14年间担任美联储主席的伯南克，他以自传形式记录了08金融危机的始末。上半年时我还看了克鲁格曼的经济学大师课（MasterClass），和这本书的内容互有补充。美中不足是伯南克和克鲁格曼在经济问题上的立场一致，所以得不到其他视角或更高维度的讨论。 在2020这个动荡的年景中阅读这本书，感受格外深。今年美国依然采取了与08年相同的应对经济问题的措施：大大增加货币供应量。伯南克在这本书里自然是对自己所采取的方案非常认可，详尽的政策解读和举例让我理解了作为政府方支持增加货币供应量的动机和好处。不过本书缺失的是对危机过后的中、长期影响的讨论。比如，现在有些研究表明，每次大幅印钱之后，贫富差距都会进一步加大，多出来的钱绝大多数又去了富人那里，以房产股市等形式。 This book is written by Ben Bernanke, Chair of the Federal Reserve 2006 to 2014, and covers the time before, during and after the 2008 financial crisis. Bernanke describes elaborately why certain decisions, i.e. quantitative easying (or money-printing) of $1.3 trillion and 0% funds interest rate, were made during the crisis and what some of the effects they have brought into the world are. When reading this book, I came to understand some of the macro-economic rationale behind those measures. However, Bernanke himself clearly takes an approving stand of his own policies. Not many negative consequences are discussed in the book. For example, some reports indicate that large-scale money printing increases existing wealth inequality, as most newly created money goes to the rich in the end. This year, we see similar things happen even more. Many governments have learned from the US Federal Reserve’s actions in 2008 and start printing money as a common measure to avoid/delay any economic hardship. With modern technology, you don’t even need to literarily “print” anything, just add a few zeros in the computer. In a very recent interview this December, century-old investor Charlie Munger gave his opinion on the recent economic trend in the U.S., “We’re in very uncharted waters. Nobody has gotten by with the kind of money printing we’re doing now for a very extended period without some trouble. I think we’re very near the edge of playing with fire.” 天生有罪 Born a Crime: Stories from a South African Childhood | Trevor Noah 这本是Trevor Noah的在南非度过的童年青年时期的自传。 这本书听下来，对我来说，感动和沉重的部分远远大过幽默搞笑的部分。在Trevor讲自己生父的那一章，说到“he chose me”，“being chosen is the best gift you can give to another human being”时，我听到几乎掉眼泪。 人若不经历层层苦难与波折，就很难理解人性的幽深复杂。以他的人生经历，Trevor本人肯定是个比他所主持的搞笑节目更深刻得多的人。 五星推荐这本Trevor本人亲自录制的有声书。 其实看这本书时我还在微博写了一段关于Trevor母亲故事的读后感，但有点太长了我不想再复制粘贴一遍，就直接把链接放这儿吧。 This is a great autobiography! Even better if you listen to the audiobook performed by Trevor Noah himself. I’m not a fan of Trevor’s show, though. In fact, I find his childhood stories are far more interesting than his comedian content. 冬日笔记 Winter Journal | Paul Auster 美国作家、导演保罗奥斯特的老年回忆录，趁冬天还没结束读完。作者以事无巨细絮絮叨叨但很有趣的方式快速回顾了自己到写此书时六十几岁的一生，像是独立小电影快进镜头组合。 人的视角随年龄、经历的增长而变化，这一点年轻人很少有空想到。看到保罗奥斯特一生搬无数次家，谈无数次恋爱，吃无数食物，很多次运动受伤，经历多次死里逃生的意外，很多很多次旅行，很多次伤心——我就觉得啊，人生真的很长，一时的小得小失其实轻飘飘地像花粉，重要的是要多去经历多去不同的地方多和不同的人产生连接这样我到了六十岁时才能有东西写进回忆录呀。 另外，巨长无比的并列列举真是不错的写作技巧，既占篇幅又烘托氛围。我学到了。 This is a memoir of Paul Auster, written in his sixties. His words have a certain cinematic quality that draws you in. It’s healthy to read older people’s memoir and do some self prospective retrospection (ft. Stoicism) at the same time. Technology 之前写了一篇单独的技术书评集合。 Check out the separate blog (in English) here. Fiction Novels 纽约三部曲 The New York Trilogy | Paul Auster 我预感这一本（三册）是今天所有提及小说中最多人会感兴趣的。因为这一本最符合强剧情性的标签（神秘小说），充满悬疑和紧张气氛，而我个人不论看书还是观影都不太喜欢过多drama，所以看的这种类型的小说不多。翻开这本书是因为我以为它和《布鲁克林的荒唐事》风格差不多。但这本的阅读体验还是很不错的，毕竟是保罗奥斯特的成名作。 虽可以勉强归为侦探小说，但和一般的侦探小说很不一样，因为《纽约三部曲》里的故事没有所谓的结局。生活中突然出现了一个谜团，这个谜团越来越庞大，但主人公解决不了，反而越陷越深，然后故事戛然而止。 我理解的本书大意（剧透提醒）：我与他人的关系，即我与自我的关系；而我与自我的关系，可能是我也不想太深入探究的。人遇见死亡也不一定能遇见自我。Self might be less of a promise than death. 喜欢的人会很喜欢，对这种主题不感兴趣的人则会觉得无聊。 I like Paul Auster’s work a lot! This series of novels has a distinct style and covers a classic but not-easy-to-convey theme (one’s relation with self, as I interpret it). 且听风吟 Hear the Wind Sing | Haruki Murakami 「如果你志在追求艺术追求文学，那么去读一读希腊人写的东西好了。因为要诞生真正的艺术，奴隶制度是必不可少的。而古希腊人便是这样：奴隶们耕种、烧饭、划船，而市民们则在地中海的阳光下陶醉于吟诗作赋，埋头于数学解析。所谓艺术便是这么一种玩意儿。 至于半夜三点在悄无声息的厨房寻找电冰箱里的食品的人，只能写出这等模样的文章。 而那就是我。」 这是我对此书印象最深刻的段落。此外，我出于打卡心态看了村上春树的处女作《且听风吟》，除了文风青涩清新外没留下什么特别印象。 舞！舞！舞！Dance Dance Dance | Haruki Murakami 一本看完只想去夏威夷度假的小说！ 这本应该是最近两三年看的村上春树的小说中最喜欢的一本。毕竟，比起反战反思和对日本现代社会的思考，自然是“在高度发达的资本主义社会中寻找自我边界”这个主题更能打动我啦。 《舞！舞！舞！》这本书是1987/88年写的，那个时候日本确实处于经济最盛泡沫即将破裂的顶峰。我只能说，发达国家人民已经反思了几十年的“资本主义与寻找自我”课题，我们也不会躲过的…… 摘几句我很喜欢的片段—— 「我花了很长时间，如同融化冰块那样缓缓地、逐一地谈着自己，诸如自己怎样维持生计，怎样走投无路，怎样在走投无路之中虚度年华，怎样再不可能衷心爱上任何一个人，怎样失去心灵的震颤，怎样不知道自己应有何求，怎样为同自己有关的事情竭尽全力而又怎样无济于事等等。我说我觉得自己的身体正在迅速僵化，肌肉组织正在由内而外地逐渐硬化，我为之惶惶不安，而好歹感到同自己相连的场所惟此一处而已。」 「呼唤你的是你本身。我不过是你本身的投影。你本身通过我来呼唤你，来引导你。你将自己的影子作为舞伴一起跳舞。我不过是你的影子。」 One of my second-favorites among all Murakami’s novels I have read. 坡道上的家 The House on the Slope | 角田光代 Mitsuyo Kakuta 82年生的金智英 Kim Ji-young: Born 1982 | Cho Nam-joo 两本小说主题相似，讲述了一位东亚现代女性在初为人母时面临种种现实和精神上困境的故事。 比起让未育女性来看此书以生育可能带来的困境，或让已育女性看书以寻找共鸣和慰藉，我觉得最有社会意义的是鼓励更多男性阅读。在理解“子宫是原罪”这个真相之前，男性不太可能做到真正理解女性。 两本选一我推荐《坡道上的家》。毕竟是角田光代的作品。文学性价值高于《82年生的金智英》，写法更有新意，主题更深刻，人物形象也更现实。 Two East Asian novels with very similar themes: physical, mental and social challenges faced by modern first-time mothers. It’s more meaningful for males to read such books instead of females, although it’s not very likely to happen. A Whole Life | Robert Seethaler 年初听同事推荐后看的一本奥地利小说。 小说用149页文字描述了一位名叫Andreas Egger的孤儿在上世纪的奥地利一个山中村庄里长大，历遍艰苦童年、雪崩、不幸婚姻、战争和工业化的一生。苦难一个接一个，但一个普通人却也可以一一接住吞下并把它变成自己的一部分。这样虽波折但非常普通的一生，才让人感受到人的尊严和勇气所为何物。 封底有评论家把这本小说与《斯通纳》相提并论。我个人觉得，《斯通纳》的文学性和哲学深度明显高于此书。但《斯通纳》这样的一流小说不能天天看，一方面优秀小说没那么大的供应量，另一方面绝大多数人也受不了天天如此阳春白雪形而上学掏心挖肺。所以大多数时间，以次一流的但依然算得上优质的书来打发时光，是能够为继的精神生活方式。 摘一段原文吧： 「On one occasion he almost boxed the ears of a young townie, who stood on a rock and, overcome with joy, closed his eyes and turned round and round in circles until he plummeted onto the gravel field below and had to be carried back down to The Valley by Egger and the rest of the group, sobbing like a little child.」 这段发生于Egger从俄国劳工营回到小村庄后，无法再从事以前的工作，无意中找到为游客当山中游览向导的工作，但在数年后Egger终于受不了这群对大自然一惊一乍的来自现代城市里的游客，决定不再干向导了。 我看到这段后忍不住笑了，因为这描述得太真实生动。一转念，我联想到，我读这本书里故事的过程，其实和这个城镇年轻人看到高山就为之肤浅感动的场景没太大差别。这样一想，似乎就没什么好笑的了…… 以上书评是四月刚看完时写的。年末再回想此书，却没有太深刻感受了。可能因为我对雪山里的乡村生活没太多共鸣吧，但很多欧洲人确实是在类似小说中描述的自然环境中长大的，长大后也要每年夏天去山区徒步，冬天去雪山滑雪，自然更能与小说内容产生情感链接。 A good read, but definitely not comparable to Stoner. 人间便利店 Convenience Store Woman | Sayaka Murata 这是一本我不太理解为什么能得芥川奖的书。 直到看到前95%时以为这是个在正常家庭长大的反社会人格女主将在人生某阶段黑化反扑的故事，结果在絮絮叨叨一堆对日本社会男女社会角色僵化的夸张（但不知道有何意义的）日剧风评论后竟能把结尾落回“便利店”？我叹服了。不推荐。 Not recommended :( 伊甸园外 | 神圣午睡 这是我在微博上最喜欢的博主之一 @神圣午睡 的第二本原创小说！ 《伊甸园外》和第一本《贪心记》一样，都是不落俗套的都市职场女性小说。对比《贪心记》，明显能看出这本小说的文风更成熟，情节更丰富扎实。除扣人心弦且真实动人的感情线外，竟还充满了大量职场成长心得，读起来还很轻松有乐趣。总之非常推荐！ 想看此书的读者请移步豆瓣阅读。 Peotry 摇摇晃晃的人间 Still Tomorrow | 余秀华 Xiuhua Yu （美的）生活需要诗。 写好诗需要些天赋，读诗却没有门槛。从诗集中摘了两段放在下面—— 「我爱你 巴巴地活着，每天打水，煮饭，按时吃药 阳光好的时候就把自己放进去，像放一块陈皮 」 ——《不再归还的九月》 「那些草被雨压弯，很快又弹了起来，它们不知道 一个卑微的人和它们差不多。他们的背就是为了 一次次弹起命运的重压，但是没有另外一个人会知道 他们和它们来不及互相靠近 就各自枯萎」 ——《手持灯盏的人》 Contemporary poems from a female Chinese farmer with cerebral palsy. Summary A casual list of my best reads this year: 《Head First Design Patterns》 《Little Black Stretchy Pants》 《Courage to Act》 《Network Up》 Further reading Tech book recommendations, 2020 (in English) What I read in 2019 (in Chinese) What I read in 2018 (in Chinese) What I read in 2017 (in Chinese) " }, { "title": "My Technical Book Recommendations, 2020", "url": "/sinantang.github.io/pr-7/posts/tech-books-2020/", "categories": "Book Review", "tags": "reading, learning, python, algorithm, programming, books, design pattern", "date": "2020-12-20 00:00:00 +0100", "content": "At the end of every year, I write a review of books I have read in the past year. This year, I’m splitting the book reviews into 2 blogs: tech and non-tech books, as they probably cater for different audiences. Check out the full 2020 book review blog here. This year, I read a couple of technical books, some of which were a real intellectual delight to read. Maybe you would find them helpful too. Head First Design Patterns | Elisabeth Freeman &amp; Kathy Sierra Finishing reading this 600+ page book is officially one of my 2020 achievements. Head First Design Patterns is one of the most enlightening books I have read in the past few years. A big thank-you to my former colleague who recommended this book to me instead, when I put my hand on the “notorious” Design Patterns: Elements of Reusable Object-Oriented Software. This book is inspiring in many ways. For one thing, the authors really write in order for readers to understand, instead of just displaying pages of information after information. I have learned a few things about how to grasp abstract or difficult concepts as well as how to get them across from this book. For example, loading a message with emotional context (e.g. surprise, humour or interest) is a useful trick to leave a more noticable impression on the recipients, because our brain is wired to pay attention to the biochemistry of emotions. Similar techniques include usage of visual cues, conversational style, stories and more. Tricks like those are all over the place in the book, making it by far the most fun and joyful technical book I have ever experienced so far. If you happen to be one of the victims of dull and serious-looking tech books, try this one. Second, I thoroughly enjoyed the content itself too. I’m still quite new to design patterns. Getting to look at code at the patterns level is a paradigm-shifting idea for me. After I started reading this book, I’ve started to recognise places in the codebase where I could use e.g. the factory pattern or the iterator pattern. In addition, it makes it easier to read others’ code and communicate using a shared vocabulary after I know patterns. Therefore even if you are not interested (!) in a delightful reading experience, this is a great pattern beginners’ book solely for practical purposes too. It explains the important design patterns very well and truly drives the OO basics and principles home. Data Structures and Algorithms with Python | Kent D. Lee &amp; Steve Hubbard One silver lining of 2020 is that many publishers and universities have made available lots of valuable content online for everyone. I downloaded this E-Book for free when Springer put together a list of specialised e-books online free of charge for a short while this year. Thank you, Springer! Most algorithm books are not written with Python, so this one (it’s designed as a university textbook) would be a fair option if you are a Python programmer. One thing to note about this book is that the code quality is not at a professional level. Quite a handful of code snippets are not compilable, likely due to written in an outdated Python version and not enough effort invested to proof-running of the code examples. Besides there’s not much style or patterns in the code. Nevertheless, it’s a good solid review of Python data structures for me. The authors discuss lower level, in-depth Python-specifc knowledge, e.g. how and why lists in Python are implemented internally in a certain way and how that affect the computational complexity of various list operations. If you type along, you will gain a good understanding of what the built-in data structures and also fancier ones like trees and heaps look like in Python. I like going back to the fundamentals from time to time, because that’s what everything else is built upon and that’s what I need to acutally understand a concept. Besides, when you start to think about performance, sound knowledge of the basic data structures is always helpful. 我的第一本算法书 Algorithms Illustrated | 石田保輝 &amp; 宮崎修一 Originally written by 2 Japanese authors (「アルゴリズム図鑑」or Algorithms Illustrated) and translated into Chinese and Korean, this book has been a hit in the East Asian market. After reading it, I’d say that it deserves its fame. This book would be a really good starting point for someone who has never learned about computer algorithms. I wish I could be one of the those lucky people. The more learning experience you have, the more you realise the privilege an absolute beginner has – they can still choose how their journey would begin in that new field. A bad start can have as lasting negative impact as one’s life. Just think about the many kids who hate a certain subject for years after encountering a lousy school teacher. This book explains 7 data structures and 26 algorithms through colorful step-by-step illustrations and highly accessible language. Even though I already knew most of the information, I still learned something new. For example, it occurred to me for the first time why stacks were used for DFS and queues for BFS algorithms. I hope this book would get translated into more languages to help pave a less painful learning journey into algorithms for a wider audience. Continuous Delivery: Reliable Software Releases Through Build, Test, and Deployment Automation | Jez Humble &amp; David Farley As a person relatively new to the tech industry, this book is an eye opener for me on the software engineering landscape prior to the new CI/CD norm. Although it’s a classic, I am not sure whether this textbook-like 400+ page book is worth recommending. In my opinion, in most cases, if you are still working without CI/CD environment on production software, then you should either introduce it to the company or switch to another more modern one, rather than learning how to ship CI/CD-less. Grokking the System Design Interview | educative.io I prefer text-based tutorials to videos, as 1-minute spent in reading text gives you much higher density of information than 1-minute spent on videos. In addition, text-based content is more up-to-date (since it’s lower maintenance) and in bigger quantity than content in audio or video format. So when I found this e-learning site (educative.io) focused on offering textual content, I was willing to give it a try. System Design is a relatively new but interesting topic for me. I have had some experience crafting distributed system architecture at work but never formally learned about it. Often the most efficient way to learn a new field is to study the exam materials directly. That’s why I took this course on system design interviews. Since the content is in text, it’s basically like a succinct book. The course covers both the fundamentals, such as load balancing, caching and database design, and a handful of system design case studies. I had pretty positive experience reading through the course materials, as I recognised many concepts from my work for which I didn’t know the exact term before. I find it useful to accumulate a shared vocabulary to communicate better with other engineers, and a generalisable step-by-step approach to system design problems. Head First JavaScript | Elisabeth Freeman &amp; Eric Freeman I love Head First books, but I didn’t get a lot out of this one, mostly because I already knew some basics in JavaScript and programming in general, so I should have started with something at a bit more advanced level. I’d still recommend it for an absolute beginner. Programming TypeScript: Making Your JavaScript Applications Scale | Boris Cherny There are not many books talking about TypeScript, and there’s a reason: it’s probably not worth the trouble to write or read a TypeScript book. TypeScript (JavaScript with typing) is not classic or sophisticated enough to write about it in a lasting medium. In the end, I find the offical documentation online more informative and surely more up-to-date than books. " }, { "title": "Ask Me Anything - 2020 winter edition", "url": "/sinantang.github.io/pr-7/posts/ama/", "categories": "Self improvement, Thinking Tools", "tags": "career, problem solving, learning, planning, communication, feminism", "date": "2020-12-12 00:00:00 +0100", "content": "这个月在微博（@思南说）上搞了个回馈读者的 #AMA Ask Me Anything 的活动。我觉得其中很多问题和回答很有参考价值，所以在此分类整理出来。第一次发起此类活动，我自己玩儿得很开心，也谢谢大家参与！ 合集之二请点这儿。 职场 问：我发现，工作能力强但穿着打扮朴素（不化妆不做发型不常买新衣但干净整洁）的女性，她们会被身边的同事领导甚至家人建议“收拾”下自己。慢慢地她们会对自己产生怀疑，对外貌不自信。所以，人在职场是必须要化妆精致才更有竞争力（如财务工作）吗？我觉得男性都没此苦恼，女性也可不必，但现实…… 答：劝职业女性好好打扮（说是“收拾”其实就是指打扮化妆）才是降低她们的竞争力呢。打扮这件事可以花很多时间，对于大部分职业（比如你提到的财务工作）来说，花在打扮上时间的回报率远不如直接投入工作的回报率。我在德国工作的这几年，从没在职场听到过任何人对同事外貌上的评判，在职场出现这种评判是件很不职业不文明的行为，在德国可以直接报告给HR。这从侧面反映了一个社会的文明程度。当然这些大道理我们都懂，大环境一时也改变不了，我们在现实生活中该如何应对呢？我觉得，在公司可以半开个玩笑把这类没意义的对话礼貌地结束，比如如果别人说“你应该多打扮一下再出门”，你就可以说“我今天好好收拾了呀，花了10分钟呢”（开什么玩笑取决于你个人在职场的人设哈哈）。不止是这类行为，所有让你感到不愉快但需要保持礼貌的场景，都可以通过开一个合适的玩笑来转移对话焦点。若在家里，可以直接跟家人说：我不觉得打扮很重要，可不可以不要再提这件事了，你每次提都会让我感到不开心。 虽然大家明白这些不愉快现象背后的原因，比如男女不平等，但在线下现实生活中最好不要试图通过嘴皮子来“教育感化”任何人。社会发展是有阶段的，我们只能尊重客观规律，在无法改变大环境的前提下尽量改善自己身处的小环境。 . 问：你好！我是国内5年经验女程序员，刚过三十，工作用的一直是10年前的老框架。现在想跳槽，JD要求目前流行的技术和框架。当前公司内部转岗困难，无法获得真实项目经验，只能靠业余自学。 我想问一下，如何在求职时让面试官认为我自学的这部分值得他付钱呢？ 答：如果是我的话，会真的做一个小项目，放在GitHub上，或者帮别人做个项目。 . 问：你在什么情况下会考虑换工作？ 答：1. 新工作成长上升空间更大，2. 新工作薪水高不少。能同时满足两个条件最好，不然只满足第一条也是很好的。我曾经就因为成长空间而跳去薪水更低的机会。刚开始犹豫后悔了一段时间，但后来加了几次薪也就加回来了。 . 问：请问你觉得应该怎么和老板提加薪？ 答：1. 搞清楚所在公司的加薪升职规则，小公司比较灵活，稍有规模的公司会有考核加薪周期；2. 加薪前提是业绩，所以平时一定要把自己的业绩啦项目啦做的事都清楚记下来，等考核时好好表一番功，之后自觉的老板会主动提加薪，不自觉的你再跟他约时间谈薪水。具体技巧有时要看具体老板，比如多提几次老板觉得烦了可能就答应了，再比如可以越过加薪直接要求升职，就算被拒，老板不想让好员工失望，很可能就会用加很多薪来弥补期望落差。 . 问：想问对一起做事的同事应该有要求吗或者是要分人对待吗？我是属于对自己要求比较高的人，做事情都想尽力做到最好。但日常工作是个配合过程，我只是其中一个环节，然后就有时候会对工作联系最密切的同事也要求比较高。但感觉同事都是将就能过就好，我提出问题了就会烦，高要求是不是应该留给自己？ 答：这也是曾困扰过我的问题。越早学会在头脑中容忍一种以上价值观，就能越早接近幸福 :) . 问：很想听听你对转行的想法，我记得你提过会考虑法律行业，你会怎样找切入点？或者你会怎样找方向？中途转行会有劣势，很想知道你会怎样思考。谢谢。 答：十年后的事情我还没想那么清楚呢。也许到时候想法变了也完全有可能呀。也许你是想问如何找职业方向，和转行没什么必然联系是吧。我以前写过一篇如何寻找职业道路的文章，可以在我的博客站点内搜“规划”找一下。 . 问：我现在申请到了一个欧洲（荷兰）计算机语言学的硕士，不过不清楚这个学校就业怎样？在哪个论坛可以查到，另外这个学位是ARTs，在欧洲从事NLP工作会不会要求是理工科学位呢？ 答：荷兰学校就没有那么了解了。我比较清楚德国英国哪些大学的NLP专业强。建议你找到该学校该专业已毕业的师兄师姐问一下他们的就业情况。 . 问：想问问欧硕（计算机语言学）毕业去德国找工作的可能性。比如难度大不大，对德语要求等等。谢谢～ 答：这种问题不太好答因为找工作难度取决于很多因素，比如个人能力、个人要求、大环境和运气等。但笼统地说一下，我认为归在 NLP/AI 领域的大部分工作机会对技能要求存在侧重点，包括 1. 软件工程，2. 算法/科研，3. 数据科学。也就是说提高找工作成功率的要点是选一个主要技能方向，要么有编程能力，要么懂最新算法，要么有普适的数据分析能力。有余力的话，再从剩下两个选项中选一个作为次要/交叉技能。最后，对具体行业有想法的话，有些行业知识就更完美了，比如语言学。不过行业知识一般可以通过工作经验来积累。 对德语的要求要看公司。会德语当然比不会的工作选择多，但也有很多科技互联网公司的工作语言是英语，比如柏林的很多（不知道有没有过半数）公司并不会要求德语。 效率 问：请问工作时有时候明明知道当下要去推进进度，自己却一次次拖延，该如何把自己抓回来呢？ 答：我会主动提前截止日期或缩短实际工作时间。比如今天8小时内需要完成任务A，我知道自己只需6小时就能完成，所以常忍不住先拖延一会儿。这种情况下我会给自己设个小挑战，挑战自己前4小时就做完，这样就算比较无聊的工作也会显得有意思。早点做完剩下时间就可以看书学习锻炼。这是一种“游戏化“思维，把你没动力但需要去做的事转换成一个挑战游戏，除了提高效率外还可以为生活增添乐趣。很多大人会用这种方法来帮孩子完成任务，但很少想到大人自己也需要以玩乐的形式来激励自己。 追加提问：请问如何确定需要多少时间来完成某件事呢？很多时候对做完一件事情（比如说要写一份平时不常写的长篇报告）所需要的时间没有概念。 答：在开始做一件事前预估下自己需要多久，做完后再对比时间差，分析下预测误差原因在哪儿，下次改进。循环多次可提高自己的预估能力。 个人 问：想问问对于想通过出国（目前考虑荷兰和北欧）读博而跑路的未婚未育女性，申请学校时年龄（30＋）会不会成为一个阻碍呀？ 答：年龄是你会遇到的最小障碍……或者说跟真正的现实障碍（钱、就业、语言等）比起来，年龄真的不算什么。 热心网友补充：与其说年龄限制，更多是思想上给自己的负重。加拿大班里的同班同学是个印度大叔，儿子和我同龄，他还上过战场挨过枪子儿。另一个同学是巴西来的单亲妈妈，以前是空姐，女儿二年级了，还有生病手术的老母亲，但她天天可欢乐了，特别fierce特别乐观。 我：我就觉得，人生路上真正的困难已经很多，就不要浪费时间在像“年龄”这种排位很低很低的问题上了。 . 问：想问一下如何提高自信。 答：1. 找到自己擅长的、可以从外界获得正向回馈的事，多小都可以，这样就有了一个能够有理有据自信的基点。2. 不要无缘无故莫名其妙自卑，比如刚才有女生提到年龄问题，但“年龄”本身不是一个值得自卑的原因。 . 问：总是有“冒名顶替症”，不相信自己的能力配得上自己的待遇，对自己的观点想法没信心，有什么办法么？ 答：理论和大道理可以讲一堆，但我觉得对于像我们这种想太多的人来说，道理看得太多，以至于忘记以肉身存在于世界的人类是能够且需要以实践来改变想法的。对自己观点没信心就多表达，若工作上表达有压力就写成微博写成文章，看看自己观点是不是真的不行。行的话就知道自己不是冒充者了，不行也能认识到自己现有的不足之处。 . 问：你觉得结婚的意义是啥。最近思考这个问题，觉得好像不生小孩的话，就是换了job title但没换JD。本来也不需要一张纸来证明什么，也不会出于同龄人的压力或父母的期望就步入婚姻。所以我自己觉得好像没有小孩的话结不结婚都无所谓。你怎么看？ 答：你说的很有道理。婚姻本身的功能的确在消减，确实领不领证在生活中的区别越来越小。正因为现代社会对婚姻的观念正在变化，我觉得，现代婚姻的最大意义也许在于检测结婚双方对婚姻的态度，以衡量两人的价值观是否相合。举个例子，法律意义上的结婚是经济关系的绑定，从积极角度来看，结婚相当于个人人生风险的对冲。比如今年疫情，很多行业受到打击，夫妻两人大多在不同行业就业，经济不好时两人收入同时大受影响的概率小很多。但更重要的是，要知道对方看待“婚姻是风险对冲”这件事的态度：ta潜意识里是认为结婚是给自己的人生找保障找兜底呢，还是认为结婚是个为对方为家庭付出的机会。如果是前者，那与此人结婚就是件风险很大的事；如果是后者，那其实结不结婚区别不大，因为ta已经准备好了为家庭付出。这么一分析好像不论如何都不必结婚，但我想说的是，搞明白双方对婚姻的期待比是否结婚更重要，这大概就是婚姻制度存在的现实意义之一。 . 问：你最努力的时刻是什么时候？ 答：这种问题就算答了又有什么意义呢……我不想自我感动也不想感动别人。如果需要打鸡血的话可以去看励志电影。 . 问：思南考虑过父母养老的问题吗？我最近一直在为这个发愁。 答：父母需要钱的话给钱，想来找我的话可以帮忙安置，但不会仅因为父母养老而做出影响自己生活的选择。 学习 问：请问你觉得你的独立思考能力是来源于身边环境熏陶还是天赋秉异呢？一路关注下来我觉得你这方面真的很好，我感觉我在你这个年龄是糊里糊涂。现在我自己也有孩子了，我希望能够帮助她们培养独立思考的能力，未来能有清晰的人生态度，不会随波逐流。谢谢。 答：首先谢谢夸奖，我自认思考能力在人群中排中上，但也没特别强，比如复杂政治问题我也看不懂。一小部分是天生，比如小时候接触到太离谱的洗脑言论时我心里会打个问号，但那时也不懂如何去分析。其实我觉得对真实真理的追求是大部分人的天性之一，这个天性就足以让人迈出独立思考的第一步。当然有些人这部分天性本也不强，又在成长过程中没被发展起来，也许成人后对此就不在乎了。思考能力对平均智商及以上的人来说是一种只要想发展就能通过练习来提高的能力，但为什么很多人并没有慢慢提高自己的独立思考能力呢，我猜是因为对此不在意、没追求。比如，不会觉得想不明白一件事是件很难受的事，不会觉得全盘接受别人的思想灌输是件不舒服的事，或者就算觉得不对劲，也只象征性挣扎一下就放弃了。如果想提高独立思考能力的话，推荐我已推荐过很多次的一本书：《超越感觉 beyond feelings》。这本书非常具体地提供给读者很多怎么去思考的思维工具。有人评论此书“懂的人不用读，不懂的人读了也没用”。我不同意。例如此书提到，在判断一观点前应充分搜集正反双方的论点论据再一一分析是否合理。这就是一个非常具体可操作的建议啊，人只要能上网就能执行。但在现实中有多少人会在下结论前不带评判地去客观了解一下反方论点论据呢？ . 问：请问姐姐，英语论文要怎样看和写呀？ 答：以前写过如何看论文，我的博客站点内搜“论文”，或在我微博搜“论文”，能找到以前拍过的一个视频；要写好论文一是要学会英文论文的套路结构，二是内容上逻辑清晰扎实，三是多写多练找人反馈。 . 问：请问思南怎么提高雅思写作。 答：雅思写作其实非常八股文啊，对着题型掌握套路再多练就肯定没问题。我记得我考的时候（七八年前）参考过慎小嶷的书，印象很不错。 出国 问：想问问思南是怎么到德国的，除了德国还在其他国家生活过吗？能比较着谈谈生活工作各方面的感受吗？谢谢啦～ 答：一开始来德国是读研，读完就留下工作了。德国工作蛮轻松的，到目前为止遇到的职场环境也都不错。之前在英国留过两年学。我很喜欢英国的生活！当地人友好，普遍有点幽默感，审美在线，气候温和，环境建筑也美。还享受了两年免费医保 :) 留英期间实习和打工过，我觉得也不能算作正式工作经历，所以工作方面除了工资不高外也不好说。生活方面德国和英国比较大的差异在于，德国官僚系统僵硬不灵活，不能允许太多例外存在，比如考研是不允许换专业的，想换专业得从本科重新读。但英国很多事落实起来就很灵活，可能因为资本主义市场经济贯彻得更彻底吧，不像欧洲大陆更社会主义。另外网络信息建设也差异较大，在这方面英国更接近于美国。除欧洲外，在美国出差过几个月算生活过吗……但大家都说加州不代表美国 :) 只说我在加州的经历的话，很大一个感受就是美国人特别包容不同文化。在欧洲，因为没有移民文化，作为中国人走在街上你能感受到当地人对你有些一半无知一半好奇的目光，他们很想知道你从哪里来。但我感觉美国人真的不在意这个，他们可能对你为什么选择来这里更感兴趣。工作方面我对美国人的 competitiveness (竞争意识) 印象很深，和欧洲人追求生活工作平衡的态度很不同，如果是在工作上很有追求的人大概在美国的职业发展会快很多。 . 问：什么类型的人适合移民去德国生活？ 答：这个问题真的没法回答。最好的方法之一大概是去德国工作生活几个月，体验一下自己所在社会阶层的真实生活状态。 . 问：我有个问题，最近好多德国公司在计划按socialplan裁员，作为年轻无子一族是优先被考虑的对象，对这种社会秩序有些失望，想换到别的国家了。想知道你有哪些其他心仪的工作地点推荐吗？ 答：我是这么想的：疫情期间裁员短工对于有些行业来说确实无法避免，我作为无子的年轻人，也会支持先保中年有孩员工的工作，如果情况反过来，难道不是更没人情味吗？在德国裁员按劳动法走赔偿金什么的都少不了，在很多其他国家就不一定了。 " }, { "title": "Python + NLP Workshop II - Develop a Python service for sentiment analysis", "url": "/sinantang.github.io/pr-7/posts/python-workshop-two/", "categories": "Natural Language Processing", "tags": "learning, python, programming, NLP, Linguistics, algorithm", "date": "2020-12-04 00:00:00 +0100", "content": "Here are the slides from my「Learn Python with NLP Projects」workshop series, Part 2 on the 4th of Dec, 2020. Source code used in the workshop here. Find slides for Part 1 here. " }, { "title": "Python + NLP Workshop I - Publish a Python package for spelling correction tasks", "url": "/sinantang.github.io/pr-7/posts/python-workshop-one/", "categories": "Natural Language Processing", "tags": "learning, python, programming, NLP, Linguistics, algorithm", "date": "2020-11-27 00:00:00 +0100", "content": "Here are the slides from my「Learn Python with NLP Projects」workshop series, Part 1 on the 27th of Nov, 2020. Source code used in the workshop here. Find slides for Part 2 here. " }, { "title": "读《little black stretchy pants：the story of lululemon》", "url": "/sinantang.github.io/pr-7/posts/little-black-stretchy-pants/", "categories": "Book Review", "tags": "reading, books", "date": "2020-10-12 00:00:00 +0200", "content": "《Little black stretchy pants: the story of lululemon》一书是lululemon品牌创始人Chip Wilson的自传和创业故事。这本书做到了集商业、管理、创新、育儿和亲密关系观点于一体。五星推荐给所有喜欢阅读商业题材的读者！ 这本书前半部分写的是Chip年少时的成长经历，创建第一个公司Westbeach和第二个公司lululemon的故事，还有Chip对运动时尚潮流和与女性主义崛起的预测与解读，可读性非常强，内容特别有意思。Chip拥有预测5-10年后社会新潮流的天才直觉，成功预测了滑雪、瑜伽、女性崛起、正念等潮流。这一点真是令人赞叹。比如Chip于1998年就看到瑜伽会在未来风靡的趋势，十多年前就意识到冥想正念将会是下一个潮流（做个对比：我自己是18年才注意到冥想已经成为潮流，并想到冥想产业肯定会带来巨大商业价值）。 Chip年少时的一个经历给他人生带来了很大的积极影响。在他读本科时，因为继母工作福利（具体记不清了），可以申请到免费机票，他就在大学期间（1976前后）在全球游历了五六十个国家，在当时可以说是相当前卫的行为了。现在由于商业发展和网络交流，全世界其实已经越来越趋同，特别是新兴城市，随便拍张城市照片，说是哪个国家哪个城市都有可能。但在Chip全球旅行的年代，不同国家不同文化之间的差异还很大，不同文化经历的洗礼带给一个二十岁年轻人的影响，可以说是无法测量的。在书末的致谢中，Chip还特意感谢了因为继母蹭到的几十张免费机票 :) . 后半部分写的是lululemon上市后的发展，更多是对商场上勾心斗角细节的揭露。上市后lululemon的运行渐渐脱离Chip对公司发展的规划理念以及最初设立的公司文化，最终由于和董事会的分歧越来越大，Chip辞去lululemon董事会常务职务，彻底从lululemon的日常运营和战略规划事务中剥离出来。后半部分让读者看到，真实商场远比初创企业创始人的理想主义世界观要复杂负面得多。除了创始人和早期员工外，其实大部分人都只是为了分一杯短期利益的羹而加入lululemon。我觉得吧，普通基层员工情有可原，但董事会成员和CEO也要为了短期利益（股价、分红、面子）而坚决牺牲对公司的长远规划，确实是让人唏嘘。也许这是大多数公司成长壮大之后不得不走的一条路径吧。管理大公司确实很难照搬小公司的成功管理经验，毕竟体量和复杂度摆在那儿。lululemon以牺牲独特文化和高速增长为代价成长为一个更为中庸稳妥的企业后，得到的是不管谁来接任CEO或管理层也不会太影响经营的大公司冗余优势。当Chip还是lululemon的企业文化灵魂人物时，如果Chip本人突然退出公司，或遭遇不测，或只是改变心意，那lululemon的前途想必未卜。淡化Chip的核心地位后，企业才具备脱离个人影响的抗风险能力。 . 「This is a book about ordinary people who took an opportunity to be creative, to be innovative, and to maximize their potential.」除了lululemon的历史外，这本书里还记录了很多Chip Wilson对人力管理的理念。lululemon创立早期时企业文化非常特别，Chip非常重视对员工长期发展的投资，比如所有员工都要到门店里实际工作一部分时间，所有员工都要参加Landmark Forum培训，所有员工都要写1/5/10年职场和人生规划。Chip希望帮助更多人破除恐惧，摆脱平凡，追求伟大。 在看这本书时，我得到一个与刷日剧《半泽直树2》时差不多的感悟：当你想做一件事或事业，会需要很多人合作帮忙才有可能达到目的。若你的目的并不单纯为了钱或权，也无法以钱或权作为拉别人加入的许诺条件，那你一开始可能很难招拢到人；但你一定要相信，人群中必然存在赞同你愿景的人，这一部分人虽然没有像你那么强的内在驱动力，但如果你可以保证他们不会利益受损（这一点非常重要，尤其是当你想做的事很虚无缥缈的情况下，比如“追求正义”），甚至有可能获利，那你就能成功找到一小群愿意帮你的人。 表面上看是你鼓动了别人，其实也是别人回应了自己内心的感召。 . 最后再推荐一句Chip Wilson的语录： 「If I complain twice about something, then either I take action or I shut up.」 我非常赞同这句话。总是无意识陷入反复抱怨纠结的人和有意识控制自己行为的人，大概是两个不同物种。我生活的目标之一就是尽量远离第一类人。 . 暂时就先写这么多啦。感兴趣的读者不要错过这本好书哇！ " }, { "title": "工作三年教给我的职场沟通技巧（二）", "url": "/sinantang.github.io/pr-7/posts/workplace-comm-2/", "categories": "Career as an NLP Engineer", "tags": "career, communication", "date": "2020-09-19 00:00:00 +0200", "content": "上一篇在这里。 今天继续写职场沟通技巧的第二篇。 Always Overcommunicate 追求沟通冗余是工作上反脆弱的重要方法之一。 以前的我是很烦把一句话一件事翻来倒去地讲的，后来职场教育了我。 简单地说，永远不要假设自己说过一次的事会给听者留下永久的正确的你所以为的印象。不要以为在一个会议上达成某个共识就代表整个团队就真的会那样去做。当时不提出反对意见的人不一定是赞同，他可能走神儿了，累了，或在查看邮件 review PR（谁敢说自己就没在远程会议中走个神儿顺手做点其他事呢），或没真正理解议题内容。 以前我会觉得沟通过一次的事没按预期进行，那肯定全是听者的责任；现在我已经完全把沟通看作一个持续的过程和双方共同的责任。如果我与人沟通的信息没有达到预期的效果，那我就要换不同的方式，再多沟通几次，永远不要不耐烦；如果跟某些特定同事的沟通效果总是不好，那我就可以换位思考一下，对于不同职位背景的人，要想办法从对方的角度以他能理解的方式来翻译同一条信息；再积极一点的，不要等误解的后果已经产生了再反思先前的沟通不足，而要不怕啰嗦不怕麻烦地提前一次次与别人确认：我们对此的共识是这样的，对吧？ 学会表功 “会不会表功”常常是职场新人和老鸟的修行差距之一。新人不爱表功的主要原因有二，一是以为同事和老板已经知道自己的成果业绩以及目前工作安排，所以不需要经常提醒他们；二是不好意思总向别人展示自己的业绩。其实，对于表功这件事，不妨把它看作个人完成一项工作的必要组成部分之一，而不是可有可无的选项。表功并非在夸耀自己，而是职业态度的一部分——这样想是不是就更容易战胜对表功的心理障碍了呢？ 消除心理障碍之后，我再简单谈谈表功的必要性。不论你所在的工作团队有多小，老板和同事对你工作任务的认知都肯定不如你自己对自己工作的认知。这句话虽然看起来像废话，但对于理解表功的必要性很关键。随便选一个你的同事，你可能知道他这两天具体在忙什么项目，但你清楚他上周、上个月、上季度的所有工作项目和工作成果吗？很可能你需要借助工作日历、Jira board、工作群聊等等才能想起一部分。这对于你的平级同事来说也是如此，对于老板来说，那就更不可能完美记住每一个下属的工作情况了。所以，表功其实是在帮老板、同事（主要是老板）记住你做过什么、正在做什么的有效方法。你这可是在帮你的老板收集给你发奖金、涨薪升职的证据呀。对于平级同事来说，常表功是在帮他们记住给你写 performance review 的材料，减少他们在得知你晋升的消息后产生“啊他到底有什么工作业绩竟然能被升职”的不平情绪。 具体怎么表功的方法很多。比如，如果你工作环境开每日组会（daily stand-up之类）的话，这就是日常表功的好机会。当轮到你（或你负责/参与的任务）时，你就要说清楚自己的工作进度，项目的进度，有什么困难，解决了什么困难，等等。而不是简单一句“和昨天进度差不多，没什么更新”。此时发言就要多以“我做了什么”来开头。 还可以在一个项目结束或到达一个 milestone 时，积极向所有人沟通，写总结文档，发到工作群聊，艾特同事。重要的项目结束后还要积极安排汇报（presentation）环节，邀请所有相关同事，好好准备此类汇报以给别人留下印象。 在公司的茶歇、与同事一起吃饭的时间里，也可以不经意地聊聊自己最近正在做的项目，比如遇到什么困难，自己如何解决的，或向同事取经如何解决等。 在工作群里，如果有人对一个项目提问，如果你负责或参与这个项目，那就一定要及时以准确全面的信息来作出回应。就算不直接负责这个项目，也可以帮忙艾特相关负责人。久而久之，连别组的同事都会知道，你在做什么项目，以及你是个积极负责的人。 表功这件事有点像在朋友圈发旅游照片。连续发几次发旅游照片，就很容易给朋友圈好友留下“这人天天都在出门玩”的印象。多多表功，就会给人留下工作认真努力有成果的印象。 利用好与老板的1:1谈话 很多公司有员工定期与直属上司一对一沟通的职场文化。这其实是个特别好的定期与老板沟通工作进度、职场预期的机会，但很多职场新人还不懂得该如何利用。 我的经验是，有效的1:1谈话内容主要可以分为三部分。 第一部分是讨论距上次1:1以来的工作进度和成果。比如最近几天在做什么项目，有什么难处、感悟，需要什么支持。这部分和表功的作用很像。难得老板的注意力此刻百分百集中在自己身上，自然不能错过自我表现的机会。 第二部分是基于个人职场目标的进度沟通。这里的职场目标可以是你每半年（或每季度）为自己设立的具体职业目标，如学一门新编程语言、推动一个小型项目等，此类目标一般是在老板知情的情况下每半年（或季度）更新一次。1:1对谈的时候，就可以主动告知老板自己在个人目标上的进度。职场目标还包括升职换组等更大的职场变动，这些也是你应该定期与老板沟通的话题。如果你想要升职，就要让老板知道，双方沟通对升职条件的预期。比如老板会列出，你想要到达的这个职位需要什么条件，他认为你现在与目标的差距在哪儿。针对这些差距，当你取得一点进步时就可以在1:1谈话时讲一讲。 第三部分就是比较轻松的 small talk（寒暄？）。以 small talk 开场，以 small talk 结束，可以让1:1对谈的氛围更轻松，增进你与老板两人的个人关系。small talk 的话题很多，比如最近的疫情和在家办公生活就是很不错的相互关心的话题。有人会觉得职场上与同事建立稍微个人一点的关系不靠谱，因此 small talk 很虚伪。其实我倒是觉得期待一个人不与任何一个处得来的同事建立一点 personal connections 是反人性的。职场上当然可以存在真诚的关切，只不过此类关心建立在一定条件之上。 " }, { "title": "在德国考驾照（二）：急救课见闻", "url": "/sinantang.github.io/pr-7/posts/first-aid/", "categories": "Others", "tags": "Life in Germany", "date": "2020-09-13 00:00:00 +0200", "content": "今天来上急救课（在德国申请驾照需要先上急救课），学到了不少非常实用的知识，值得在此记录下来—— 上半场： 一个普通人遇到需要自己挺身急救别人的紧急情况80%发生在家里，也就是绝大部分情况下我们需要急救的对象是自己的亲人。所以就算是为了自己亲友的生命安全，我觉得每个人（包括小孩）都应当接受急救课培训。 在德国，若目击到有人伤亡的紧急情况，目击者有见义勇为的法律责任，否则被抓到的话坐牢一年。 当你需要别人帮助时，一定要明确到个人，大声沉着地说出，“那边穿红色T恤的小伙子，对我说的就是你，你现在立刻拨打112急救电话，这儿有个人神智不清需要帮助。”此时，这个被你点到的人在法律上没有选择，必须承担这份责任，否则被抓到也是一年牢房。当你CPR累了时，也可以用相同方式点出另一个人来接替你。这种情况下，不明确到个人责任是没用的，“谁能来帮帮我”基本等于没人会主动帮忙。 在紧急情况下，个人情绪是生存的最大敌人。有相关统计，在遇到意外的人群中，女性成功得救的几率明显低于男性，仅仅因为很多人不好意思当众给女性做CPR。CPR需要脱掉伤者上衣，或者至少把前胸的衣物除掉，因为你需要清楚找到心脏的位置才能进行有效按压。今天急救课老师的一熟人就曾因不好意思脱掉一个女孩儿的上衣而直接合衣做CPR，结果全按胃上了，最后那个女孩儿死了。尤其是非成年人，穿着衣物不易判断心脏位置。 对于意识不清醒且失去呼吸的人，CPR是最有效的急救措施。施救者需要一直按压到医生到达现场，这个过程可能会很久，所以不能用力气，而是要以正确姿势，利用自身体重放松地进行心脏按压，这样你才能保存体力一直按到医生到来。这其实跟生活中很多事一个道理呀，如果你需要长期地反复地做一件事，必须得找到不那么费劲儿的姿势才能长久地做下去。 光看文字没用，事关安全的措施都需要反复演练直到熟练才能在紧急关头以肌肉记忆做出来。比如我大学的时候好像也上过什么急救课，但那只是被动听着，和真正在人身上做CPR肯定是完全不同的效果。 体力很重要，锻炼身体很重要，不然根本没力气把一个没意识的成年人从车里拖出来…… 我自己肯定需要很高很高的肾上腺素水平才能有可能拖动一个正常体型的成年男性……. 不要超重，不然受伤被卡车里的时候别人拖不动你。 急救课的下半场更刺激了😂 分别学了遇到心脏病发作、中风、骨折、烧烫伤、中毒、窒息病人的基本急救措施。具体怎么做就不一一列举了，就说说我从中体会到的最重要信息吧： 永远把自己的生命安全放在第一位。 当打开急救箱时，第一个要拿的东西是一次性医用手套，任何时候都要避免接触到伤者病人的血液体液呕吐物以免被感染、中毒。 当碰到需要救助的伤者时，第一步永远是“look, talk, touch”，如果对方神志清醒，那要征求对方同意才能进行救助；如果对方拒绝，则不可以强行救助，否则可能伤到自己。 在高速上遇到事故首先要给自己制造安全区，打灯，放警示三角标，穿反光背心，才可以下车救助别人。 也是因为这个原则，永远别做直接用嘴把蛇毒吸出来这一类的行为…… 记住自己作为 first aid giver 的义务与其边界。 以合理方式施救是公民义务之一，但你也要明白自己非专业医护人士，不可做超出急救范围的事，比如清理别人的创伤，在烧烫伤上涂不明药膏，给别人催吐等等需要医护知识才有权限做的事。 我觉得这一点应该扩展到生活的方方面面，不要轻易给别人医学建议，更别说给人胡乱治病了，例如有时会看到祖辈给孙子灌什么乱七八糟的药把小孩给治死了还一脸茫然的社会新闻。 当目击意外事故时，除了急救外还有些其他注意事项。 比如，你撕掉剪掉的衣物、伤者的随身物品不可以扔掉，需要保留下来留给警察或救护车工作人员。此外还需要保持警觉，过后把现场情况描述给警察。有时事故并非单纯意外，还可能是纵火、虐待等人为事件。 我想起之前看过的一条国内社会新闻，病人家属因医护人员把病人脏污的衣物扔掉而向医院索取赔偿。这样一想，这种情况下确实是医务人员不够专业的表现。 在德国所有车辆和办公室内都必须存储急救箱。所以当你在路上需要一些简单的伤口处理工具或需要救助别人时，可以随意拦一辆车，要求司机把车内急救箱借给你使用。此时司机不可以拒绝这个要求。 最后还是要强调一点，看和听的用处不大，安全与急救知识必须要上手学习+反复演练，比如我今天在假人身上做CPR时才体会到心脏按压真的需要按到很深（5-7cm），以及如何用自重来放松地做CPR。 " }, { "title": "工作三年教给我的职场沟通技巧（一）", "url": "/sinantang.github.io/pr-7/posts/workplace-comm-1/", "categories": "Career as an NLP Engineer", "tags": "career, communication", "date": "2020-09-11 00:00:00 +0200", "content": "上次在微博写到，网上教人如何改简历刷题过面试拿 offer 的文章很多，但好好写真实职场生存法则打怪经验的内容却相对很少。考虑到职场生活在人一辈子中所占的比例，这个对比确实有点不自然。因此我打算在言之有物的前提下多写写我对于职场看法的文章。今天的话题是「职场沟通」。 我认为职场上的沟通技能是几乎每个新人都需要且应该学习的工作能力之一。和一些硬技能（如写程序解数学题）相比，很少有没工作过就天生懂得如何与同事、老板、客户打交道的人。职场沟通属于社交的一种，而社交是个需要不断练习才能提高的能力。每个人悟性不同沟通能力的提高速度也不同，我自觉在这方面属于中等稍偏上且“眼高手低”（即悟性比实际外展能力高）的人，所以很适合通过写文章来和大家交流几个我工作近三年来领悟到的几个职场沟通技巧。 职场上女性少道歉，男性可以道歉 看到这句话，可能很多人就已经关上这篇博文了。但我确实想指出这一点：职场上女性道歉容易被人看作不自信没底气，男性道歉却容易被人当作谦逊有风度。其实这其中根本因素并不是性别。不妨想象一下，如果你的老板为一件事道歉，你是不是会觉得他很没架子人很谦虚甚至有点个人魅力；如果你的下属实习生习惯不停道歉，你是不是第一反应会觉得他一定又犯了什么错，而且人毫不自信甚至有点讨人烦。从上面的例子可以看出，同样的行为，别人会因为主体的地位不同而投射不同的评价。而我们确实还处于一个男权社会阶段，男性在职场上平均地位普遍高于女性，即使在欧美发达国家也依然如此。因此男女的相似行为被投射出不同含义，也并不完全少见。我并不想在此大谈特谈女性有多么弱势这类论调，只是想向女性读者点出这一点，如果你发现自己确实容易动不动道歉（包括为自己还没说出口的观点道歉——“我准备得不充分，如果下面内容有不足请大家见谅”之类），那不妨在下次开口前留意一下，刻意把所有包含了歉意的话语都过滤出去再说话。这会提高你的工作和话语在同事心中的分量。 这条并不等同于真的犯了大错也闭口不谈。适用的场景主要为，1/ 不要为还没发生的事道歉，2/ 没必要为小事次次道歉。 开会要发言，发言要大声 如果一个人不爱在会议上发言，那这个人很容易被其他所有人遗忘。特别是今年很多公司的会议基本远程的情况下，一个缄默的头像被遗忘简直太自然了。时间久了，这个人在同事那里就会很没存在感，没个性，没强烈意见，甚至有人会以为他可以任人搓圆捏扁。此外，从个人投入产出比的角度来看，一个你参与度非常低的会议，基本等于浪费时间，并不值得花这个功夫。 中国人的传统观念往往是沉默是金、以和为贵。但在大部分职场上，与人针锋相对好过永远沉默。当然，发言需要言之有物而不是要为博眼球而故意语出惊人。但在你实在没不同看法的时候，也可以积极地附和同事的观点说，“我同意xx的提议，这样做有xyz的优点。”一方面提高自己的存在感，一方面会赢得那个同事的一点好感分。或者还可以出面承担整理思路的角色，当场面有点乱时，是需要有个人跳出来冷静地说，“总结一下，对于a这个问题，现在分别有xyz几种不同方案……” 除了要多发言外，发言还要大声清晰果断。在会议上含含糊糊地小声讲话会让一半与会者走神，剩下那一半会不由自主地因这种讲话方式而给讲话内容打折扣。说话流利悦耳不易做到，但增大音量总还是可行的。好不容易准备好一次言之有物的发言，为什么不以与之相称的方式传达出来呢？ 如果你是个不爱发言不爱参与讨论的人，不妨为自己定下一个小目标，每次参加会议前都提醒自己必须要开口发言一次。 宁愿抢了别人话，也不要被别人抢话 这条会不会让人觉得这个作者怎么净提些充满攻击性的建议…… 我并不是鼓动大家都去跟同事吵架，而是想尽量把在中国文化背景下长大的女性在职场上容易掉的坑给指出来。抢话/插话这个细节能反射出一个人在职场中的位置：领导讲话时一般没人敢插话，实习生开口时就算被人抢话也没太有人会注意到。当想明白这一点后，我们的目标自然就是成为那个不容易被抢话插话的人。 那具体要怎么做呢？ 1/ 首先要有自己的观点。先得发言，才谈得上是否会被插话； 2/ 养成提前准备观点提案的好习惯。比如在一个重要的会议前，提前针对主题准备好自己想说什么，而不是毫无预案地到了现场才想； 3/ 当第一个开口的人。你提前准备好了发言内容，当到了相关议题时，就争取当第一个开口贡献想法的人。很多时候，在集体讨论中存在 anchoring effect (锚定效应)，即大家听到的第一个观点会影响整个讨论的走向和最终决定。 4/ 不小心“抢”了别人话时，先把自己的发言内容说完，再补个道歉。尤其是远程视频会议，大家不小心几乎同时开口发言的场景常常发生，在这种时刻，如果此时正在讨论的议题对你来说有些份量，那完全可以不停顿地先把自己的嘴边这句话讲完，再补一句“不好意思，我刚才打断你了，你想说什么？” 当然，这里需要区分在多人会议上发言与两人单独谈话的场景。当只有你和另一个同事在一个空间中交谈时，此时没必要在说话方式太争强好胜，毕竟两人一对一交谈是为在同一主题上相互交流，正常对话本就是 each person takes his turn，此时争抢容易显得不礼貌。 . 今天已经晚了，还有几条我留到下一篇再写。 " }, { "title": "在德国考驾照（一）", "url": "/sinantang.github.io/pr-7/posts/drivers-license-1/", "categories": "Others", "tags": "Life in Germany", "date": "2020-08-14 00:00:00 +0200", "content": "在得知我今年一直到年底都可以在家远程办公后，s 忍不住重提我考驾照这件事。来德国五年了，对考驾照这件事我一拖再拖。我不想开车的客观主观原因都有，在微博里写过就不再在此赘述了。但最近我对开车的想法突然开始松动，一是今年几乎全程在家工作的这个机会实在难得，省下来的空闲时间很适合上个课学个东西考个证啥的；二是还有两年就三十岁了，如果到时候还不会开车，听起来很不像是三十岁的大人呢；三是前两周刚考完德语，那股“哇我今年至少算是做了点事生活总算不那么‘一成不变’啦”的开心感觉真的提供了很不错的惯性，让我有动力去做更多的事。 于是今天就一鼓作气迈出考驾照的第一步啦。下面是我收集到的一些信息。 在德国考驾照之前首先要上急救课，测视力。拿上这两个证明（再加上证件照片什么的）才能去市政厅申请考驾照。强制上急救课是因为如果遇上车祸，或在高速上看到事故，司机有义务下车帮忙。视力测试则是为了确认此人开车是否需要戴眼镜，如果需要戴眼镜却没戴的话，被交警查到会罚款。在市政厅申请完了后过一段时间会收到确认信，那之后申请人有一年时间通过理论考试，另一年时间通过驾驶考试。逾期没考过的话应该需要重新报名（=又交50欧报名费）。所以还是要提前规划好。另外视力测试的有效期为两年，急救课似乎没有过期一说。 我在一个驾校网站上浏览信息时看到这家驾校同时提供急救课、视力测试和拍照一条龙服务，我就直接先在网上报名了，目前最早的急救课空位是在一个月后…… 还是这同一家驾校，这家是我在网上直接用英语搜 driving school 时跳出来的第一条信息，他们主打卖点“the English driving school”，在谷歌上有几千条好评，而其他大部分驾校基本只有个位数或两位数的评论。由此看出用英语考驾照在柏林这个“移民城市”是个多大的刚需市场啊。查了查地址，这家距我家只有三站地铁，我提前在不同时段打了好几次电话都没人接，于是今天下午就直接去了这家驾校询问。看网上评论数还以为这家驾校规模很大呢，到了一看，门面不过也是很普通简陋的样子。进门看到办公室里只有一个女职员抱着一条斗牛犬坐在皮沙发上打发时间，她一看到我进门，就放下狗，走到里面的办公室坐下，再戴上口罩。我说明想了解下报名信息的来意后，她塞给我两张纸，分别是去市政厅申请考驾照需要的材料和一份驾校上课合同，合同上有价目表，她大致解释了一下考小汽车驾照的理论课驾驶课费用，一整套下来差不多3000欧，这还是考试全部一次性通过的最低费用。如果第一次不合格需要重考的话确实很容易就要花出去四五六千欧了，这确实和我之前从朋友那儿听到的“天价”驾照花费传说一致……并且重考也不是特别少见，因为在德国考驾照还是挺严格的。虽然这么贵但却并不是现在报名就立刻能开始上课啊。理论课要等到十月份才有空位，驾驶课则要等到明年中旬……这家确实生意异常兴隆啊。 德国考驾照贵最主要原因是要强制上理论课（14节）和强制跟教练学车（包括普通练习课和特殊驾驶课，特殊驾驶课包括5节长途驾驶课、4节高速路课和3节夜驾课），跟教练学车基本一分钟一欧，所以便宜不了。和在美国几乎可以免费考驾照不同，在美国你可以找有驾照的亲朋当教练带你练车，算是把这最贵的费用给省下了。我以前还问过 s，为什么在德国不可以找有驾照的朋友来陪练车，而一定要教练呢。s 说，教练带练的车是专门在副驾驶有第二个刹车的呀，普通车是不能用来上驾驶课的，要是出事怎么办。我又说，在德国考驾照好麻烦好严格好贵啊。s 一本正经地说，我觉得这样才好呢，开车是件很危险的事，如果你心里知道路上每个司机都通过了严格的考试才上路，你肯定会觉得更安心一些。接下来他又讲了一遍他以前去美国时只正常停了个车，就得到美国人惊讶赞叹的往事。接着我们就一起嘲笑了一下开车大老粗的美国人。 不过我提前在网上搜索过，其实也有比我去的第一家更便宜的驾校。据谷歌柏林最便宜的驾校套餐最低才一千多欧。我拿了第一家驾校的材料后就离开了。心想，这家既不便宜又需要坐地铁，还不如去看看我家附近的其他驾校呢，最起码还能图个近便。不知什么原因，德国驾校真的很多，经常走几步就是一个小驾校。比如我在谷歌地图上简单一搜，距我家一公里内有至少十家驾校……我也不明白为什么开驾校在德国是个如此流行的生意。按理说平均下来一个人一辈子至多考一次驾照，虽然一单利润不算低，但真有那么多生意可做吗？ 坐地铁回到家附近后，我按谷歌地图去了旁边最近的一家驾校。这家很小，开在居民楼下，虽小却不像第一家那样给人简陋破败之感，办公室里收拾得干净舒适。办公桌后坐着一个中年德国女人，看起来很友好。我走进去，说明来意后，先问了下有没有英语理论课，果然得到否定答案。我就说，德语课也可以，可不可以给我些上课信息。——其实我也不是非要用英语上理论课和考试，就是犯懒，因为上德语课肯定更费劲儿些。对方也大致说了下怎么去市政厅申请怎么上课，又给我写了下价目表。我接过来定睛一看，哇真比第一家便宜不少呢。比如第一家的普通驾驶课是40分钟40欧，特殊驾驶课45分钟55欧；这家普通驾驶课40分钟只有30欧，特殊驾驶课45分钟才45欧！又问了下什么时候可以开始上理论课，她表示下周就可以在上课时间来！既近，又便宜，还不用等，还有什么值得拒绝的理由呢。而且还同时有个被强迫学德语的机会……我马上就在心里做了决定，过几周就来试课哈哈！ " }, { "title": "自然语言处理的前世今生与未来展望", "url": "/sinantang.github.io/pr-7/posts/nlp-past-present-future/", "categories": "Natural Language Processing", "tags": "NLP", "date": "2020-07-12 00:00:00 +0200", "content": "——基于 Kathleen McKeown 教授的 ACL2020 Keynote 演讲 . 自然语言处理（Natural Language Processing）或计算机语言学（Computational Linguistics）虽仍算是年轻学科，但也已发展了几十年。这篇短文总结了这个学科的发展路径和研究者对其未来的预测展望。 1980s - Interdisciplinary focus 聚焦跨学科 八十年代时，认知学科（语言学、哲学、心理学）在早期自然语言处理中占有中心地位。这些认知学科的理论在引领自然语言处理的发展。当时的主流研究方法主要是定性分析例子，比如通过 minimal pairs 来探究自然语言的句法语义形成规律。 乘上当时计算机的发展（摩尔定律），早期机器学习模型的雏型开始出现。 ACL会议当时只有200人参加。 1990s - Moving to large scale data analysis 开启大量数据分析的序幕 语料库出现了。人们开始收集标注自然语料，建立多种语料库，并利于语料库来进行语言现象分析。此时语言数据的收集过程非常严谨细致，如何科学地清洗标注语料是风靡一时的热门研究。这种严谨的数据处理态度与后来真正大数据时代几乎“来者不拒”的数据收集手段形成鲜明对比。 举个例子，有了语料库，语言学家才有了定量分析词语搭配频率的途径。想知道一个动词最常跟哪个介词搭配，不再需要查由字典学家编写的字典，也不需要去做大规模语言学人类学田野调查，只需要在语料库里进行简单的搜索操作即可。 1990-2000 Transformation: Statistical NLP 统计自然语言处理 统计学以统计学指标（statistical metrics，e.g. mutual information）开始带领了一场自然语言处理领域的变革。这个年代见证了自然语言处理的重心从认知理论和定性分析到大数据与机器学习的转移。 更成熟的传统机器学习算法也在此时出现，其中包括一直到现在还很常用的SVM算法。 此时NLP从业者也开始引入检验指标来评估不同模型的效能。 因为以上这些系统性变革，符号模型与统计模型之间的关系日趋紧张、对立。对此流传最广的可能是Fred Jeline在同时代的名言「Every time I fire a linguist, the performance of the speech recognizer goes up」了。 语言学与机器学习之间的紧张关系可以说是一直延续至今。 2000 至今 - Deep Learning 深度学习的时代 这回是深度学习技术引领了自然语言处理领域的迄今为止影响最大的突破。 神经网络和深度学习模型的出现纷纷打破各项NLP任务的最好成绩——注意，并不是一项两项任务的最佳成绩被超越，而是几乎所有NLP任务的最佳成绩现在都被深度学习模型占据。 由于这些模型实在太好用了，加之计算机算力的大幅进步和云计算平台的出现，机器学习的浪潮愈加热烈，再次炒热了人工智能的概念。现在ACL会议每年收到的论文中，机器学习主题的数量总遥遥领先。 未来展望 关于目前深度学习的局限性，McKeown 教授此次采访的NLP专家的观点如下： 无法做到对语言生成应用的高阶控制； 过拟合：文本中不真实的关联被深度学习模型捕捉； 无法学习因果性和推论； 无法解释模型输出结果，无法修正结果； 没有更新知识图谱的简单方法; …… 那有什么新研究方法也许能够解决这些问题吗？ 将符号表征（symbolic representations）融合到深度学习算法； McKeown 教授对业内研究者的期望则已总结在下面这页演讲幻灯片里了： " }, { "title": "My notes for ACL 2020", "url": "/sinantang.github.io/pr-7/posts/acl-notes/", "categories": "Natural Language Processing", "tags": "NLP", "date": "2020-07-12 00:00:00 +0200", "content": " 来聊个两分钱的刚刚过去的ACL吧！这个周虽然准备好了啥事不干只看会议论文报告，奈何头痛胃痛轮番上阵，确实没能看很多论文，加上我也不是专业搞研究的，所以只能聊聊我的直观感受。 神经网络和深度学习已经火了好些年，虽然它们落实到业界里的应用基本还处于小范围尝鲜和哄风投阶段，但ACL作为行业最前沿的学术会议，今年明显释放出“大家可以考虑反思调整研发方向”的信号；不再去不求甚解追求越来越“深”的机器学习训练模型，或是追求用更多数据训练泛用途的模型。 信号一：在今年的Keynote演讲《Rewriting the Past: Assessing the Field through the Lens of Language Generation》中，Kathleen McKeown教授通过概述NLP整个领域的前世今生，给众研究者提出了几点未来研究方向的建议： 我想，McKeown教授并不是在反对在训练fancy深度模型的路上越走越远，而是不赞成不求甚解的算法狂潮，提醒大家要为有意义的用途训练模型，要注重模型的可解释性（最起码应该做到定性分析一下输出结果吧），而不是一心追求更高的分数。 以语言生成（language generation）领域为例，McKeown教授点出现有机器学习算法在生成语言时与人类说话写字时的根本不同：人说话写字时有目的性，有计划，说我们认为的真话（写到这儿我忍不住插一句，也不是所有人类的发言都能够上这个标准…）；而算法则是在学习已有数据的基础上（非常笼统地讲）进行某种字符概率游戏。这个判断当然没错啦，让算法进一步模拟真实人脑的思维过程是一个存在很久了的对现有机器学习算法的主流批评声音。但从另一方面说，我一直认为这种看法反射出的是人类的自恋：算法为什么就一定要模拟人类行为呢？算法模型的最终目标就是人类自己吗？「Address what matters」——在我看来，努力让算法无限接近人类行为并不是what matters，也许现有NLP模型有更好的目标，比如成为辅助而非替代人类的工具，或者让机器学习模型更彻底地从计算语言学范畴里剥离出来，专心发展成任何学科都能拿来即用的量化工具。 不管怎么说，McKeown教授的演讲非常值得一看，就算是NLP的门外汉也不妨碍理解演讲主题。如果你对人工智能领域有一点兴趣，不妨去看看演讲视频回放。 信号二：今年的Best Theme Paper颁给了《Climbing towards NLU: On Meaning, Form, and Understanding in the Age of Data》。这篇论文确实精彩！这种通过（不太花钱的）认知思维实验来阐释论点的文章在秀各种fancy模型的主流NLP论文里独树一帜，简直是高了不止一个段位。这篇论文中的“章鱼思维实验”预计将会成为NLU业内的一个经典隐喻。抛开颇具创意的论文形式不说，这篇文章的论点落在“对语言形式的学习无法到达语言理解的目的”上。Meaning isn’t in form; rather, languages are rich, dense ways of providing cues to communicative intents. 语言学家的优雅在这篇论文中处处显露出来。这个观点呼应了McKeown教授的演讲——「Bring language back to NLP」，这第一步是提醒众算法研究者们：机器算法不是自然语言，意义不在形式，既然大家声称自己在研究“自然语言处理”，那请先搞懂自然语言是什么吧！ 语言学等认知学科是否会重新成为接下来NLP/AI发展的灵感之源和指路标还很难说，但很清楚的是现有机器学习算法模型不会是终点。 信号三：对近十年神经网络深度学习热的反思还体现在近两年越来越受人重视的“机器学习与伦理问题”和“机器学习模型的可解释性”上。在这些方面ACL也专门设立了独立的track来收集呈现论文。除了“Ethics and NLP”、“Interpretation and Analysis of Models for NLP”这两个新增track之外，今年还新增了“Theory and formalism”和“Theme: Taking stock of where we’ve been and where we’re going”。这些反映了近年来NLP领域的发展在引起太多外界关注后，尝试从内部开始应对这些争议。有时确实是这样：业内人士心知一切离真正的人工智能可还差得远呢，但外行人因为不了解日趋复杂的计算机非线性建模，已经开始担忧被媒体吹嘘上天的AI的负面影响。当一个行业的社会影响力和风投吸金力越来越大时，它确实需要承担越来越重的社会责任。最起码，让机器学习模型变得更透明这个发展方向是一件双赢的事。 有些人沉迷于把NLP神秘化，这样就可以利用噱头来博关注拉投资，但这也会加大行内行外的距离，导致不信任和争议；与其如此，不如多多向大众科普何为自然语言处理何为机器学习，更进一步地，可以鼓励其他行业从业者使用NLP研究成果来帮助他们的工作（the democratisation of AI），揭开这层神秘的面纱，会更有利于这个行业的未来发展。 " }, { "title": "Newsletters that I subscribe to and actually read", "url": "/sinantang.github.io/pr-7/posts/newsletters/", "categories": "Others, Reading Notes", "tags": "reading", "date": "2020-06-21 00:00:00 +0200", "content": "I might come back and update the list in the future. Scott Young’s Blog The amount of essays and the quality of the writing from Scott Young’s blog site occasionally discourage me in my attempts to write more. Nonetheless I have been inspired and learning a lot from his essays. To subscribe: here Benedict’s Newsletter In his own words: who is Benedict Evans – I’ve spent 20 years analysing mobile, digital media and technology, and worked in equity research, strategy, consulting and venture capital. I’m now an independent analyst. I try to work out what’s going on and what it means. what are his newsletters about – This is a weekly newsletter of what I’ve seen in tech and thought was interesting. Benedict’s weekly newsletter contains such a unique collection of recent interesting things in tech that I cannot find elsewhere with the same amout of ease and quality. To subscribe: here LINGUIST List LINGUIST List is actually a mailing list distributing issues from their site rather than a conventional newsletter. I have a background in Linguistics since 2013. I have been a subscriber since 2016 and I still scan through their daily summaries in my inbox everyday. It has been especially useful for me to keep track of the new job listings posted on their site. Not to look for new opportunites but to have a rough idea about what the job market for linguists is like – well, most of the time it doesn’t look very rosy. To subscribe: here Paul Graham’s Blog I suspect Paul Graham’s personal site might be one of the most primitive-looking yet most popular blog sites you could see around the Internet nowadays. I genuinely enjoy his witty and original essays, but he is certainly too busy to set up a newsletter for his own blog (apparently there is no need to remind his readers either). But someone else has created a RSS feed of Paul Graham’s essays page. 编程随想的博客 ProgramThink A blog for those who (read Chinese and) embrace some non-mainstream thinking, or just fancy topics on Internet security. To subscribe: here Wait But Why “Sometimes humorous, almost always profound, long-form explainer site.” – Fast Company I occasionally read those very long (as compared to the modern attention span) essays from Wait But Why, but bizarrely I have never been successful in my several attempts to subsribe to their newsletter. It seems like my email address is blocked by them without doing anything. " }, { "title": "大师课学习笔记：Margaret Atwood 的创意写作课", "url": "/sinantang.github.io/pr-7/posts/margaret-atwood/", "categories": "MasterClass Learning Notes", "tags": "how to write", "date": "2020-06-20 00:00:00 +0200", "content": "Margaret Atwood 是位有名的加拿大小说家，今年80，作品拿奖无数。对于中国观众来说她最令人熟知的作品也许是反乌托邦小说《使女的故事》。《使女的故事》曾被改编成电影和歌剧，两三年前还被拍成风靡一时的电视剧。 以下是我对这门大师课的两点感受。 写作不是自我表达 很多人以为，写东西是为了自我表达，是为了告诉别人自己是谁自己有什么感受。但如果你想成为一个专业写作者，那写作的动机绝不可能是自恋。只顾自我表达的写作就像站在旷野中央大喊大叫，声音再大也不会有多少人在意。而专业写作者提笔的目的是为读者提供价值。这种价值的表现形式多种多样：虚构文体可以通过悬念、气氛、情感、故事构造一个令人沉浸的虚拟世界，非虚构文体可以提供信息、知识等。 作家要做到「忘我」，让自己的文字变成具体思想的载体，才能算是成功的写作。其实在这方面，文艺工作者的任务很类似。比如演员的工作并不是自我表达，并不是为了向观众展示“我是一个好演员”，而是要忘记自我，把自己变成呈现角色的载体。 写作这件事有方法有技巧 我没正经上过任何写作课，平时写点东西并无章法基本全凭直觉和平时看书的一点积累。我想很多人可能和我一样，以前总有种误解，以为作家只需要坐在书桌前，接住从天而降的灵感，就可以歘歘（chuā）写出一篇篇文字。而作者从哪里获取灵感，如何表达出一个想法这些方法论，都是他们天生领悟到的——确实有极少数天才型选手，完全不需点拨就无师自通一举成名晋升大师，但绝大部分写作者确实需要，也能够依靠特定的写作训练来提高自己水平。而且我认为，每个人都可以通过学习写作方法和技巧来提高自己的书面表达水准，即使不当专业写作者，这也是很值得追求的一项个人技能。 这就是这类“创意写作”课存在的目的：几乎没什么门槛，不搞什么虚头巴脑，手把手教给任何一个愿意学习的人一些实操写作方法。我知道包括 creative writing 在内的各类写作培训课在美国是很成熟的课程了，大部分大学都会开设此类课。虽然 Margaret Atwood 在大师课平台上的创意写作课肯定和大学里线下课不一样，但这门课配套的练习册编写得特别好，几乎每一节都配了丰富的参考资料和非常有引导性的课后作业，没什么虚构写作经验的人若能认认真真跟着做下来，收获肯定不会小。 举个例子，获取写作灵感这件事存在什么实操性特别强的方法呢？有个理论说，人类社会创造出的所有故事都可以追溯回一个原型（prototype），这些原型故事一般是流传了几百上千年的童话神话故事。这些原型故事之所以流传至今是因为它们体现人性内核的某个侧面，且存在丰富多种的理解方式。现代故事都是在重述、改编已有的原型故事。理解了这一点，你就可以看到，写一个故事并不是凭空架楼阁，而可以通过——熟知人类社会的原型故事，理解构架出一个完整故事的元素（叙述视角、故事背景、对话构建、感觉意象等等），再在此基础上选取一个打动你的故事，选取一个故事元素（比如叙述视角）来重述、改编它——这个过程来有路可依地进行虚构写作。 比如说，人人耳熟能详的“小红帽”童话即为一个原型故事。大家熟知的“小红帽”是以小红帽为主要叙事视角、以时间顺叙、以森林为地点来展开这个故事的。但如果你来写一个新“小红帽”故事的话，你可以选择以大灰狼为主要叙述视角，再把故事时空改到现代职场，同时给主要角色都换个现代名字，但保留原故事的基础设置，是不是一下子就能构架出一个以“小红帽”童话为内核的有血有肉的“新”故事了？ 这类特别实用的写作方法还有不少，感兴趣的推荐去看一看这门创意写作课。或者任何一门成熟的美国大学开设的写作课应该都不错吧。 " }, { "title": "更好的搞副业思路", "url": "/sinantang.github.io/pr-7/posts/hustle/", "categories": "Others, Self improvement", "tags": "career", "date": "2020-05-09 00:00:00 +0200", "content": "疫情期间，看到很多年轻人在聊如何开展副业做“斜杠青年”，小朋友们虽离开学校好几年了但开口闭口还是学生思维。学生思维的意思是，永远在从自己能再去学个什么多余技能，考个什么证换个工作出发，虽然也会说到要找不可替代性高的工作啊，但这套思路完全不存在不可替代性。那什么不再是学生思维了呢？从问自己“我能学什么”转换到“别人/市场需要什么”，从为别人单纯打工转换到如何聚集资源为自己做事。 《小狗钱钱》里遛狗的例子特别好。“学生”是那个能遛狗所以只想为别人遛狗的小朋友，真正有赚钱能力的是把遛狗需求和遛狗人对接起来的吉娅。吉娅的技能是“寻找需求，资源对接”，她永远都不会找不到赚钱机会，其他只遛狗的小朋友如果搬到一个没什么狗或没人需要遛狗服务的社区，就会毫无悬念地“失业”了。 再举个我自己的例子。我四五年前还在读语言学硕士时是如何找到转行方向的呢？我订了一个主流语言学论坛的 daily newsletter，每天推送内容里包含招聘广告，我看了一段时间后（其实直到现在我也在看），知道了在这个领域里除了留在学术圈外，需求量最大的是计算机语言学，然后去了解 Computational Linguistics 是做什么的，自然而然接触到 NLP，查了很多信息之后觉得这个靠谱，就决定转行。接下来找实习找工作都很顺利，最主要的原因是这个市场需求真实存在，次重要的原因才是我自学能力或行动能力有多强（并没有。 以前我会觉得在大公司安安稳稳做一份单纯的技术性工作很不错，比如像大公司程序员那样一天到晚只写代码啥也不干。而现在我看到，一些一毕业就直接从这类岗位上开始工作的人，确实更倾向于把“好学生”的思维帽子戴得更久一些。只写代码看起来是自己能够专心发展职业技能，但这个技能是很单一的；如果连自己代码服务的需求都不太了解，那连程序员最明显的副业（自己搞 App 做网站）也会做得费劲。现在程序员看起来还是个吃香的职业，是因为时代大势导致的市场供需关系如此，并不是因为这份技能就真的比会计、砌墙、炒菜之类更难以掌握。 " }, { "title": "读《当我谈跑步时，我谈些什么》", "url": "/sinantang.github.io/pr-7/posts/run/", "categories": "Book Review", "tags": "books, reading", "date": "2020-05-04 00:00:00 +0200", "content": "村上春树的《当我谈跑步时，我谈些什么》一书和他的《我的职业是小说家》有一小部分内容重复，但这本《跑步》确实要比《小说家》好得多。我更推荐此书！ 前两天我听 Tim Ferriss 播客，嘉宾 Kevin Rose 热烈推荐了此书，我想起我好像还没读过，就趁长周末读了。 下面是看书过程中产生的两个感悟，不一定和书内容本身有太多关联： 长跑和很多事情一样，分解下来都只是在往复单调的动作。以前我觉得一直重复很低级无聊，但渐渐发现，世上没有不包含重复这一规律的事物。一个花纹重复上百次可以变成好看的墙纸，一段雨声重复三五遍可以变成人耳中的音乐，双脚重复前后交替移动成千上万次可以把人带到很远的地方，重复练习一百次谁都可以流利弹出简单的钢琴曲。「重复」看起难度低且无趣，但其实是由大化小、由小集大的效率最高的大自然规律。在计算机领域里，这个算法叫 divide and conquer。想通这一点后，我就对需要不断重复练习才能提高一项技能这件事没那么不耐烦了。「重复」其实可以很高级。 离开学校以后的成年人得尽早替换掉“终点比过程重要”的惯性思维。直到大学毕业开始第一份工作，人都会很习惯于“终点思维”——每当过一段时间，不必怎么努力，也可以毫无悬念到达一个充满里程碑感的人生节点：中考高考，初恋失恋，毕业离家，再毕业进入社会。但开始工作之后，这种天然节点就大大减少，除了结婚生子买房和转换职业跑道外，“一天很长，一年很短”是成年人的普遍感觉（除非父母要把孩子的天然成长里程碑也算作自己的个人成就……）。脑科学家对人脑记忆的研究也验证了这一点：人一生中记忆最丰富的时段集中在十几到二十几岁之间。 但人生很长，如果一味追求快点到达下一个终点，那就意味着99.9%的时间里都不会很快乐。这解锁的钥匙呢，是听起来陈词鸡汤但做起来真的有用的「学会享受过程」。就像长跑，如果跑步者只在意追求最后的成绩排名，丝毫不享受那过程，那大概率是跑不了几次的。 " }, { "title": "女性可以自由选择生活方式吗？", "url": "/sinantang.github.io/pr-7/posts/women-lifestyle/", "categories": "Self improvement, Others", "tags": "career, feminism", "date": "2020-04-12 00:00:00 +0200", "content": "正文 作为一个特别喜欢孩子的人，我以前一直单纯地认为女性应该拥有自主选择生活方式的权利，不管是选择做家庭主妇还是职场女性还是两边兼顾，这都是个人选择，都应该得到社会尊重。特别是全职妈妈，这其实是份比外出打工更重要更有意义的“工作”啊（我这个观点到现在也没变）。 但开始工作这两三年来，我对女性工作的想法慢慢变了。刚毕业时觉得二十七八开始准备生育挺合适（因为我想要2-3个孩子）；一两年后决定，一定要先升职再生育，只要赶在三十岁之前就行；现在的想法变成：没什么好急的，推到三十岁之后也很正常（德国女性首胎平均年龄30+），在那之前先尽力在工作上拼几年，也先多去世界其他地方看看再说。 并不是我对抚育孩子这件事的看法产生了多大改变，而是我认识到，过于理想的想法无法在目前还不够先进的社会落地。虽然抚育孩子是非常重要的工作，但社会并没有先进到可以完全承认这份价值的阶段。坚持在职场上的女性们，特别站在各行各业重要位置上的女性，她们才是提升整个社会平等水平的坚实力量。因为在社会生活中到处都有女性的活跃身影，整体女性的需求才有了被看到的可能。 举个正面例子，德国前段时间因疫情在讨论是否该全面禁足时，是一位德国女性官员第一时间提出要考虑家暴案可能会在禁足期间升高这个问题。不是说男性官员就想不到这个问题，而是男性作为体力上的相对占优者（以及其他原因），在家庭生活中遭受暴力的可能性远远低于女性，所以没那么快共情到这一步。就好像绝大部分女性一人走在没人的路上，都会非常提防恐惧突然出现的男性路人，但有多少男性会害怕路上的一个女性呢？共情能力再强，也强不过亲身经历赋予的第一反应。 再来个反例，最近这起鲍毓明性侵少女案，若一线警察队伍里有 1/3 比例的女警，受害少女的报警寻求正义之路可能也不会屈辱悲惨到如此地步。 欧美有种流行的平权提法，说要规定企业/政府高层中的女性比例（到30%左右），这样来倒逼从底层开始重视平权。没记错的话，美国总统的大女儿伊万卡也试图提倡过这个议题。我以前对此类提案很狐疑，我觉得似乎还是应该保证以去性别的公平方式来选拔比较好吧，规定比例会不会让一些人反过来怀疑女性高层的工作能力不如男性，只是因为平权才上台的呢？可是后来我就想，社会哪存在完全公平的选拔方式啊，大部分女性都得在一定年龄前生育这回事本就是结构上的不平等。很多男性在职场本也不是公平竞争，也许互相勾结着拍拍马屁找找关系相互帮帮忙也上去了。那我为什么要以高标准来要求女性去“公平”竞争？我为什么觉得女性就得品德高洁？女性自然也可以有为目的不择手段的“阴暗”面。 「女性有选择生活方式的自由」，很对。「女性要通过工作提高自己和女性整体的社会地位」，也非常对。只不过，我们的社会现在仍只发展到后者这一阶段。「应然」与「实然」，先从后者出发才有可能在将来某一天到达前者。 后记 在微博上写了以上文章后，有人艾特我一些关于女性权益的社会新闻，我想再把下面这条我的旧微博转出来。如果你看一条新闻得到的唯一结论止步于“女性真的太难了”，那就真的没必要再继续看同类新闻来反复印证自我认知了。陷在无助情绪里拔不出来容易被人收割。真的想推动社会平权，请先在现实生活中找到自己能做的小事。 刷新闻和微博时，感受到的大部分情绪都自有其力量，比如愤怒、悲伤、激动、喜悦，除了一种情绪——无力、无助。如果你感到很强的无助感（这种无助感很可能夹杂、掩盖在其他情绪之中）那就应该立即停止接收这些外界信息。一个人应该在生活中找到自己有自信、有力量去做的有意义的事，再小也算。 另外，任何时刻都要远离那些有意鼓励培养你习得性无助心态的人和信息源。 If you feel helpless, then you probably cannot be helped by the world. " }, { "title": "如何宅家隔离生活也能保持高效率和好心情", "url": "/sinantang.github.io/pr-7/posts/routine-quarantine/", "categories": "Self improvement, MasterClass Learning Notes", "tags": "planning, career", "date": "2020-04-10 00:00:00 +0200", "content": "为了保持心情平稳和工作效率，有一份规律、合适的每日作息 routine 对于 24/7 的宅家生活来说可谓千金不换。 前两个星期看了 Bob Iger 的大师课，其中有一节讲了他工作日的作息表。作为华特迪士尼公司05到20年的 CEO，他的作息表还蛮有代表性的（在CEO中）。不过让我最有共鸣的一点不是他的时间表，而是他对个人独处思考时间的重视，他在几分钟视频里反复提到多次，一天中设立独处时间、远离外部干扰（external forces）的重要性。看了 Bob Iger 的每日安排，我猜想他可能也和我一样是内向者 :) Bob Iger 的一天： 4:15 AM 起床 起床后，Bob Iger 独自一人在光线不足的房间内锻炼身体，同时会在音乐中冥想。这是他一天中最有创造力的一段时间。Bob Iger 会在这段安静的时间内集中思考一些问题，在大脑内过一遍待办事项。 锻炼前不查看邮件，尽量减少外部干扰。 6:30 AM 到办公室 作为第一个到公司的人，Bob Iger 利用这段安静时间安排一天日程，思考重要问题。 8:00 AM - 4:00 PM 开一天会 4:30 PM 回家 和家人一起吃晚饭，度过家庭时光。（Bob Iger 有四个孩子） 8:00 - 10:00 PM 在家工作，或看书看电视 睡前：总结一天，今天做完了什么事，是否有关注公司的创意产品。 看了 Bob Iger 的作息安排后，我也想分享一下我最近的一日作息。作为一个不能熬夜不能早起必须睡满9小时，但每月都能读完几本书、工作performance也不错的普通人，我想我的作息肯定比 Bob Iger 更有参考性。 经过一段时间的实验实践，我摸索出以下疫情期间适合自己的工作日作息安排，分享给读者： 8:30 起床 早餐 5 min ——万年不变的快速早餐：烤一片吐司，涂 cream cheese，加一杯牛奶。 刷牙洗脸 10 min 冥想 10 min 运动 30 min ——偶尔我会放上时长30分钟的冥想练习，边冥想边在瑜伽垫上做些自重训练。 写今日计划 5 min 以上完成后（9:30 左右），我会打开工作电脑，查看邮件、工作群聊和工作日历，快速安排下自己的一天。如果有些工作我想要/需要在每日早会（10:40 AM）之前完成，比如 review PR 或准备会议，就会直接开始工作。因为早会前的这段时间不受打扰，我可以专心做一些不需要别人参与的整块工作，花时间思考一些问题；万一有紧急任务，我还可以尽早应对——公司文化如此，上午10点前开始工作都算早 :) 大部分人10点之后甚至早会开始时才上线。 少数工作很清闲的情况下，我会选择读书或看网课到 10:20 左右，再开始正式工作。 因为在家办公运动量太少，我会在手机上定个定时闹钟，每过 40 分钟提醒自己站起来走动一下。在家办公的好处之一，就是可以随时随地起来运动拉伸一下。比如，我电话会议时就经常站起来拉伸活动一下，反正不会有人看见。但你想象一下，如果这是在公司，就会显得很奇怪了…… 下午 6 点左右结束工作。 晚上时间安排比较灵活。如果自我感觉精力良好，那我会看一些和工作相关的技术书——最近在看《Programming TypeScript》和《Head First Design Patterns》。 如果精力一般但有点兴致，我会选择看一些闲书——最近在看《Ultralearning》、《十日谈》和《行动的勇气》。 如果精力再差一点，我会看 MasterClass，被动视频输入，总是比较轻松。 如果完全没什么心情，我就会投奔 Netflix 和 YouTube，漫无目的地追剧追博主更新。 晚上 11:30 左右睡觉。在睡觉之前，我会花 3-5 分钟总结这一天，打开日程本，看看早上写的今日计划完成了多少，记录一下今天的心情，写一写可以自夸的小事（比如，“今天成功主持了一场会议”，“今天学到了xx” :），快速浏览一下明天有什么安排。 这就是我的日常一天啦！ 个人感觉疫情隔离期间，虽然每天工作时长没变，但没了通勤和化妆步骤，我的个人时间多出来不少。平时要去上班时早上往往忙乱，并没有可以安静思考的个人时间。时间久了容易失去对时间流逝的知觉，一到周末、月末、季末就容易冒出「啊又周末/月末/季末了！我究竟干了些什么啊！」的想法。 再加上在家工作中可以随时站起来活动一下，小家务也可以随手做一下当做放松，生活的整体效率确实提高了不少。 不过即使是这样，也希望世界快快恢复往日的正常面貌呀！ " }, { "title": "大师课学习笔记：Krugman 的经济学课 02", "url": "/sinantang.github.io/pr-7/posts/krugman-2/", "categories": "MasterClass Learning Notes", "tags": "Economics", "date": "2020-03-29 00:00:00 +0100", "content": "这周上完了 Krugman 的经济学大师课，我有一个强烈的感受：有些概念或知识，要么不学要么认真学，停留在道听途说只学点皮毛的状态反而是最有害的。经济学也许就属于这个范畴。 通过这二十几节经济学入门课，我总结了几个 Krugman 讲到的民间广泛流传的错误经济学观念（我在两周之前也同样以为这些多少是对的），写在下面： Common Myths in Economics 大量印钱会导致通货膨胀物价上涨 2008年美国金融危机时，美联储通过印钱总共给市场多注入了危机前货币总量的4倍。听起来确实是很吓人的印钱速度，但只看消费者物价指数（CPI），这些多出来的钱却完全没有影响美国 CPI 水平。同样的事在日本也能找到相似数据。2000/2001年起，日本央行开始大量印钱，然而 CPI 不升反而有略下降的趋势。 这些历史数据可以在 FRED (Federal Reserve Economic Data) 网站上查找到。 在金融危机时大量印钱并不会引起通货膨胀。当我们遇到的是一个小规模危机时，印钱对经济增长有好处。不过这个措施在严重经济危机时就失去效果了，此时印钱虽没什么显著坏处，但也没太多好处。 财政赤字一定是件坏事 二战结束后，美国政府的财政赤字高达当年 GDP 的100%以上，听起来是很高很高的债务数字，但实际上并没有造成什么实质伤害。因为战后美国经济快速增长，经济增长使得原先很高的债务在对比之下变得越来越不重要。同样的情况在不同国家都出现过——实际上，政府债务并不会成为什么大问题，只要经济能保持增长。 在欧洲很多政府支持紧缩支出反对财政赤字（i.e. austerity policies），德国就是其一。德国政府已连续几年财政盈余（比如2019年末德国政府盈余高达135亿欧元），但最近的新冠肺炎疫情使德国政府一下子开始大手笔花钱救市——可能此时政府对经济的悲观预期已经超过对财政盈余的追求。在经济学家看来，欧洲国家早应该放弃紧缩政策，不应该惧怕背债务，把钱都投资进市场才有利于驱动经济增长。 设定/提高最低工资会使失业率升高 “提高最低工资会使公司成本增加，公司会倾向于雇佣更少的人，因此不利于提高就业率”——这是个很多人都相信的一个观点。但实际上通过对历史事实的归纳分析，会发现这个观点并不正确。在美国的政治体制下，州政府拥有设定本州最低工资水平的权利，这就给经济学家的分析提供了很多天然对照实验。1992年，新泽西州提高了最低工资，紧邻新泽西的宾州没有提高最低工资。经济学家比较了两州快餐业在1992年前后的就业率，发现反而是新泽西州就业率提高了。 加税对经济复苏有害，减税有利于经济增长 这一点其实只要比较一下不同发达国家的税收系统和经济状况就能找到不少反例。 除前面这个明显的例子外，还可以通过美国近几十年的税收水平和经济数据来验证这个观点。1980年里根政府大幅度减税，之后经济大幅增长；1993年克林顿政府加税，之后经济大幅增长；2000年布什政府开始减税，经济先增长后大步走进衰退；2013年奥巴马政府小幅加税，对经济没什么大影响。 最后我还想补充一句来结尾 Krugman 经济学课的学习笔记。 我倒不觉得这二十几节课给我最大的收获是经济学知识，毕竟总共才几小时的视频，除了基本经济学研究方法和常用数据来源很有价值外，这门课更多地是让我更客观地了解到自己究竟有多无知——算是达克效应（Dunning–Kruger effect）的应验时刻之一吧。 " }, { "title": "大师课学习笔记：Krugman 的经济学课 01", "url": "/sinantang.github.io/pr-7/posts/krugman-1/", "categories": "MasterClass Learning Notes", "tags": "Economics", "date": "2020-03-22 00:00:00 +0100", "content": "这个星期看了十几期 Krugman 的经济学课。我作为没接受过什么正经经济学教育的人还是学到了不少东西。特别是结合最近全球市场的剧烈震荡和大家对未来经济的悲观预期，Krugman 对08经济危机的讲解一下子变得很贴合现实。对我来说感触最深的有两点，一是所谓“信心”是什么；二是经济周期对个人的影响。 关于第一点，以前总看新闻说“对市场的信心”云云，但其实不是很理解信心的重要性。但结合最近疫情大众的囤货行为，一下子就理解了。在一个稳定繁荣的社会，没人会怀疑今天不去买厕纸明天就买不到了，这不仅是人大脑里的一个“想法”，更是一种 conviction；但当社会有一丝危机的迹象出现时，当人看到有一个人把超市里的厕纸全买光时，他大概率会觉得这是种可笑荒谬的行为，但当周围第二第三个人也去这么做时，他原先的信念很可能就会受到动摇，特别是当他自己家里快没纸的情况下。当越来越多的人开始对此失去信心时，就算政客再怎么重申这种想法的可笑，也于事无补。 很多情况下，信心是一种循环自证预言，大家都觉得行，那就很可能行；大家都觉得不行，那就肯定不行。市场经济格外需要这种看不见摸不着的信心才能正常运作。延伸到企业发展，我觉得这个规律也符合：当所有员工对公司前景都没底气时，那真的很难变好；反之当员工对公司很有信心时，就会愿意为公司出力，希望成为促成大好前景的一份子，那公司变好的可能性就大增。毕竟事情是人做出来的。当然，信心肯定存在影响边界，需要在现实规律的基础上发挥作用，“亩产万斤”这类白日梦再有信心也不会凭空发生。 第二点，Krugman 提到在经济危机那一年毕业参加工作的人，在财务和事业发展上极大概率一辈子也不能赶上那些在经济繁荣期开始第一份工作的人。这些人成了 crimeless victims——他们没犯什么错，只是不幸成了时代的受害者。所谓“要靠个人奋斗，也要参考历史进程”，其实更现实的是“要参考个人奋斗，但更要靠历史进程”。还有一句俗话“猪站在风口上都会飞”也并不夸张。 给个人的反思是，当事业顺利时，不要自大地以为一切都是个人努力，很可能是大环境好；另一方面，比起努力，更重要的是先找对方向，轻易不逆时代的河流游泳。一个更具体的建议是，尽量不要在经济最差的那一年下场找人生第一份工作。大环境难是一部分，外界环境还会反过来影响个人思维方式，做事总不成功会导致越来越难成功。当然，没人想在经济最差的时候下场找工作，但前提是你会判断什么时候经济最差。 " }, { "title": "一个关于勇气的故事", "url": "/sinantang.github.io/pr-7/posts/courage/", "categories": "Others", "tags": "philosophy", "date": "2020-03-15 00:00:00 +0100", "content": "老读者都知道，我一直把勇气放在一个人可以拥有的美好特质中很靠前的位置上。那什么才是真正的勇气呢？今天我想讲个关于勇气的真实故事。 我有个同事，是个与我同龄的女生，来自一个东欧小国。个子不到一米六，模样也普通。几个月前，她突然接到家里人打来的紧急电话，说她的表妹在葡萄牙失踪且健康状况堪忧。事发突然，她当下就订了第二天一早去葡萄牙的机票，并请了几天假去处理家庭急事。等几天后她飞回柏林继续上班了，才有机会给我们讲了下面这个故事。 暂且管我同事叫小A吧。小A有个同龄表妹，几年前离开东欧老家加入了一个位于葡萄牙的嬉皮宗教社群，这个社群追求抛弃现代生活回归大自然的生活方式，认为现代生活方式是一种罪（sin）。在这儿就暂把这位表妹称做葡萄牙表妹。葡萄牙表妹被这个宗教社群的信念吸引，尽管家族里除了小A外所有人都坚信这是个邪教组织（cult），她还是一意孤行去了葡萄牙跟这个社群的人生活在一起。几年来大体风平浪静，但最近葡萄牙表妹的情况开始有变。 葡萄牙表妹最近偶尔和家人的联络里透露了她想法上的变化：她开始猛烈拒绝现代正常的生活方式，并为自己以前的生活方式痛苦地忏悔，她认为自己已经犯下很大的罪，自己身体里有魔鬼，为了把魔鬼赶走于是开始惩罚自己，惩罚方式是绝食，甚至也不怎么喝水。之后葡萄牙表妹的家人联系她不上（她几乎不用手机），结合她曾得过抑郁症这个事实，就急了。因为小A是家里唯一能理解葡萄牙表妹的生活选择的年轻人，所以就由她和一个在伦敦工作的表姐一同飞去葡萄牙找表妹。 寻找的过程暂按不表，总之最终她俩找到这个社区也找到身体虚弱情绪也不稳定的葡萄牙表妹了。接下来她们的计划是把表妹带走，带回东欧老家先由父母照顾，等表妹情绪稍稳定下来，再带她去看心理医生接受专业治疗。直接劝表妹跟她们走的效果不大，她拒绝去医院，也不想回家，对她来说这个社群更像她的家。小A和伦敦表姐只能先和社群头领谈，寄希望于头领能同意她们带表妹走，并让头领去劝表妹。 我知道，在大多数中国人心中，葡萄牙表妹加入的这个社群非邪教无疑了，除了整天把sin和nature挂在嘴上，竟然放任表妹以绝食的方法自我惩罚。然而据小A的客观说法，虽然这群人确实看起来很嬉皮，留长发浑身挂满水晶什么的，但其实他们人并不坏，他们对表妹很关心，头领也认为表妹的行为太过激，一直劝她不要以这种伤害自己的方式来理解教义。但无奈表妹被心魔纠缠，只靠她自己是暂时走不出困境了。 接着说小A和伦敦表姐与社群头领的协商过程。在这个过程中葡萄牙表妹的妈妈在小A手机上也开着通话模式连着线。社群头头并无意害任何成员，但他担心她们带表妹走之后会报警举报组织并直接把表妹送进医院。伦敦表姐不信任这个社群头头，且不是开明的人，当场就说他们是邪教，说表妹疯了，说这个组织害人。电话那头的妈妈又忙着追问表妹情况和谈判进展。总之，这个谈判过程其实是小A在三个人（组织头头、伦敦表姐、电话那头的妈妈）之间跳来跳去试图缓和局势，安抚每一个人……到最后，每个人都只接受和小A直接对话，由她来向第三方传话。将近一天过去后，最后大家在小A的不懈努力下，终于达成协议！头头同意她们把表妹带走，愿意帮她们劝表妹，但条件是绝不可以报警或把表妹送去医院。 于是三人离开这个嬉皮社区，直奔机场，买了第二天的早班机票。计划是让表妹和伦敦表姐一起飞回伦敦，先在表姐家休息几天，同时表妹妈妈会飞来伦敦，之后带表妹回东欧老家。小A则直接飞回柏林，继续回去上班。当晚她们三人在机场附近的一家酒店下榻。小A努力劝表妹吃了一根香蕉，并喝了一小杯咖啡。表妹到此时体力和意志力已然很薄弱，抵抗不了咖啡和香蕉的诱惑，但一边喝咖啡还一边说，这是不对的，等她恢复后就需要更严厉地惩罚自己云云。但除此之外，直到第二天去机场之前一切算是终于平静下来了。 第二天，起床之后表妹就表现出不想去机场的言行。她说，她很清晰地看到她们将要乘坐的那架飞机会出事，所有飞机上的人都会死掉，她要阻止大家去赴死。不得已之下，小A采取了谈判专家的话术，说，我们先去机场，到了那儿之后你再决定要不要上飞机。就这样骗着哄着，三人坐车到了机场。 一到机场，表妹的不安更严重了，言行变得更过激，她一再表示这架飞机会出事，想要马上离开机场。伦敦表姐终于忍不住了，就和表妹在机场大吵起来。看来表姐心智也是不够成熟，在此刻竟采取了激将法，威胁表妹说，不上飞机她就喊机场安保和警察，警察来了就会把表妹送去医院。小A此时立刻打电话给前面提到的社群头头，希望他能和表妹通话，让表妹冷静下来，劝她和她们登上飞机。社群头头在电话那头听到伦敦表姐的威胁，就生气了，你们不是说好绝不报警绝不把表妹送去医院的吗，怎么现在反悔了？！此时最后的登机时间马上就要过了，一看今天可能走不了，伦敦表姐开始不管不顾，大骂表妹是疯子，她会害得自己丢掉工作云云。最后伦敦表姐盛怒之下叫了机场安保。眼看着安保人员在向她们的方向走来，只剩几秒钟的时间就要到她们跟前，此时小A一把抓住表妹，看着她的眼睛，一字一顿地认真对她说，“你现在必须马上冷静下来，你要跟警察说你是害怕坐飞机所以急性焦虑症发作，但现在已经好了，可以飞了；否则你会马上被警察送去医院，到时候我也帮不了你。你听懂了吗？” 话音刚落安保就走到跟前了。表妹听到小A的严肃警告后竟一下子冷静下来，突然变得和一个正常人别无二致。她按小A说的，跟机场安保解释自己刚才只是害怕飞行，真的没有其他问题。看到表妹突然正常起来，伦敦表姐倒是更生气了，她大声说，表妹在撒谎，她已经疯了！小A只能又赶紧出来安抚表姐，表示现在给飞机上的机组人员打电话，说不定还能赶上航班。伦敦表姐一看工作人员愿意帮她们赶上飞机，就顾不上表妹了。最后，三人拖着行李在机场一阵狂奔，终于在起飞前跑到了登机口，喘着气登了机。 本来这个欢喜结局的故事应该在此告一段落，但还有个小花絮。 小A说，她俩从葡萄牙飞往伦敦的飞机在途中遇到强烈气流，伦敦表姐从没坐过如此剧烈颠簸的飞机，在那一瞬间她有点后悔：万一表妹的预言是真的怎么办。 飞机当然最后安全着陆，不过这次“濒死”飞行经历却使表姐对表妹世界观的态度开始有所缓和。也算是件好事吧。 " }, { "title": "我为什么不害怕坐飞机", "url": "/sinantang.github.io/pr-7/posts/flying/", "categories": "Others", "tags": "philosophy", "date": "2020-03-01 00:00:00 +0100", "content": "我有一个朋友，很害怕坐飞机。不是光嘴上说说的那种，而是真的生理性害怕。他并不是胆小的人，但他一坐到飞机上就会变成另一个人。从飞机起飞到降落的整个过程里，他会紧紧抓住座位扶手，闭着眼睛，皱着眉头，汗如雨下——总之整个人差不多进入应激状态了。当然，想要消除这种恐惧恐怕需要一些专业帮助。不过我今天只想聊聊除了专业帮助之外的事。 我曾问他为什么这么害怕坐飞机。他说，在飞行过程中他对飞机完全无控制力，万一出事的话就是完完全全坐以待毙，所以害怕。他并不是从小就害怕飞行，而是高中时有一次搭跨洲长途航班遇上严重气流，从此患上飞行恐惧症。 而且他很好奇，我这么一个不敢玩儿游乐园里大部分游乐器械的胆小之人，为什么会完全不害怕飞行。 这个疑问也有道理，于是我就做了次自我剖析，为什么我不害怕坐飞机： 首先，在出事的概率上，飞机是比驾车要低得多的交通方式。这个大部分人都知道。但另一方面，生活是有无数这样的概率组合起来的，就算不开车不坐车出门也可能被车撞到，走在路上可能被花盆砸死（每年都会出这种新闻），坐家里可能被入室抢劫，吃东西可能不小心噎死……总之，只要活着就随时有死去的概率存在。虽然各种意外发生的概率差距可能非常大，但理解活着就是一种概率现象这件事对缓解对具体事件的恐慌有很大帮助。 再就是，就算飞机出事又怎么样呢？世界上没有不死之人，其中自然也包括你我。意外遇上了就是遇上了，没有机会逃生不得不死去，那就是命。对于这一点我确实可以相对坦然地面对。我这条命跟其余亿万人类的命相比毫无特殊之处。而且飞机失事算是一种快速死亡方式，我觉得，快死应该比在病床上躺几年才死更幸福吧。 当然，我理解很多人不能接受此时此刻就遭遇意外死去是因为觉得不值、后悔。后悔想做的事还没来得及去做就要死了，临头了方才领悟自己已浪费太多时间。那，这种醒悟其实是教你从此刻起真的要开始好好体验、好好利用自己生命的绝佳机会。这次疫情让很多人陷入恐慌，可是，那些因你恐慌而逝去的时间不正是你极度担忧可能永远失去的东西吗？世人唏嘘科比年纪轻轻就意外死去，但我却觉得，一个人能在死前完成如此大的个人成就，而且那就是他真正热爱的事业，这是一件多么难得又幸福的事呀。跟科比相比，有多少在42岁时死去却一辈子从未好好活过的人，他们难道不是更可怜可悲吗。 我是个经常进行“死亡想象”的人，即“如果我马上就要死了，我能接受吗”这类想象。这种思维练习让我更能感受到当下活着的感觉，比如脚踩过不同质地地面的触感，风吹过身体的感觉，身体沉重或轻盈的感觉，无聊的感觉，疲倦的感觉，满怀希望的感觉；除此之外，这类想象会让我更加认真对待、安排我想做的事的清单，想学舞蹈想学外语想升职想学乐器，这些都不该永远远在天边。以上这些具体真实的体验能很好地挤占“一回头不知道自己过去一周/月/年在干啥”的空虚感。最后，因为我理解我确实随时可能失去现在的生活，所以每次和爱人分别时，我都一定会认真说一句“我爱你”。 " }, { "title": "什么是爱国", "url": "/sinantang.github.io/pr-7/posts/patriotism/", "categories": "Others", "tags": "philosophy", "date": "2020-02-01 00:00:00 +0100", "content": "自从开始尝试独立思考以后，我就对自己是否爱国这件事心存疑虑。又看到有作家说，所有有祖国的人都天性爱国，否则就是自欺欺人，就是拧巴。这就更让我困惑了。我的困惑主要分为两点： “爱国”的“爱”，是什么意思；“爱国”的“国”，又是什么意思。 也许中文与英文对这同一概念的不同表达，能更好地在对比之中描述我的困惑。 英语里的“爱国精神”「patriotism」词根来自拉丁语「patriota」，意为“同胞”（fellow countryman）。现代英语抽象名词「patriotism」在权威字典里的解释是，“devotion to and vigorous support for one’s country”——如果说「patriotism」即“devotion”与“support”，那我可以很明确地自我确认，是的，我拥有某种程度上的「patriotism」。虽然世界上任何国家都无法获得我的“vigorous support”，但“some mild support”是我考量着可以付出的。 以上可以看出，英语里的「patriotism」不管是词根还是现代释义，都没有提到「爱」这种浓烈感情。古典字根里甚至都没有「国」的意象。相比之下，在看到中文「爱国」两字时，我的疑惑实在太多了： “爱国”的“爱”，和我爱家人朋友的爱应该是同一种感情吗？我见不到爱人时，会想念会担心；我看到爱人难过受伤时，我会更难过恨不得可以替对方承担他的痛苦。爱国指的是这种无时不刻都存在的强烈感受吗？如果我不想为国献身，甚至不想为国主动牺牲个人利益，那还算“爱”吗？如果把“我可以为爱人牺牲自己利益甚至生命”的这种感情称之为“爱”，那任何强度弱于此的感情是不是应该找另一个名词来描述？如果一个人说“爱国“，那是不是说明他已经准备好了为这种”爱“付出？毕竟，当你说爱一个人，说爱一个小动物，甚至只是一个品牌、商品时，如果你不付出任何行动或金钱，是没人当真的。 “爱国”的“国”，又是什么呢？是我长大的一方水土吗？是和我一样随机出生在同一片土地上的人吗？其中令人讨厌的人也算在内吗？是我与成万上亿人共享的悠久历史文化和文字吗？是烙在我基因里的种族吗？是印在我护照上的那个与世界上其他国家区分开来的政治符号象征吗？是政治制度吗？……毕竟，“国”不像爱人，我看不到也摸不着。 当别人说他爱国，或指控另一个人不爱国时，他指得是哪个意思啊？有的外国人，只因为喜欢中餐就要大喊“我爱中国”；有的人，觉得“爱国”就要包容与这个“国”相关的一切；有的人爱国，却是上战场以血肉自证。有人的爱国精神纯粹坚定到令人生畏，有人的爱国掺杂了自己都辨别不出的个人利益、自卑心理和集体主义惯性。 我是真的困惑。 " }, { "title": "5 Best Documentaries of 2019", "url": "/sinantang.github.io/pr-7/posts/documentaries/", "categories": "Film Review", "tags": "philosophy, documentaries", "date": "2020-01-19 00:00:00 +0100", "content": "假期荐片：2019最佳纪录片 去年看了几部优质纪录片，从中得到很多启发，在这儿推荐给读者。 Inside Bill’s Brain: Decoding Bill Gates 这部比尔盖茨的系列纪录片刚推出时就在中文互联网上小火了一阵。 关于比尔盖茨童年、青少年时的描述非常有意思，也是平时各种媒体报道中更少见的内容。最直接的感受是，比尔盖茨也太不适合拿来当鸡汤故事主角了，他成功难道是因为看书多或努力吗，难道不是因为绝顶聪明家世出众家教优秀能力超群心气儿高运气极佳吗…… 虽然说在片中比尔盖茨推进一些社会性变革性的项目时，也展现了一点点“科技是否能解决一切问题”的争议性，但整个系列还是太像比尔盖茨个人自传加社会项目宣传片。看完这个纪录片后，我反而对比尔盖茨的母亲玛丽·马克斯韦尔·盖茨产生更大兴趣，我更想读读她的生平传记（搜过并没有），也许是性别滤镜，但我总是觉得像玛丽·盖茨这样兼具女性优雅、母亲温柔与事业野心的女性更具魅力。 Trump: An American Dream 川普作为一个比比尔盖茨还高调、争议性很高、且在近几年来在中文互联网上频频引起争论的人物，这部关于他的纪录片系列推出后竟然不仅没像《Inside Bill’s Brain》一样火，连一点稍大的涟漪都没引起，豆瓣上给这部纪录片评分的人还不到给比尔盖茨纪录片的10%——这一点我还没想明白是为什么。 就这系列记录片本身来说，还是很值得一看的。我个人觉得比比尔盖茨纪录片更真实、更有意思。 我前两年看了一本川普早年传记《The Art of the Deal》，书里从川普角度讲述了他从布鲁克林起家进军曼哈顿地产业发生的很多重要事件，比如建设纽约君悦酒店、川普大厦，维修纽约公共冰场。那些事件在这个纪录片里也有叙述，但是从更客观的第三者角度描述、评论的，这两种不同的视角比较起来看还是很有意思的。不同角度对同一件事叙述的大差异折射出川普本人的真实性格：骄傲自大，敢说敢做，极具野心，善于操纵媒体和人心。这些评价并非单纯褒或贬，也最好不要带着道德变色镜评判。我个人认为，这些特性是不甘做小人物的人都多少共享的。有些人成功了，有些人没成功，但最终这小部分人的人生都不会很平静。 The Mind, Explained 中文译作《头脑揭秘》，是奈飞上《Explained（解释一切）》科普纪录片系列的一个关于“心灵头脑”的专题，比《解释一切》的平均质量还要高。一共5集，主题分别是：记忆，梦，焦虑，觉察，致幻药。每一集都让我学到新东西，非常推荐！尤其是最后一集，片中提供了一个形容人思维定势的绝妙类比： 想象你的头脑最初是覆盖着新雪的山坡，一个想法是从山顶滑到山底的雪橇在雪上留下的印记。一开始雪橇没有特定的滑行轨道，但渐渐地由于重合，有一条痕迹会越来越深、越来越难以逃脱。一段时间后，所有从山顶滑下的雪橇都会汇合到这条辙道最深最宽的滑道上——这条滑道就是你的思维定势（or thought patterns）。当思维定势形成后，你不仅很难看到其他思维方式，就算发现了也真的身不由己，无法逃脱现在所在的既定滑道。 这个类比和这一集让我的冥想水平一下子跳上一个大台阶。 如果你也喜欢探究“自我”，那你一定不能错过这部片子。 American Factory 《美国工厂》就不必多说了吧，因为涉及到中国企业家到美国开玻璃加工厂，加之中美贸易战的背景，又是奥巴马夫妇出品，在中文互联网上引起来为期不短的多种讨论。这还是今天这5部纪录片中，豆瓣上评分人数最多的一部，比剩下四部的加起来还多，可见此片的火爆程度。 在影片结束后，我陷入了一种冥想偶尔会创造的脱离自我、融入世界的情绪，在那种情绪里人会体验一种“大爱”：爱所有世人，希望每一个人都可以拥有很好的人生。我不在意工厂里的工人是美国人还是中国人，在我的眼里，他们都是普通人，是我们中的一员。作为一个普通人，我真的希望每个人都可以活成完整的人，都可以过上有尊严的生活（to live as a complete human; to be treated with common decency）。 感伤劲儿过去后，我想说，在公司占领现代世界的今天，每个人都应该懂得“不要为了别人/公司工作”。努力工作是好事，但要为自己工作，每一分努力都应该为你自己赢得更多话语权和自由，而不是单纯给公司创收。你把再多的时间精力健康家庭时光都折损奉献给公司也没用，“公司”只是一个人为设计出来的法律概念，它没有感情，它不在意你的牺牲，它只想最大化收益。另一方面，我认为现代文明政府理应承担起一部分培训失业人群使之再就业的责任。当某样技能被时代淘汰，政府和受益公司应该承担起提供新技能培训的责任。人是国家和社会的基石，而不是钱或公司。 对我来说，这部纪录片最大意义并不在于讨论美国为什么失去制造业，资本主义与社会主义的较量，美国梦是怎么破灭的，中国制造业有多厉害，中国工人有多善于牺牲自我，美国工人有多不懂理财和勤奋……而在于普通人生活的脆弱、真实和挣扎，与人的尊严和公司利益之间的冲突。 Our Planet 很美。最好在高清大屏幕上观看。 当你发觉自己又陷入日常琐碎纠结中无法释放自己时，不如去看看这个世界有多广阔、多样、丰富、细腻、精巧、美丽——你也是这片广袤宇宙的一部分。 如果你对其中哪部感兴趣，建议忘记我写的任何观后感，也不要看任何人或媒体的影评，那些都不重要；你应该直接去看片子，自己亲身去感受导演、人物、镜头想要传达的讯息情感，那种感觉，最是真实宝贵。 " }, { "title": "A Different Approach to New Year Resolutions 一份不一样的新年计划指南", "url": "/sinantang.github.io/pr-7/posts/a-different-approach-to-new-year-resolutions/", "categories": "Self improvement", "tags": "philosophy, planning", "date": "2020-01-16 00:00:00 +0100", "content": "作为一个具有长年与自己写的计划搏斗经验的人，最近几年我终于开始有点开窍，慢慢摸索出一些如何制定真正适合自己且能大概率愉快完成的计划的经验。我的方法论很可能和绝大多数你能看到的“如何做好新年计划”不太一样，不一定是最容易省时的方法，但也许是最可能让你生活一点点向你所希望的方向变好的方式。 计划为什么总是落空？ 相信每个人都经历过很多计划失败、心愿落空的失望，这并不一定是件坏事，但你认真想过为什么自己的计划一再失败吗？ 我认为究其根本，原因不外乎以下两个： 不够了解自己； 不够了解世界。 因为不够了解自己，不了解自己的内在动力、性格、生活习惯，所以信手定下不可能、不适合的愿景，或者仅仅出于虚荣或跟风而立下对自己意义不大的目标；因为不够了解这个世界的运行规律，无法大致预测个人行为对周围人、周围世界可能产生的影响，所以设计出不被概率偏爱的计划。 因此想要做好计划的元方法也很清晰：了解自己，了解世界。这八个字看起来简短，但恐怕会让一部分人暴跳如雷：你以为“了解自己，了解世界”很简单吗？有谁敢说自己真正做到了这八个字呢？反驳有理，所以我们不妨把这个方法论改成更有操作性的比较级：更了解自己，更了解世界。 这个方法论很明显不是春节假期在沙发上咬笔吃零食坐8小时就能实践成功的，而需要真正的生活经历与对生活的思考。往往我们只有在与周围世界的接触中才能逐渐发现自我的边界；只有真正经历过一件事才可能全身心学会在书本上的老生常谈。这绝不是最快捷的方式，但认真去践行的话将是最接近于“一劳永逸”的生活方式。 如何写有意思、能实现的新年计划：目标 + 习惯 + 挑战 看完一通大道理，可能还似懂非懂；但具体的方法技巧，我相信大多数人都能拿来即用，或者至少从中获得灵感。 积累了多年自己的和从别人那儿学来的经验后，我现在做新年计划的框架已演化成以下三大步：目标 + 习惯 + 挑战。接下来我会说一说这三个元素的背后动机、意义和实施方法。 目标 这应该是大家最熟悉的一步。谁不会给自己写目标啊：减肥20斤，年薪100万，6块腹肌，学一门外语，早起早睡……给我三分钟我能信口说出100个。这些常见的个人目标大部分时候都会落空，根本原因是上一节已经写过的“不够了解自己，不够了解世界”，但就算在表面技术层面上，确实也有很多提升空间。就目标本身来说，很多人给自己定的新年目标其实并不在自我掌控范围内，而很大程度上取决于多种不受控制的因素，比如他人、机遇、运气、自然规律、基因等。而人对结果的感受是由预期与现实之间的差距所决定的，一个合理可控的预期可以有效减少面对结果时可能产生的负面情绪，这就是期望管理（expectation management）。 什么是个人可控的目标呢？这个可以参考我去年从斯多葛哲学中学到的“内化目标（internalized goals）”这个概念：把目标从对外界的期待上收回，转化成对自己的管理。比如，“一年减肥20斤”其实充满不可控因素，但“每周运动三次”却完全可以通过个人行动来达成；”通过考试“或”赢得比赛“多少受到个人不可控因素影响，但”好好练习，尽自己最大努力“却是个人跳一跳努力可以达到的；“找到一份非常满意的工作”就更取决于市场、机遇和运气了，但“寻找心仪的求职机会并投出30份简历”却是完全可操作的。 我们无法管理外界或管理时间，我们能做的其实只有管理自己。 习惯 简单地说，你的所有思维惯性和生活习惯组成了你的日常自动驾驶（autopilot）模式。大部分人一天大部分时间其实都在自动驾驶状态中度过：从哪一侧下床，用哪只手刷牙，先穿哪只鞋，遇到糟心事下意识抱怨咒骂，遭遇负面情绪习惯性通过食物、刷社交媒体、购物来快速转移注意力——这当然是最不费力的、从人类进化过程中获得的“高效”生活方式。正是因为这是最轻松的生活方式，好习惯与不良习惯日积月累的差异，才必然会带来以时间为横轴的指数函数般的巨大差距。比如，人群中总有一部分人天天苦恼体重控制问题，也总有一部分从没考虑过这个问题的人，后者可能仅仅是因为拥有细嚼慢咽、吃到六七八分饱就停下的长期饮食习惯而已。 习惯就是那些每天、每次只需要做一点点，但累积起来只会越来越强大的事。坏习惯是如此，好习惯也是。做新年计划时，就不妨考虑如何能将一些目标落实分解为更具执行可能性的习惯，然后利用记录追踪日常习惯的工具（日历、APP、手账本日记本等），把那些看似遥远的年度目标拉到现在就可以开始、每天做一点的尺度上，一点点填充目标进度条。在计算机领域，“Divide and Conquer”这个算法利用的就是这个解决问题的思路。 举个例子，相信“读书”在我的读者中一定是个主流新年心愿。“今年读完30本书”这个目标，很难临年末十一十二月再突击完成；但若能基于这个目标养成“每天读书30分钟”的习惯，就可以不知不觉间把目标给实现了。大多数上班族每天通勤时间也至少有30分钟，在通勤路上翻十几页书或听会儿有声书，其实并不是很困难的事。 相似地，如果你的心愿是想要更加了解自己，那不妨养成每天睡前花十分钟冥想或写日记的习惯；如果你想要提升自己的写作能力，就可以在日历上定下每周六下午1点到4点之间必须坐在书桌前写东西的习惯。 挑战 当你只有一两个难度不大的新习惯在等着被养成时，执行起来的难度还不算太大，但如果你胃口太大，既想天天看书，每周健身3次，又想要冥想、写作、学外语、学烹饪、早睡……一下子全给安排上必然不现实，毕竟每个人的一天都只有24小时，健了身可能就没空写作，早睡了可能就没空学外语，此外还要休息玩耍呢……最后大概率会失败放弃，陷入“我应该做更多”的自律焦虑内疚（productivity guilt）中。 因此在给自己安排新习惯时，一定要慎重。一是在“质”上，要挑选那些真正值得融入未来生活中的好习惯；二是在“量”上，尽量不要同时尝试一个以上全新习惯，对于新习惯，则可以灵活设立一个尝试新习惯的期限。如果你从没常读书的习惯，那一下子下决心“今年我要每天都看30分钟书”那可想而知会很难履行。一个全新习惯一下子不加磨合地进入目前稳定生活遇到的阻力会很大，再加之你从没体验过“每天读30分钟书”这个生活方式，说不定这个习惯并不适合你，也许你更适合每周末集中三四个小时一口气读完一本书的方式，这样一味强行执行下去，不一定就能收获你期待的满足感。 这种情况下，不妨以做游戏的心态给自己设计有起止日期的“新习惯挑战”。想试试能不能养成天天读书的习惯，就可以给自己设立一个“30天每日读书挑战”，用每天打卡的方式激励自己；如果对连续30天做一件事不那么自信，完全可以给自己设计更宽松的期限，比如先从“7天挑战”开始尝尝鲜，觉得真的适合自己再延长到15天、30天甚至更久。这个方式不仅更加灵活现实，而且更好玩儿——谁不喜欢玩游戏啊！生活的过程比一瞬的结果更重要，没必要苦大仇深地在“读书”或“健身”这些事上跟自己作对，能以游乐心态去做别人觉得艰苦的事，你就已经赚到啦。 我如何计划 2020 my new calendar planner 2019年底新年假期时，利用以上“目标 - 习惯 - 挑战”思路，我在新日程本上做了新年计划。 第一步，不去想太多，把自己能想到希望在新一年达成的所有目标或心愿都一口气写下来。我大约写了十几个，都是已经内化的可以凭自己力量达成的目标。比如，读30本书，写30篇文章，去一个新国家旅行，开始一个家庭理财项目，帮助10个生活中的人，考德语B1，早睡，冥想，学弹几首吉他曲等等。然后我一条条审视，确认那一条是不是我真想做的事，以及是否是今年想做的，一年内能完成的可能性有多大。这个过程结束后就删掉了一些不适合放入今年计划的目标，此时剩下不到10个目标。 第二步，找到那些可以通过分解为习惯来达成的目标，比如读书、写文章、运动、冥想这些，分别定下习惯频次，比如每天读书，每周写东西，一周三次运动。对于那些我已经相当熟悉或难度较低的新年习惯，我就会通过 Google Calendar APP 上设置个人目标（Goal）这个功能直接安排进日程里。 credit: “How to set a goal in Google Calendar” from GoogleBlog Google Calendar 的这个功能只需要你选好（或自定义）一个目标，再确定频次和每次时长，它就会帮你自动安排进日程里，并且能不断学习你的安排喜好来调整未来日程安排；每次完成可以划掉一个日程来打卡，APP 也会记录这个习惯每周的完成情况，特别适合通过养成习惯来达成目标的使用场景。也能让你很直观地看到，贪心安排太多可是不行的（时间就那么多，做了A就占了B的时间）！总之很适合那些希望把每一天的生活都安排、记录得明明白白的人使用。 第三步，找到那些不适合分解成习惯的目标以及以前没怎么尝试过的新习惯，以“短期挑战”的方式复述出来。 比如，对于“早睡”这个目标，我以前频繁失败过，这次就先定了个非常和缓的“一周早睡”挑战。这个小目标我已经在这个月实践过了，所以有更多感想可以分享：我上周尝试了连续7天每晚11点睡觉早上8点起床的生活，那一周白天的精神状态和思考速度确实比以前习惯的午夜12点甚至更晚爬上床的日子要好很多；但每天睡满9小时其实会让我的生活其他部分变得紧张，这一点已经在微博（@思南说）上聊过，所以这个周我就改成每晚11:30睡觉，起床时间不变，事实证明晚睡这半小时对我个人状态影响很小。另外其中有一天我拖拉到11:45才爬上床，第二天哈欠就明显多些，大脑转速也慢下来。所以我的总结是，对我的身体、生活来说，最不影响白天精力和一天事情安排的睡眠时间是11:30。 如果你也在为找到适合自己的作息规律而烦恼，不妨试试我的方法。 除了早睡外，我还写下了“30天不用微博”、“30天不买（非生存必需）东西”等几个很有意思的小挑战。其实在计划时就有点小激动，就等着今年合适的时候把这些安插进生活中！ 第四步，剩下还有几个“待办事件”类目标，我就在今年内大致找一个日期，在日程本上标记一下，提醒未来的自己在那天开始着手做/计划那件事，比如旅行、理财。 小结 这篇文章分享了我对如何计划这件事的思考和看法，个人实践出的“目标 - 习惯 - 挑战”做年度计划黄金思路，以及我用到的工具。欢迎你也来分享你的看法！觉得本文不错的读者请热情评论转发点赞噢～ 谢谢 :) " }, { "title": "What I read in 2019", "url": "/sinantang.github.io/pr-7/posts/what-i-read-2019/", "categories": "Book Review", "tags": "reading, philosophy", "date": "2019-12-30 00:00:00 +0100", "content": "引子 Intro 有时好不容易读完一本声名在外、评分很高的书，我却没发觉此书好在哪里，不免催生出一点自我怀疑：读不出书的好来，大概是我的问题吧？然而几个月前我在微博上分享《禅与摩托车维修艺术》的读后感时，发现不同人从同一本书中读到的东西竟如此天差地别，不禁有些释然：读后感是非常个人的表达，如果我们想要保持个人原创性真实度（originality &amp; authenticity），那就必须学会接受自己会不喜欢大部分人都喜欢的书，会不能欣赏文艺评论追捧的作品。毕竟，我想要做的事是自我表达，而不是迎合主流网站上的主流书评，或试图讨所有读者喜欢。自从我的个人公众号被封之后，这一点也（一半被迫地）越发清晰了。因此，以下所有书评都夹带了浓重的个人看法；如果你对哪本书有不同想法，欢迎留言写写。 . 书单 Reading list 哲学 Philosophy A Guide to the Good Life: The Ancient Art of Stoic Joy | William Irvine 这是一本解读古希腊斯多葛哲学的通俗读物。古希腊的哲学家感兴趣的议题与今日大学哲学教授研究的议题非常不同，古希腊哲学家花了大量心思研究“什么是好生活”，“如何过上好的生活”这类与每个人都相关的接地气议题，而现代哲学家则在花大量时间来解构观点本身。如果你生活在古希腊，去找 Seneca，一名斯多葛派哲学家，问他，“我如何才能过上好的生活？”他会娓娓道来，比如你需要重新培养对已经拥有物品的好感，而不是渴望一切还没拥有的东西；你要追求平和的生活（tranquility），而不是名与利；你可以通过消极想象（negative visualisation）来重拾对当下生活的感恩；等等这本书里介绍的斯多葛学派主张。但如果你在现代社会去大学问哲学教授一模一样的问题，对方会先反问，“你说的好的生活是什么意思？”，“好是什么？”，“生活是什么？”，“你为什么想问这个问题？”……这类现代心理医生也热衷反问来访者的问题。 如果你尚年轻，没受过太多来自生活的打击，还有着“人定胜天”的自信，认为奋斗拼搏才是热爱生活的唯一方式，那此时此刻斯多葛哲学并不合适你，读这本书只会点燃你立刻跳起来反驳作者的斗志。但如果你已有一些生活阅历，对世界与自我的关系有过更多思考，想追求内心平和但不乏追求的生活，那大可以通过此书了解下斯多葛学派对生活的态度。 Zen and the Art of Motorcycle Maintenance | Robert M. Pirsig 有人觉得这是本游记，有人认为是对几个哲学问题的论述，有人把此书看作程序员的编程准则，还有人觉得这是个鬼故事……而我倾向于第二种看法。 “What is quality（什么是良质）？”是穿起主人公人生经历和哲学思考的一个问题。比如，当你读两篇主题相似的文章时，你是如何判断哪一篇更好的呢？大部分人都可以迅速凭直觉作出判断，“这篇更好”，但要说清楚为什么这篇更好那篇更差却是不容易的事。这本书对这个问题的讨论甚至直接创建了一个哲学分支：良质本体论（Metaphysics of Quality）。 通过对这个哲学问题的探索，作者讨论了认识论（epistemology）、哲学的历史和科学哲学。作者最后给出的解题思路让我不由得感到，我们正在苦恼的绝大多数问题，其实都早已被古希腊的哲学家们解答了。 但为什么这样一本不算好读的哲学小说能风行全世界几十年，销量五百多万册，我还没想明白。 理财 Personal finances 小狗钱钱 Kira Ein Hund Namens Money | Bodo Schäfer 如果你只能看一本理财入门书，那就看这本吧。如果你打算给孩子进行财商教育，那就从这本开始和孩子共读吧。这本写给孩子的理财书内容不深，但胜在把理财常识讲得寓教于乐非常浅显易领会，比一本什么“股票和基金入门”的教育普及效率要高多了。如果你在德国亚马逊上搜这本书，会发现评论区大部分留言是成年人买给自己看的。 我很喜欢书里写“成功日记”的建议——小狗钱钱建议想赚钱的小主人每天写五件为自己感到骄傲的事。这个习惯不仅可以增强人的自信心，更可以帮你意识到你擅长或喜欢做的事（两者常常是同一件事），进而更加了解自己。一个如此简洁但潜力无限的建议值得每个人都马上开始尝试——反正我已经开始这么做了。 看完中文电子版后，我就下单买了一本德语原版放在家里书架上，兼学德语和将来育儿。 小说 Novels 斯通纳 Stoner | John Edward Williams 这是我今年读过的最佳小说。 这是一本初版于1965年的小说，当时无人问津，但50年后突然火了。这一点还挺值得边读边咀嚼的。 主人公斯通纳出身贫困农民家庭，在本科时因意外发现自己对文学的热爱而弃农学文，在一战期间选择不去战场在别人异样的眼光中留校专心学术，毕业后留校教书，娶了自己一见钟情的女人，但在日复一日的婚姻生活中爱情和对爱情的期待快速死去，在教学与研究上兢兢业业，但因为种种原因在工作上再无重要作为。三言两语描述下来你会以为这是一个普通失败者的一生，但陪斯通纳走完一生之后，我竟觉得自己在他沉默外表之下得到了某种继续认真生活的力量。 尽管斯通纳的人生轨迹与我的几乎毫无相似之处，但在合上这本书时，我还是觉得斯通纳的心境多少让我感同身受。除了作者写得好外，也许也和我今年的状态有关。生活不再有那么大的变化，但每天普普通通的工作生活也需要力量和热情来应对，自我的边界与内心的平和也要时刻靠自己的心力来维护。 在这儿摘抄一段斯通纳死前的内心描写： 他冷静、理智地沉思起自己这辈子看上去似乎难以回避的失败来。他曾经希望拥有友谊和友谊的亲密，这可能会让他在人类的竞争中支撑下去。他曾有两个朋友，一个他知道时已经无谓地死去，另一个此刻远远地退缩进生活的序列中，乃至……他曾想得到那种唯一性，以及婚姻持续、平静的激情。他也曾得到过，但不知道如何处理，然后已然死亡。他曾经想要爱。他拥有了爱，然后又放弃了，把它释放进混乱的生命潜能中。凯瑟琳，他想。“凯瑟琳。” 他想当一名教师，他成了教师。但他知道，他永远知道，人生的大部分时候，他都是个冷漠的人。他曾梦想过某种正直，某种绝对的纯洁。他寻找过妥协和无关紧要的攻击性消遣。他曾想象过智慧，在漫长岁月的尽头，他找到了无知。还有什么呢？他想，还有什么呢？ 啊，有空就慢慢读一读这本书吧。 布鲁克林的荒唐事 The Brooklyn Follies | Paul Auster 这是我今年看的最轻松愉快的一本小说，很适合度假时翻。虽然情节并不总是轻松，但很有种以人与人之间的连接为底色的都市情景轻喜剧的画面感。当你读完《斯通纳》后需要缓一缓时，就可以翻开这本书。 杀死一只知更鸟 To Kill a Mockingbird | Harper Lee 这是一部现代美国文学经典之作。 作者哈珀李就是那个传说中得到朋友资助，辞了工作在家专心写作一年写出自己的第一本（也差不多是唯一一本）书——《杀死一只知更鸟》初稿的小说家。 书里有些观点是超（小说背景）时代的，但还有些文字间被动传达出的想法反而侧面表现了正派主人公心中暗藏的种族歧视。书里白人群体的形象很多样化，比如正义代言人、中产、社会底层、怪人等等；但黑人群体的形象就非常单一：差不多都可以归到“胆小善良的受害者”中去。 除了主人公小女孩儿外，我觉得最吸引人的角色是怪人阿瑟。阿瑟这个角色以及美国南方黑白种族间的紧张关系，让我想起《美国种族简史》作者写到的，“在美国，人与人之间学会了保持距离以维持平和，是因为彼此的差异太大”。 月亮与六便士 The Moon and Sixpence | 毛姆 对于坚持追求百分之百的自我、追求 inner calling 的人来说，他们必须牺牲掉除了作品外的一切，包括世俗道德观念、与亲朋的关系、身体健康、舒适生活、名与利……然而就算是这种魔鬼交换也并不能确保伟大的作品。因此绝大多数人都选择了另一条更可预期的别人走过的道路，这与特定文艺天赋的多少并无关系。 寻羊冒险记 A Wild Sheep Chase | 村上春树 村上说他所以喜欢动物，其原因有两个，一是动物不能说话，这点让他喜欢得不得了。“虽然拥有某种自我，但是不能将其化为语言——对这样的存在我怀有极大的同情。”另一个原因在于有时能够以动物为基轴传达许许多多的事情。 《寻羊》是第一部村上自己认可的成熟小说，也是最为欧美读者所熟知的村上长篇小说之一。 在村上早中期的小说有很明显的战争渗入背景，但他小说的主角从来都不是一个骁勇善战的士兵，恰恰相反，村上总是会把一个看似柔弱寡断、情感丰富但不合时宜的人推到主角位置。这样的主角也总会在千回百转之后完成命运交给他的莫名其妙的使命。《寻羊》也是如此。这部作品带有很明显的政治隐喻，但对于像我一样不怎么了解日本战后政治风云的人来说，跳过这一层读起来也是很有意思的故事。 世界尽头与冷酷仙境 Hard-Boiled Wonderland and the End of the World | 村上春树 非常精神分析风的一部超现实小说，处处是关于自我与世界关系的隐喻。一路解谜很有意思，但读到最后当男主人公决定为了爱情留在世界尽头小镇，而让影子独自回到正常世界时，我有点没被说服：啊，就这样啊？ 没有女人的男人们 Men Without Women | 村上春树 坦白说这是我看过的村上春树写得最烂的作品。村上显然不像东野圭吾一样长篇短篇写作都能驾驭，这部短篇小说集简直有点惨不忍睹。如果你不感兴趣从文学批评角度来研究为什么村上会出这本短篇集，就可以安全跳过这本。 边城 Border Town | 沈从文 沈从文的个人风格独特，《中国现代文学史》里说他是“印象主义者”，我觉得这个描述挺合适，读他的小说有看莫奈画作的感觉。因为很美所以内容似乎也没那么重要了。 沈从文的创作生涯很短，背后也是一段悲惨的历史，他留下的文学作品不多，这部应该是人人必读了，很惭愧到现在才看了个完整。 三三 | 沈从文 与《边城》相似的短篇。没读够《边城》的可以接着读《三三》回味下。 诗歌 Poetry Straybirds 飞鸟集 | 泰戈尔 今年开始读懂并能够欣赏泰戈尔的诗集，书评已经写过了。 心理 Psychology 被讨厌的勇气 Courage to be Disliked | 岸见一郎、古贺史健 这是一本介绍阿德勒心理学的书，我并不赞同阿德勒心理学的所有观点，但确实现在很多年轻人会喜欢这本书。我上个月写了这篇文章，可以看作与此相关的随笔。 阿德勒心理学（即“个体心理学派”）在一个多世纪前就已出现并开始发展，但这本阐述阿德勒心理学的书近几年突然变得很火，这种现象很可能和现代社会中越来越强烈的个人主义倾向有关。阿德勒心理学非常强调“人际关系苦恼”在人生活中的影响（所谓“一切烦恼都来自人际关系”），这映照了现代人与人之间越来越松散的人际关系，因此在自称“社恐患者“现象泛滥的原子化现代社会中自然会很受欢迎了。 断舍离 | 山下英子 “断绝不需要的东西；舍去多余的事物；脱离对物品的执着” 应该很少有人还没听说过这本书的吧？近几年在物质极度丰富的国家地区，极简生活方式开始变得流行。而“断舍离”只是其中一种日式极简生活方式。“断舍离”并不仅仅指大胆扔掉所有旧物品，而是一种审视自己当下生活的心态。削减生活中的物品数量，不再在意流行时尚，是一种把人而非物品放在生活中心的思维方式。看到一件物品时，应该想，“我真的需要这件东西吗？我喜欢这件东西吗？”，而不是，“这件东西还能用吗？功能丰富吗？样子好看吗？” 这本书用词不够准确，逻辑也并非处处讲究，甚至还有些伪科学的内容，但对于有需要的人来说，依然会有所帮助。因此对于此书只要抓住中心论点即可，不必过度纠结文字和表述细节。 传记 Biography 费马大定理 Fermat’s Last Theorem | Simon Singh 数学真是迷人啊！此书讲述了数学史上赫赫有名的费马大定理的由来、发展和长达几百年的漫长证明过程。 英国数学家 Andrew Wiles 在独自利用业余时间秘密研究了6年之后，在上世纪末时以近乎戏剧化的方式在剑桥大学一间会议室的黑板前写出了对费马大定理的证明过程。格外吸引我的倒不是 Wiles 最后的“成功瞬间”，而是他如何顶着巨大心理压力在6年时间里默默试图解决人类历史上最难的数学问题之一。这个故事最后还有个好事多磨的转折——Wiles 第一次发表的定理证明在两个月后被人发现存在一个瑕疵，他之后又花了一年多时间试图修补但无果；就在他即将放弃这次证明成果之时，他想到一个可以绕过此瑕疵部分的修补证明方法，之后他和一个学生合力继续了证明工作，在第二年春末终于发表了完整的费马大定理证明。 此书是由科普作家 Simon Singh 写就，充分照顾了普通大众的数学水平，既写出了数学的魅力又不至于让普通读者挠头。非常推荐喜欢数学的人、以及想理解为什么会有人喜欢数学的人来读这本书！ 思维 Other nonfiction The Back of the Napkin | Dan Roam 这是一本应该直接去 Blinkist 或类似产品上读二千字浓缩版的书（然而 Blinkist 上并没有）。 作者手把手教读者如何手画视觉思维图，一来帮助你在工作上更有效地向别人传达观点，二来手画视觉思维框架本身也可以帮助人更好地思考——我觉得这一点更加值得学习。毕竟画画最多只能锦上添花，重要的是你想表达的思想本身是否有价值。 Skin in the Game: Hidden Asymmetries in Daily Life 非对称风险 | Nassim Nicholas Taleb 我认为这是塔勒布最值得读的一部书之一。虽然中文译名不怎么样，但书确实很有洞察力，配套绝妙的例子，值得摘抄记住用在自己的写作中。 “have skin in the game”这个短语原指一个人投资了某个公司，因此就会从这个公司的营收中收获既得利益。而塔勒布在这本书里想要说的就是，只有当一个人在一件事中有相关利益时，你才能信任他的建议或决定。比如，当一个没有千万家产的人大力鼓动富人捐款时，他的言论就完全不值得考虑，因为他自己的钱财并不会受这件事影响。在一件事中，参与的各方往往有不同比例的“skin in the game”，也就是不对称性。这种不对称性可能是信息上的、风险上的或喜好上的。我们越多地思考这些生活中处处存在的不对称性，就能够越多地理解这个世界，做出越明智的决策。 Antifragile: Things That Gain From Disorder 反脆弱 | Nassim Nicholas Taleb 塔勒布的这本书也非常有名。主要解释了作者自己发明这个词“反脆弱性”，即从环境变化中受益的性质。 围绕这个主题讲了不少有用的概念，只不过我在看了连续看了几本塔勒布的书之后审美疲劳了，感觉这本比较一般。 The Black Swan 黑天鹅 | Nassim Nicholas Taleb 又是一本塔勒布写的非常有名的书，不过我觉得这本书看看“浓缩版”就够了。书的主要思想非常集中简洁（已经被一个这本书发明的专有名词“黑天鹅事件”所概括），但相当重要。看完就去买保险、开始思考如何理财是正解。 The Moral Landscape | Sam Harris “道德”是什么？为什么我们会觉得特蕾莎修女高尚，告密者可鄙？ 作者在这本书里阐述了人类的道德观是如何“进化”而来的，道德观与个人康乐感受的关系，以及面对道德两难境地时应该如何行动。作者还花了很多篇幅来论证为什么道德相对主义（即认为一切道德判断都是相对的，不同的文化有不同的道德观点，没有绝对的高尚和卑鄙）行不通，我怀疑这个论战可能是作者写这本书的目的之一。因为道德相对主义确实是近些年来欧美社会一小部分人秉持的观点，他们宣称别的文化的陋习不是陋习，而是应该尊重的文化习俗，比如童婚制、多妻制，甚至割礼，如果你批评这些落后陋习，就是歧视。Sam Harris 在这类讨论中算是非常敢言的公众人物了，因此也时常中枪…… Deep Work | Cal Newport 这本书的观点不算新鲜，主要讲了现代科技对人的干扰，多任务处理模式的低效，深度工作的好处。然而作为一本自助（self-help）书，观点本身倒没那么重要，更重要的是如何让读者意识到这些观点的重要性和意义，以及提供一些自助建议。 我比较赞同且也在实践的一个建议是，计划你的所有活动，plan everything! 你的工作、副业、爱好、跑腿、吃饭、睡觉、朋友聚会等等，找一个日历 APP（我用 Google Calendar），把一切你打算做的事都放进日历里，这样你的每日计划是否合理一目了然，而且这对真的开始那些“总想开始但永远在拖延”的爱好类活动（学一门新语言、乐器、锻炼身体、阅读）有很好的督促和激励作用。 技术 Technology Cracking the Coding Interview | Gayle Laakmann McDowell 这本再版6次的书被誉为技术面试圣经。用这本书标题的缩写“CTCI”在网上搜索，可以找到很多网友对里面算法题目的讨论。基本上，如果你在准备大科技公司的技术面试，或者仅仅想要巩固基础计算机和算法知识，这本书是本很不错的起点。比起直接去 LeetCode 刷题，先从书看起会更有体系，更有利于计划学习进度。 Learn Ruby the Hard Way | Zed Shaw 非常不适合已熟练至少一门编程语言的人通过此书来学习 Ruby。当然，并不是说这本书本身写得多么不好。毕竟绝大多数教一门特定编程语言的书都是这么写的。 我在年底开始学写 Ruby 的过程中意识到，似乎很少有人为已有一定编程基础的人写脱离语法细节而注重计算机基础概念在不同编程语言范式中的体现和比较的“教程”。或许大家都默认已经会一门编程语言的人就不需要跟着教程来学习一门新语言，跟着代码例子边抄边谷歌就行了，或许大学计算机科学专业知识已经覆盖了这部分知识，又或许很少有人意识到那些更低层的编程范式知识的重要性…… 自学是门手艺 | 李笑来 我在这本书里学到的最有用的概念是“过早引用（forward references）”：从来没人来定义、解释一个的概念，直接被拿来使用。这件事若发生在程序中（即直接使用未声明的变量），程序会报错；若发生在学习的过程中，会大大阻碍人理解新知识的过程。然而，这个现象确实无处不在。尤其对于像我一样完全自学计算机的小白来说，过早引用简直是制造自学路上困惑的最大敌人，一不注意就可以从维基百科一个页面上顺着一个词条再一个词条再一个词条的维基黑洞分心分到天荒地老（我在写这一段时发现“维基黑洞”还真有个维基词条 :）。作者提供的解决思路是什么呢？好奇的话可以去直接读一下相关章节。 如果你一点编程知识都没有但有心在2020年开始学习编程，不妨从这本书开始。 Further reading What I read in 2020 (bilingual) What I read in 2018 (in Chinese) What I read in 2017 (in Chinese) " }, { "title": "表达的内容与方式，哪个更重要？", "url": "/sinantang.github.io/pr-7/posts/what-is-more-important-content-or-means-of-expression/", "categories": "Self improvement", "tags": "philosophy", "date": "2019-11-23 00:00:00 +0100", "content": "前几天在一个群里看到大家在讨论播客。有几个人提到《翻转电台》，认为主创李厚辰说教语气太重，听着很不舒服，所以不喜欢。我看到时有点惊讶，一是我不觉得李厚辰很说教；二是这类在互联网上很常见的争论再次把一个很有意思的话题推了出来，不如今天来写写我的想法——“表达的内容与表达的方式，哪个更重要？” 根据我平时潜心上网获取的人肉取样，大部分网民在遇到具体事件时，都倾向用行动表达出“表达的方式比内容更重要”。比如，“这个博主说话阴阳怪气，管他说什么”，或者“不管他说什么，骂人就是不对”，或者“他已经这么诚恳了，还能说错了吗？”。可见相当多的人会下意识地以别人表达观点的方式来评判观点本身的价值。但若真的在脱离个例的情况下，把这个议题放在每个人眼前，逼他动用一点理性做出选择： 温柔好听的胡说八道和枯燥傲慢的智思真言，只能选一个，你要选哪个？ 我觉得此时其中会有不少人会选择后者。再缩小下表达内容的领域，如果不是任一领域，而是生财之道或医疗保健，那肯定会有更多的人选择后者。 就算个人不这么选，历史也会在表达内容与表达方式之间选择内容。你听说过任何一个人仅因为语气温柔态度友善而垂名青史吗？反倒是那些真正有才华的人，脾气再怎么暴躁、人再怎么无礼也会被人容忍甚至写入名人趣闻。拿名人举例并非说平时上网冲浪还得拿思想家作家的标准来衡量网上言论，而是以极端情况来证明，真正有价值和生命力的，是表达的内容，而非表达的方式语气。作为普通人，就算没能力评判言论本身的价值高低，也确实没必要因为别人说话语气不讨喜而不假思索地全然否定他的观点。 那为什么大部分人都会下意识地基于表达的方式来评判表达的内容呢？当然啦，这个问题听着很像废话：自然所有人都天生爱听好听的话，不喜欢难听的话啦；就好像所有人都喜欢别人夸自己，而不是批评自己。但问题在于，外界的大部分言论观点都不是在评价你这个个体，而是在表达、评论某个观点或某件事。如果能把“观点”与“持有该观点的个体”区分开，其实就已经可以减少很多烦恼了——当别人不赞同你的一个观点时，并不代表他在攻击你这个人。 另一方面，生活在发达的商业社会里，大家都习惯了接受“顾客就是上帝”的专业吹捧服务。加之近几年火起来的知识付费行业，在商业赚钱行为外披了一层“知识”的皮，使很多人习惯了一边享受和风细雨的“书童”服务一边沉浸在“长知识”的良好感觉中。但这些的核心依旧是商业行为啊，商业行为的中心是顾客，因为商家要最大程度地赚钱；而单纯的言论表达行为的中心是表达者自己，是他有感而发，是他有话要说，并不是特意以一群观众为目标带着特定目的地精心准备了一番言论——后者大家称之为演讲。 一个绝佳的例子就是微博上的科学科普博主 @GK同人于野（万维钢），同时在某知识付费平台上也有设付费专栏。他在微博上的观点常常很犀利尖锐，曾有网友留言，说觉得微博上的同人于野和付费专栏里的万维钢，仿佛是两个人。同人于野的回答是，他在付费专栏里是位“谦卑的知识服务者”。 最后，是不是任何时候都是内容重于方式呢？倒也不是。我认为这是个“亲疏有别”的议题。对于亲近的家人朋友，很多时候说话方式确实比内容重要。因为彼此亲近，自然会因对方的话语产生情绪评判，也会在意对方的感受，因此必然需要在意自己话语带给对方的感受。比如，应该没有父母喜欢听子女以嫌弃的语气劝自己戒烟吧。“吸烟有害健康”这个论点再正确也无法均衡家人厌烦语气带来的感情伤害。 初中时我在电视上看到一期类似“真心话”的综艺节目，节目组请一组父母一组孩子（二十来岁的年轻人）来，讨论父母对孩子的期待。其中有一个问题是问双方，“父母想听真话还是甜话”。孩子那一组先回答，大家都统一认为是“真话”；接着父母那一组再回答自己的想法，结果在场几乎所有家长都说“甜话”，在场的孩子都震惊了……当时年幼的我也对此感到惊讶，有一种“被骗”的感觉——父母明明教育我们要诚实，但实际上却不想只听真话？ 长大之后才渐渐明白，与最亲近的家人朋友之间，确实没必要想着占个言语的上风，关心对方就付诸实际行动，嘴上最多就停在善意的唠叨就行了。 ——难道连朋友之间也不能提善意的批评、建设性的意见吗？ 我的看法：一，你说的不一定对；二，对方不一定就不知道什么是对的；三，“诤友”是一种相互关系。 " }, { "title": "究竟是什么在决定你的生活", "url": "/sinantang.github.io/pr-7/posts/what-is-deciding-your-life/", "categories": "Thinking Tools, Book Review", "tags": "reading, meditation, philosophy", "date": "2019-11-17 00:00:00 +0100", "content": "我在弗莱堡读研时通过 S 认识了两个别院的同级校友，一个是德国人，一个是波黑人。这两个男生年龄相近专业相同，但偶尔见面时总会给我截然不同的感觉。德国小哥虽然帅气但永远带着一股忧郁气质；波黑小哥相貌平平但人很阳光有活力。过去几年从 S 那里我断续听来关于两人不断更新的生活境遇。德国小哥成绩好，有个自高中交往至今的初恋女友，但他总是处在焦虑中，焦虑毕业后找工作，焦虑与女友的关系——他们之间的关系既不和睦也不健康，但他总以“沉没成本太高”为由拒绝提分手；波黑小哥学习凑合，没什么钱，但由于性格阳光擅长运动而特别招女生喜欢。毕业后，波黑小哥由于需要签证只能快速接受了一份工资微薄也不是很有发展空间的工作；德国小哥在医院找到了一份工资不错也有更多发展潜力的工作。但如果你在现实中与这两位相处，你会发现波黑小哥几乎每天都很乐观快乐，心态放松；而德国小哥永远都不太开心，他不满意自己生活的现状，他总在把自己与别人比较，他对自己的亲密关系不满意但不肯结束。自认识他俩之后，我第一次通过现实案例深刻顿悟，“原来人真的活在由自己创造的世界里啊”。 在我这个局外人看来，我看到的是这个德国小哥在自愿吃苦：亲密关系不和睦，一边不肯分手一边消极挣扎；学业工作大体顺利，却总把注意力放在与混得更好的人比较上——难道不是他亲手创造了自己的痛苦生活吗？同时，我还看到波黑小哥在主动选择自己的生活：虽然经济条件、工作收入都不怎么样，但他却拥有随时遵从自己内心做出选择的能力，比如当交往了一个不合适的女友时可以毫不费劲地当断即断，当他发现某个朋友只会给自己带来负面影响时，也可以没有负担地切断联系。 不久前与一位新朋友见面，聊到信仰问题，我说我认为人活着需要信仰，而且“you don’t have to be religious to be spiritual”。她问我的信仰是什么，我以前没认真考虑过这个问题，但当下却不假思索地说道，“每个人都活在自己创造的世界里”。那时我才发现原来这个看法已经在近几年渐渐成为我人生观的一部分。 这个“一人一世界”信念的基础来自我的一次“地铁差点坐过站”经历引发的一个重要感悟—— “是我们对一件事的评判，而非这件事本身，引发我们的感受。” 在日常生活中我是个容易紧张担忧的人。有一次坐地铁时，我低头看书没注意站台，一抬头看到一闪而过的站台似乎不很眼熟，因为担心坐过站我立刻感到心跳加速手心出汗。但摸出手机谷歌地图一查，其实还没到站呢。彼时我突然意识到，并不是坐过站这件事本身让我紧张（毕竟这件事并没有真的发生），而是我个人对坐过站这件事的预期与评判直接引发了当时紧张担忧的感觉与生理反应。就算真的已坐过站，这件事真的值得我如此忧虑吗？再者，坐过站这件事并不会在每个人身上都引发这样的反应。 一件事还没发生，也不一定会发生，但我们却已经开始预期那件事，并提前开始感受由它引发的负面情绪；那些我们提前给自己安排的负面情绪常常超过了那件事真正可能带给我们的负面影响——这个场景在生活中实在是太常见了。有多少次，我们花了很长时间焦虑、害怕、心烦的一件事，真正发生时才发现其实并没什么大不了的。但那些事后看来不必要的负面情绪却真实地占领了当下的生活。 半年前我看了一本介绍阿德勒心理学的书，《被讨厌的勇气》。我发现阿德勒流派对如何看待过去经历的观点与我的“坐过站”感悟相当相契，不过前者是如何看待过去，后者是如何看待未来：阿德勒心理学一反弗洛伊德的“创伤论”——“任何经历本身并不是成功或者失败的原因，我们并非因为自身经历中的刺激——所谓的心理创伤——而痛苦，事实上，我们会从经历中发现符合自己目的的因素。” 使我们痛苦并非一段过去的经历，而是我们赋予这段经历的意义。相似地，使我们焦虑的并非未来的某件事，而是我们对那件事的预期和评判。 从意识和自我觉察的角度来看，我们每时每刻确定拥有的只有“当下”，当下的感觉主宰了我们对自己生活的感观。然而绝大多数时候我们都在用“过去”和“未来”填充“当下”，以致连唯一的“当下”也失去了。但是对自我觉察能力不强的人来说，很可能连这份失去也感觉不到，于是常常不自知地就在各种不同的情绪劫持中建立对生活对世界的感知。 但这里并不是在责怪那些为自己制造了一个糟糕世界的人，毕竟他们自己已是最大的受害者。更多地是想传达这个把主动权交还给个人的人生态度：“无论什么境遇，每个人都拥有为自己的生活作出选择的机会”。人无法改变已经发生的糟糕经历，但可以选择赋予那段经历的意义；人无法决定未来发生什么事，但可以选择面对它的态度与期待。甚至很多时候，一个人在当下凭自己力量能够做的不仅仅是调整期待，而是鼓起勇气选择那些能让自己未来更幸福的道路，比如，德国小哥就可以选择跟女朋友分手，重新开始下一段虽没那么舒适但肯定会更幸福的生活。 Do what makes you happy, now and in the future. " }, { "title": "读《飞鸟集》，谈谈审美", "url": "/sinantang.github.io/pr-7/posts/stray-birds-and-taste/", "categories": "Reading Notes, Book Review", "tags": "reading, poetry", "date": "2019-09-20 00:00:00 +0200", "content": "记得中学时在语文课本上学过泰戈尔的诗歌，明知是出自诺贝尔文学奖得主的大作，但那几句意象浅显的白话散文实在没法让我领略它美在哪里经典在哪里。比如唐诗宋词，格律优美用词讲究朗朗上口，但凡听懂读懂中文的人都多少能感受到美；而现代诗，有点像所有现代艺术，一方面看起来似乎创作的门槛低了但欣赏的门槛却高了——我以前如是想。 然而最近我突发奇想把《飞鸟集》英文版完整读过一遍后，竟然对泰戈尔诗歌的想法完全变了。不再靠看别人赏析来硬灌给自己“这诗很棒”的想法，我自己突然品出来《飞鸟集》美在哪儿，还想明白了自己小时候看不懂的原因。于是就想以这篇文章来记下我对普通读者可以如何欣赏泰戈尔诗歌的几个想法。 以下是完完全全业余、个人的看法，没参考着文学评论或文献研究来修订，所以期待你不要抱着学习权威专业知识、而是探索个人感受现代诗之美的一种方式的期待来阅读此文。 1 在这次读《飞鸟集》的过程中，我深刻感受到自然主义在这本诗集中的主导地位。 诗集被日、月、风、雨、鸟、兽，季节变迁、天气变化等自然现象占据了大量篇幅，除了描绘这些自然景物或现象外，还有人在其中生活的感受，以及以自然为隐喻的生活哲理。作为一个从小在城市长大的人，我小时候对这些自然景观并没有太多切身感受；小时候看《飞鸟集》，诗句就如同穿过指间的风，无法引发我的注意。而现在呢，并没有突然回到大自然的怀抱，但由于现代生活携同电子产品的猛烈进攻，终于让人迟钝地意识到我也许失去了什么。于是突然间对城市中或残余或人工的大自然痕迹敏感起来，变得喜欢细细凝视一棵树一朵花一只鸟，注意到从日出到日落太阳在天空留下的颜色，认真感受风经过身体的触觉和风带来的气息。 Stray birds of summer come to my window to sing and fly away. And yellow leaves of autumn, which have no songs, Flutter and fall there with a sign. If you shed tears when you miss the sun, you also miss the stars. The trees, like the longings of the earth, stand a tiptoe to peep at the heaven. 而《飞鸟集》传达了人类曾经完全在大自然的环抱中跑跳的动态镜头，因为没有现代生活不间歇的干扰而能全然注意到此时此刻来自大自然的信息。现在读泰戈尔，古典自然主义生活的形象跃然纸上。 Sorrow is hushed into peace in my heart like the evening among the silent trees. 2 另一个我小时候看不懂《飞鸟集》的原因在于其中很多小诗的哲学见解不能为小孩子所理解。比如下面这几首诗： The Great walks with the Small without fear. The Middling keeps aloof. I cannot tell why this heart languishes in silence. It is for small needs it never asks, or knows or remembers. We read the world wrong and say that it deceives us. The bird thinks it is an act of kindness to give the fish a life in the air. 当人生阅历和抽象思维能力尚且不足的小孩子看到这些诗句时，她只觉一切都像白开水，想不明白作者想表达什么，或者以为想明白了也不懂为什么值得书写。 3 宗教元素也是阻碍了我小时候理解《飞鸟集》的原因之一。作为在社会主义唯物史观无神论精神环境中长大的中国人，很久以来“神”都被我过于轻易地看作“迷信不科学”的象征。直到后来出国，特别是当最近一两年开始冥想练习后，我才对科学唯物体系外的思想产生了彻底改观和兴趣。 When we rejoice in our fullness, then we can part with our fruits with joy. I cannot choose the best. The best chooses me. Blessed is he whose fame does not outshine his truth. Every child comes with the message that God is not yet discouraged of man. 泰戈尔的父亲是地方印度教宗教领袖，再加之他生活的印度（现孟加拉）文化深受宗教影响，所以他的诗歌必然常常充满宗教见解，比如泰戈尔获得诺贝尔文学奖的作品《吉檀伽利》即为向神的献歌。如果缺乏对宗教的基础认知和开放心态，肯定会大大影响对泰戈尔诗歌的理解。 My wishes are fools, they shout across thy song, my master. Let me but listen. 而我在今年冥想的练习中也感受到，有些来自印度教佛教禅宗的东方宗教思想，其实也完全可以把他们从某个具体宗教中拆离出来，而当作对自己意识（consciousness）世界的探索，也同样会遇见与“神”对话的启示时刻（此处的“神”非任何具体宗教里崇敬的神）。比如下面这两首小诗： When we rejoice in our fullness, then we can part with our fruits with joy. I cannot choose the best. The best chooses me. 就把一个人在对神性探索中对这个世界呈现的另一种态度表现得恰到好处。 4 这次还发现一点从《飞鸟集》中折射出的当时印度社会现状，比如女性权益问题。泰戈尔家族是婆罗门种姓，当地望族。泰戈尔自幼接受良好教育，在自己作品中积极参与印度的政治、社会和教育问题的讨论，但他似乎很少回过头来以同样积极批判的目光审视身边女性的处境。他的妻子穆里纳莉妮嫁给他时才10岁，因为他父亲希望泰戈尔早日结婚好好“收心”照料家族产业。穆里纳莉妮嫁给泰戈尔时没念过什么书，但在婚后学会了孟加拉语英语和梵语，还翻译过经典著作出演过舞台剧，可以看出她很聪明也有文艺才能，但当时的印度社会并没有她的舞台，她的全部生活就是围着丈夫打转。 有些评论说泰戈尔关心女性权益，但我对此表示怀疑，特别是当我读到《飞鸟集》的以下小诗时： Woman, when you move about in your household service your limbs sing like a hill stream among its pebbles. Chastity is a wealth that comes from abundance of love. Dream is a wife who must talk. Sleep is a husband who silently suffers. Woman, with the grace of your fingers you touched my things and order came out like music. 当然作为一个教养良好家境富裕的人，泰戈尔与妻子的婚姻生活恩爱和谐，他并没有主观上压制女性权益的想法或动机，但他也许从未意识到印度社会中制度性的对女性的歧视。 我欣赏文艺作品的小心得 所谓读懂诗看懂画，第一步很简单，即观察到诗（画）本身描写了什么，比如三朵花两只鸟一次日出；第二步是看到站在这些意象背后的隐喻、作者境遇、时代社会背景、“主义”等；第三步则是能感受诗歌的立意、主题、思想。 当我们说“看不懂”时，往往还停留在第一步上，只触摸到作品的最表层；这就好比只看到一盘菜的照片一样，哪怕照片拍得再生动，那也和自己亲自去尝食材品味道是完全两码事。 但小时候上语文课时，我们也把参考书上对第二步第三步的总结抄下来了啊，但为什么那算不上读懂、欣赏呢？区别在于到底是主动感受还是被动灌输。因为“美”是一种内在感受和评判，一味遵从别人的解读反而会掩盖自己的真实感受。也许自己的真实感受很多时候混乱幼稚迷茫，但那才是你真正拥有的审美基础。 我一直认为审美虽然天赋占了很大成分，但也可以部分后天培养。比如当一个人增长了历史文化社会政治基础知识后，往往更有可能自主走到第二步。另一方面，生活经验和人生阅历也很重要；小孩子再有审美天赋也很难看懂哲理性思想性太强的作品。最后，尽早多接触些优秀的文艺作品也非常重要——这也许是最重要的途径——早些培养自己对美的敏感度。品位是个年龄越大就越难改变的东西，曾有研究表示人过了35岁之后就基本不可能再接受新的音乐风格或新的口味。 接下来我想再读一读泰戈尔最有名的诗集《吉檀伽利》。 如果你也看泰戈尔的诗，欢迎在评论区写写你的见解 :) " }, { "title": "从 Hello World 到软件开发 | 读者信箱", "url": "/sinantang.github.io/pr-7/posts/helloworld/", "categories": "A Developer Guide for Newbies - Starting with Python", "tags": "programming, career", "date": "2019-09-15 00:00:00 +0200", "content": "积压了一些读者留言，于是想到新开一个栏目“读者信箱”，专门用来解答一些有代表性、我又有能力答的好问题。 这次回答的问题很典型，相信很多学生都有过相似疑问—— 刚开始转行写码的人在学完第一门编程语言的基础语法后都会面临这么一个瓶颈，这也是他们在软件开发生涯中面临的第一个瓶颈：基础语法是懂了，课后编程习题也能做，但还是不知道怎么才能写出 production code，也不知道一个完整的软件产品是如何设计、构架、实现出来的。 去看优秀源码，去找热门开源项目仿照——是很多人会给的建议。但实际上这类建议的可行性很令我怀疑，因为对初学者来说，他们往往不知道什么是好的代码，也难以靠自己领悟出那些代码好在哪里差在哪里；自己找开源项目练手难度也很大，因为初学者不易估计出项目需要时长以及可能涉及的广度与深度，同时也因为缺乏明确目标、步骤和同伴而很容易失去动力。 所以依我看呀，最容易的成功途径还是去“蹭”别人、公司的现成软件项目，也就是去做实习。对于小白来说，很难找到能比实习更快增长开发经验和能力的方法了。不管是在学院还是业界，搭上一辆已有人掌舵的大船速度一定会比独自一人撑一叶扁舟快。举个例子，自己吭哧吭哧学在线编程课，做课后编程习题，也能学到不少东西，但从这类 toy problem sets 中能学的知识非常有限，且往往离实际工作内容也很远；比如在现实中，软件的性能非常重要，如何平衡运行速度、存储空间和云服务花费，这是每个软件工程师每天都会遇到的问题，但若脱离了真实开发环境，没有具体应用情景和大体量数据带来的限制，你很难在做编程习题时想到、学到这些业界标准。 实习对于软件开发来说尤其重要。求职初级产品经理、内容编辑等职位，没那么充分的实习经验似乎也没太大妨碍，但对于开发这种理论与实践相差较远的工作来说，实习不仅是“长技能”，更是“见世面”——业界流行的语言、框架、开发模式，不同行业的兴衰和需求，工程师在行业、司内的地位作用等等，这些都是珍贵的实践知识，非自己参与、思考是体味不到其中乐趣的。这类知识可以归为 Navel 在《How to get rich without getting lucky》里提到的 specific knowledge： Specific knowledge is knowledge that you cannot be trained for. If society can train you, it can train someone else, and replace you. […] Building specific knowledge will feel like play to you but will look like work to others.When specific knowledge is taught, it’s through apprenticeships, not schools. Specific knowledge is often highly technical or creative. It cannot be outsourced or automated. 既然明确了实习的重要性，那一定得把学习技能当作实习最重要的目标，其他工资啊公司名气啊，有的话很好但没有也不要过度纠结。 如果你在德国读书，我强烈建议你在上学期间找一份 working student (Werkstudent) 长期实习。德国教育重视实践，从很多双轨制（半职读书半职学徒式工作）大学项目就可见一斑。Working student 是指学生每周在一家公司工作10-30小时，且可以持续几年直至毕业的制度。做 working student 是一种很好的在学生时代积累工作经验赚生活费并不费力地过渡到正式工作的方式；当你在一家公司长期实习一两年后，只要表现还行，一般公司都会在你毕业后直接录用。比如，我们公司（在柏林）就有在这儿当了三年 working student，毕业后顺理成章入职软件工程师的同事。 如果没有 working student 机会，那也要努力找全职 Praktikum (internship)。 总之，从事技术行业的人不要想得太多，做得太少。都是技术活，天资差不多的情况下，必然是练习、思考越多能力越强。 " }, { "title": "迟到半年的《地久天长》观后", "url": "/sinantang.github.io/pr-7/posts/so-long-my-son-film-review/", "categories": "Film Review", "tags": "", "date": "2019-08-03 00:00:00 +0200", "content": "老读者都知道我今年二月在柏林电影节观看过《地久天长》并对其评价很高。在《地久天长》在内地上映之后，我看到评价一般，其中频率最高的批评在于电影结局——刘耀君、王丽云夫妇在失去两个孩子后背井离乡在南方独自清苦生活几十年，年老时回到北方故乡，竟在一片大团圆的气氛中，在《友谊地久天长》的旋律中与旧日”仇人”和酒言欢了？ 在大多数人的想象中，结局不应该是受了一辈子苦的人最终满足于命运的安排；那么大的苦，整个吞下去怎么能连个响都没有。原谅？连谋杀自己孩子的罪也可以轻易原谅？报仇！为什么不报仇！ 报仇自然也是一条毫无指摘黑白分明的热血正义之路，然而中国人的精神内核并非武侠世界里的”快意恩仇”，中国人习惯再多问一句，”就算报了仇又怎么样呢？我的孩子，再也不可能回来了。”于是隐忍，悲伤，独自消化。在过了足够久的时间后，终于沉默地在心里迈过这个坎，虽然人生底色依然是茫茫一片悲伤，但终不再执着于仇恨。 若说放下仇恨是因为理解了每个人的难处，这也是过于轻巧的解释。 王丽云被强制拉去堕胎——因为好友李海燕是计生主任不得不这样做——因为那时的计生政策促使、激化很多人扮演了魔鬼的角色——因为计生政策很可能是个短视偏激的错误决策，来自一些短视自大的决策人。 理解以上这一种解释方式（现实的解读方式不止一种），也似乎对抚平内心伤痕并无帮助，最终保全个人悲伤和理智的方式还是逃离悲剧发生的地点和直接推动悲剧发生的人。 就算拥有所有正当理由去仇恨，王丽云夫妇也不会接过沈英明的刀，因为悲伤无法靠使别人遭受类似的苦来填补，那反而会增加他们的痛苦。 看完电影，我产生这样一种感受：一个人站在一片茫茫苍原之中，没人让你仇恨，也没人可原谅。每个人都在命运之中，犹如一滴水融入大海，不论多大的悲伤，都可以被大海承载。也许因为我在生活中遇到过像王丽云夫妇那样承受了无数生活磨难但最终依然坚韧平和活着的人，所以我对他们的故事在中国土地上存在之真实性毫不怀疑。 导演王小帅不是秉翻历史旧账目的拍《地久天长》的。电影中历史细节是以平缓的语气道来，浓墨都放在人物情感的积蓄发展上了。有人说这是为了安全上映，但这种看法也太看低导演自己的艺术创造心气儿了。审查只是众多现实障碍中的一个，并不足以成为拍电影的目的。导演想要用镜头展现一代人的时代感，记录（但非追责）这段重要史实，刻画被那段历史裹挟的中国家庭的生活状态。 大多数人想要一个说法，一个结局，一个好人有好报恶人无处逃的结局。但人生往往不是这样展开。所谓”正义”，是因为有人主动追寻，才有机会有可能降临。对我而言，《地久天长》这样中国式结局是最真实的，虽然这个结局无法让观众在煎熬3小时后痛痛快快出口气再走出电影院。 " }, { "title": "沉迷买买买的消费主义误区", "url": "/sinantang.github.io/pr-7/posts/pitfalls-of-consumerism/", "categories": "Self improvement", "tags": "Consumerism", "date": "2019-07-18 00:00:00 +0200", "content": "原文来自我的一条微博（@思南说）随笔，发现有共鸣的读者不少，就在原文基础上扩展补充了更多内容在这儿发出来。 节制消费是一个我思考过很久的主题，所以写下这些并不怎么需要构思立论，其实一切都早已在脑中成型。 大多数（年轻）人在做消费决定时常陷入几大误区： 忘记生活本身有成本 生存这件事是自带成本的，对于普通人来说这个成本并不低。除去必需的房租（或房贷）水电、出行吃喝，假设没有其他家庭成员要养活，还有应对生活中各种意外的成本，比如生病、遗失偷盗、罚单等等。这些都是百分百无法逃避的。很多人开始工作赚钱时会沉浸在拿自己收入来清空购物车的幻想中，但事实上很可能工作一个月，前 20 天都在赚生活的成本。 拿个人单位时间收入与商品单价比较 以自己的单位时间收入来劝自己买买买，“反正只要工作几小时/天/周就赚回来了”——这种推理很流行，不仅在消费者那儿流行，更是商家口中的营销强效剂。然而，大多数人赚的只是固定薪水，能产生收入的工作时间只是一个月20天每天中的8小时而已，而没在赚钱的时间是实际工作时间的 3.5 倍（还没算休假）…… 在拥有稳定被动收入之前，没有人能时时刻刻赚钱，但所有人都可以轻轻松松做到每时每刻花钱，包括你在睡觉的每一分钟（参见第一个误区）。 以为买一件商品只是一次性支出 我相信所有人都经历过为一样商品或服务最终付出数倍于原价的成本之情况。比如，车、电器、电子产品的后续维修保养花费可能超过原价，遇到糟心产品服务不得不花更多时间精力金钱在与客服扯皮打交道上，买一样产品回家后发现还要再买其他配套商品才能用起来（e.g. 买了一双鞋子后发现需要再买套衣服才搭配 :），最后东西变成垃圾扔掉也是有成本的（比如德国日本的垃圾费）。当然，我并不是想说花出去的每一分钱都不能“浪费”，在个人品味风格和消费习惯还没完全成熟之前，有些“冤枉”钱可能不得不花，甚至有时可以算作 learning experience。我只是想点出，当购买一件商品时，应该想到你即将付出的钱，绝不仅仅是标价而已。 当你彻底理解前三个误区后，就会对这句挠心销售台词“平均下来一天也就几块钱，但一年后你有可能走向人生巅峰”开始免疫了。不妨先算算自己每天仅为保持生存状态的平摊生活成本，和自己在生活中拥有的所有物品的价值总和——新买一样东西真的只是轻飘飘的“一天几块钱”那么简单吗？ money spent is not money earned 能花出去的钱和能赚到的钱完全是两码事。最起码中间隔了一层税收，包括各种直接税和间接税。你花10块买到实际8块（减去消费税等）的东西，需要你先赚到15块的税前收入。实际上个人真正能支配的钱，肯定不足税前收入的一半…… 以为拥有一样东西付出的只是钱而已 拥有一样东西是需要持续付出心力的。为了保持家中整洁，为了筛选与个人风格气质需求相合的物品，一个人需要为自己所拥有、想拥有的物品付出很多心力。很多人开始极简主义的生活方式并不只为省钱，还有为节省保存自己的心力，为照顾好自己已拥有的那些物品。 小结 当你看明白以上所有消费误区后，“买买买”这件事也许会突然变得没那么有吸引力。当然，爬出消费主义陷阱只靠这个还不够；下一阶段是实际体验到消费行为带来的短暂满足感，其实远不如工作赚钱和人生中其他更有意义的事。 " }, { "title": "如何阅读英文论文", "url": "/sinantang.github.io/pr-7/posts/papers/", "categories": "Natural Language Processing", "tags": "learning, NLP", "date": "2019-05-18 00:00:00 +0200", "content": "上周末我拍了一支8分钟的 VLOG，发在微博（@思南说），讲我是如何阅读 NLP 论文的。不少读者在看完后留了正面反馈。我打算在这篇文章里把视频里的内容整理出来，顺便解答几个疑问，方便大家以后回顾。 读 NLP 论文和读任何领域的英文论文相比并无本质区别，以下建议也同样适用。 1. 读英文论文的顺序很重要 英文学术写作的范式固定、风格统一，与其他类别文体风格差距很大，因此为了更有效快速地获取论文中的信息，最好不要像看小说一样从书第一页翻到最后一页，从一段的第一句看到最后一句。我是按什么顺序来高效看论文的呢？ a. 标题、日期、作者与组织、会议期刊 我拿到一篇论文会第一时间看这些 metadata。通过标题快速推测论文主题，通过发表日期确认论文的时效，通过作者组织猜测论文重要性与”赞助方”，通过是否参加过重要学术会议或期刊来确认论文是否同行审议过。 b. 全文结构 接下来我会从头到位快速翻一遍，浏览论文结构，看看小标题和图表，对有什么章节、哪个章节在什么位置心中有数。 c. 摘要、序言、结果、结论 接着就开始正式看论文内容了。我会先仔细看摘要和序言 (abstract &amp; introduction)，了解这篇论文的主题、亮点、贡献、局限等。接下来我会直接翻到论文后面，开始看结果和结论 (results / discussions / conclusion) 章节。理工科论文的结论一般很短，通常只是对序言的转述，所以没必要太仔细去看；文科论文结论段可能会长得多，会更值得好好看。 这一步可以有效减少”好不容易看完整篇论文却一头雾水不知所云”的症状。 d. 中间章节 对于中间所有章节，我都是跳着看的。先看哪一节后看哪一节，哪一节细看哪一节略看，这些取决于兴趣和重要性。比如 NLP 论文一般都在讨论模型算法，发明新模型或改进现有模型等，所以最重要的内容往往是 model architecture 这一章。重要章节值得认真读完每一句话。不重要的章节或已经熟悉的背景知识就可以略看。 e. 章节段落内部 英文学术写作的范式之一就是，一章中第一段最重要，一段中第一句话最重要。特别是每段的第一句话，往往已经概括了整段的内容。所以在看论文的时候，一章之内，我会先看所有段落的第一句话，对该段内容有个初步理解，接着带着这个意识和自己的问题再去深入看剩下的细节。 2. 公式与图表 NLP 论文不可避免地会涉及看起来很复杂的数学公式。有些数学基础没那么好的同学因此对直接阅读英文论文发怵。其实大不必如此。NLP 论文中的数学公式就算全部跳过，也不太会影响对整篇文章的理解。如果时间有限，也可以挑着看重要的公式，也就是那些公式后面特意标了号码的。就算只是一眼扫过，也算混了一次脸熟，次数多了，以后就有可能可以认出那些重复出现的重要公式。 比起公式，其实图表的价值更高，更值得好好研究。图表浓缩了大量信息，且比文字更加直观，非常值得结合文字好好理解。 3. 辅助资料 当你把以上所有步骤都做到了后，是不是就一定能看懂论文了呢？当然不是。每人的知识储备水平不同，每篇论文的理解难度不同，集中精力看完一篇论文却还是对其内容一知半解实在是再正常不过的事。此时就应该去互联网上找更多的辅助资料来帮助理解。越重要的论文就会有越多的人来解读，网上能找到的资料也就越多。 比如，我在视频中拿来举例的那篇解释谷歌 Transformer 的重要论文《Attention is all you need》在网上就能找到非常多的解读文章、视频。我在读完论文后接着看了下面三个辅助视频，对我自己的理解非常有帮助。 Yannic Kilcher: Attention is all you need. Stanford CS224N (Winter 2017): Lecture 10 Neural Machine Translation and Models with Attention. Stanford CS224N (Winter 2019): Transformers and Self-Attention. （请科学上网） 重点推荐第一个视频，浅入深出，讲得特别好。 4. 去哪儿找论文 有人问去哪里能找到这样的论文。如果是专门 NLP 领域内论文的话，ACL 的历年论文选集就是个开始的好地方。另外，大多数 NLP 网课都会推荐与每一节课内容相关的重要论文，比如 Stanford CS224N 的主页上就列了很多。最后，当你开始读论文后，就会很自然地顺着一篇论文引用文献的藤摸到更多相关论文。 好啦，希望以上内容对你有所帮助！ " }, { "title": "连续冥想28天 | 觉知，接纳，不拖延", "url": "/sinantang.github.io/pr-7/posts/meditation/", "categories": "Self improvement", "tags": "learning, meditation", "date": "2019-03-10 00:00:00 +0100", "content": "一两个月前，我在 Sam Harris 的播客「Making Sense」中得知他刚推出自己的付费冥想引导课程「Waking Up」app。一是出于想把以前断断续续不怎么成功的冥想练习重新捡回来，二是想要支持喜欢的创作者，于是我订阅了「Waking Up」一年会员。接着我就自然而然开启了每日冥想之旅，这次竟毫不费力地一天也没落下，到今天已经连续冥想 28 天。我想在此记录一下，自规律冥想以来我身上发生的许多惊喜变化。 关于冥想 尽管冥想的最朴素定义非常简单，几乎人人都听过——“清空大脑，把注意力放在呼吸上”，但很多人依然像以前的我一样无法培养起这个习惯，也自然无法体验到其中巨大妙处。这次跟着引导音频进行冥想练习，我才发现这件 simple-but-not-easy 的事中其实存在不同练习深度和方法技巧，并不是仅仅“要把注意力放在呼吸上”这么单薄。 比如，从未冥想过的人适合从“觉察自己的呼吸”开始，已有一些经验的人则可以尝试进入“开放自己的头脑空间，观察所有想法流动”的更高阶冥想。 冥想带给我的几重惊喜： 🌕 暂时停下来，什么也不做、什么也不想是一件不仅完全 OK 且高产的事 现在很多人患有“空闲焦虑症”——一旦手上没什么可以做的事，就会陷入轻微焦虑不适，难以面对真的什么也不做的安静时间，立刻要找到点什么事来分散这种焦虑才可以。以前的我也是如此。手机就成了大多数现代人承担这种焦虑的主要载体。在车站等车不想无聊地站着？不如掏出手机来刷一刷微博吧。几个朋友在餐厅坐下点完菜不知道该聊什么？各自掏出手机来刷一刷新闻吧。夜里躁动着不去睡觉？掏出手机看看搞笑视频来拖延入睡时间吧。 在 iPhone 推出屏幕时间功能之前，很多人对自己每天在手机上花费多久并无直观认识。我的屏幕时间报告显示，自从开启这个功能以来，我平均每天都要花两个多小时在手机上。我曾愧疚地认为这个数字太高——我给自己定的目标是一小时以下——直到我惊讶地发现大家晒出的屏幕时间报告中，每天五六个钟头的人竟很多。每天 6 小时，一周就是 42 小时，除非一个人用手机工作赚钱，否则用手机的时间可都超过一份全职工作的时间了呀。 难以直面什么也不做的时间与什么也不想的自我，应该是大家花如此多的时间在手机上的主要原因之一吧。 对我来说，冥想治愈了我的“空闲焦虑症”。 就这么什么也不做、什么也不想，不去焦虑明天要发生的事，不去后悔已经发生过的事，不去忙着计划未来的事，真正地与自我独处十分钟，感受自己一呼一吸的韵律，旁观自己当下的感觉、想法。冥想教我学会欣赏人生中的 nothingness，并与之共处。有时只这么十分钟，就可以完全改变我的心境，让我不再想拿手机等物品来转移当下的焦虑不安，把注意力从容转移回到重要的事上。 人是一种比起无聊宁愿承受疼痛的生物。但“无聊”这种感觉只是来源于无法集中注意力罢了。如果你把全部注意力都放在呼吸上，你会发现即使是呼吸这样一件简单的事，也存在许多你不曾觉察过的细节：吸入与呼出空气的温度、湿度的不同，空气在鼻腔中经过的感觉，肩膀与胸膛随着一呼一吸而轻轻一起一伏……当你学会观察自己的感觉（“无聊”也是一种可供观察的感觉）与想法时，你就不会再为独处却什么也不做这件事而感到无聊了。 其实，这样什么也不做的十分钟比忙着寻找外界刺激来分散自己注意力的半小时，要高产得多。 Meditate and enjoy the nothingness in life. 🌕 对自己想法、感觉更有觉知 冥想带给我的一个更“实用”的惊喜是大大降低了我从想法到行动之间的摩擦力。换句话说，我不那么容易拖延了。 拖延去做一件事，即为抵触那件事。抵触的程度或轻微或严重，抵触的原因因人因事而异。但这些都不重要，重要的是，你是否对自己的想法、感觉有所觉知。当你能够清晰地看到自己到底出于什么原因在抵触一件事时，那种阻力往往就已消解了一大半。因为拖延一件事的原因很可能来自某种不理智的直觉、预设或情绪，当你开始理智内观它时，就会发现自己其实有能力从源头轻而易举地解决它们。 如果不去解决这些问题呢？那你就会痛苦地拖延一件事直到拖不下去的那一刻，忙于用一切手段来分散自己的焦虑感，并且永远不知道自己为什么会拖延，也不知道如何减少拖延。 这种对自己想法、感觉的觉知能力，恰是可以通过冥想来获取的能力。 也许你有时也会观察到这么一种现象。大多数人在生活中看起来都正在与某种“怪物”苦大仇深地对抗着，或是与懒惰搏斗，或是与贪欲斗争，或是与工作对抗。但也有一小部分人，他们似乎做什么都很顺其自然，他们不费力地工作、睡觉、吃饭、锻炼，在这样顺其自然的状态中完成自己的计划，达到自己的目标。 并不说第二类人在生活中不会遇到任何困难；而是在心境上，第二类人的生活方式与第一类人完全不在同一个 paradigm (模式、范式) 上。 如果你懂编程，你可能就更容易理解 paradigm shift 这个概念：编程中有不同范式，比如面向对象编程和函数式编程。有些问题天然适合以面向对象编程的逻辑来解决，若硬要以函数式编程的思路来暴力破解的话，会变得非常麻烦、困难且不自然。对生活的心境也是如此，如果你觉得自己一直在咬牙对抗着什么，或许是因为你选错了 paradigm，或者你根本从未想到过还有另一种不必对抗的生活方式。想想那首朴素的诗歌《假如生活欺骗了你》吧，如果你时常认为生活欺骗、辜负了你，有没有这样一种可能性，是你对生活本身的预设（assumption）出了问题呢？ 拿冲浪来打比方，优秀冲浪手必然懂得如何 ride the wave，而非 fight with the wave。 冥想就是这样一个教人如何 ride the wave 的思维工具。 🌕 对自己宽容，对他人宽容，对世界宽容 自从开始对自己每时每刻的想法更有觉知之后，我在生活中变得更平和了。平和来自宽容，对自己、对他人、对世界的宽容。 三月初某一天晚上，下班回家的地铁上，我在忘记带月票的情况下遇到查票员。我跟查票员解释，我在年初就买了今年的交通年票（在柏林买年票会一次性得到12张月票），只是我三月初忘记把钱包里的二月月票换成新的而已。但查票员一副听过太多的样子没理我的解释，还是给我开了罚单。我当时在地铁站里又窘又委屈，差点要当场气哭。回家后我还一直闷闷不乐，但某个时刻我一下子记起从冥想练习中学到的“觉知”，然后我突然就从当下的怒气委屈中跳脱出来，我想到了那位查票员；我想到，这份工作一定不怎么让人愉快吧，总是要面对或窘迫或生气的乘客，总是要把坏消息（罚单）带给各种各样的陌生人，工资肯定也高不到哪去。如果要我与他在地铁上互换角色，我是不肯的。 就在那一瞬间，我原谅了这个不现代不合理的查票系统，原谅了那位只是在履行工作职责的查票员，原谅了因无心之过而损失 60 欧的自己。 当我能够不评判地接纳自己的所有想法情绪时，我发现自己好像一滴汇入大海的水，我的心与头脑都变得无比宽广，我变得可以接纳越来越多不同经历与观点，可以理解越来越多不同的人与事；从一种死死守着自己既有思维模式不放的稀缺心态，慢慢进化到愿意与别人与世界分享善意和接纳的丰盛心态。 所以，我在这里郑重地把冥想推荐给你，希望你也能从中找到惊喜。 " }, { "title": "跟我去柏林电影节看电影", "url": "/sinantang.github.io/pr-7/posts/my-berlinale-experience/", "categories": "Film Review", "tags": "berlinale", "date": "2019-02-17 00:00:00 +0100", "content": "今年二月，在天时地利人和之下，我第一次作为观众积极参加了柏林电影节。有趣的见闻颇多，忍不住在此记录下来。 背景小知识 柏林国际电影节（德语 Internationale Filmfestspiele Berlin，简称「Berlinale」），是一个在德国柏林举行的国际电影节，与意大利的威尼斯电影节、法国的戛纳电影节并列为世界三大艺术影展之一。 柏林电影节始于 1951 年夏，后改为每年二月举行。柏林电影节设立金熊奖、银熊奖。 （总结自维基百科） 今年是第 69 届电影节！ 亲民的柏林电影节 因为我去年搬来柏林，柏林电影节就发生在眼皮子底下，似乎顺理成章应该顺便去凑凑热闹。但我能参加此次电影节，确实不止因为地点方便。更主要原因在于柏林电影节格外亲民。 第一，几乎所有参展电影、展览、讲座的门票都是提前三天统一在上午十点放出，可以在官网上直接买票，也可以去线下售票点，每人最多买两张。所有人都可以买票，就看你手速有多快，参与规则相当公平简易，并不像有些更高冷的国际电影节那样，需要提前几个月预定名额，花钱买入场证之类。 第二，门票便宜。德国普通电影票一般七八欧最贵也不会超过 10 欧，柏林电影节的票竟也只比平日普通电影票贵了几欧而已。我买到的几张电影票有 10 欧、13 欧、16 欧的，其中包括主竞赛单元影片。而且，在放映前半个钟头，所有票半价，当然是否真的还有余票就要看运气了。不过若不是追求只看竞赛影片的话，还有上百部更加小众的片子可供挑选，总会有临时买也还有票的场。 抢票的乐趣 电影节 7 号开幕，有一部分票在 4 号周一就已经在网上放出了。我在电影节开幕前的周末悠哉悠哉地在家浏览官网上所有影片的简介，心里计划着要去看这个、这个和那个。然而 4 号那天工作太忙我就把抢票这事儿给忘了，等 5 号再打算上网买票时，我惊慌地发现之前在心里预定要看的几部影片都已显示 sold out！彼刻是我抢票心态的转折点，从之前的精挑细选满怀幻想，变成了“随缘看片儿”、“有空看有票卖就买吧”。 热门影片究竟有多难抢呢？ 13 日晚上 7 点有一场入围竞赛的西语片《Elisa y Marcela》首映，我原计划和同事一起去看，到了周日上午 10 点抢票的那一刻，我俩刷新了一下页面，就赫然看到“sold out”二字…… 我们安慰自己说，这毕竟是第一次参加柏林电影节观影，今年积累了经验我们明年再战！ 三份短影评 这次柏林电影节我一共看了三场电影：王小帅的《地久天长》、Fingscheidt 的《Systemsprenger》、吴林峰和马科维奇的《春暖花开》，其中前两场是主竞赛单元影片。下面是对这三部电影的短评，也许有一点点剧透。欢迎和我一样喜欢看剧透的读者继续阅读。 《地久天长》 这是我在电影节上看的最后一场但是最好的一部电影，也是唯一一部让我泪湿纸巾的影片。看完没多久后就传来了两位主演王景春、咏梅分别获得此次最佳男/女演员奖的好消息。 这部长达三小时的电影，讲述了两个中国家庭在文革结束后的三十年里由亲密到疏离，最终又重聚的长篇故事。导演刻画出了在缄默中吞下时代阵痛的上一辈中国人的形象。 失去两个孩子的刘耀君、王丽云夫妇，一辈子都生活在隐忍的痛苦之中——“时间对于我们来说已经停止了，现在我们就是在等着慢慢变老”。就像《海边的曼彻斯特》里的李，心甘情愿地消极生活着。有些痛苦注定无法排解，有些问题永远找不到答案，但就这样活下去又有何不可呢？ 时代的洪流滚滚，希望最黑暗的时代已经过去。尽管制度如此无情无理，但值得庆幸的是人性永远有温暖，人与人之间的连接才使人觉得人间已值得。真正内心强大的人，才会在完全有理由仇恨报复的事情上，最终选择原谅和解。选择在恨中度过一生容易，转过身来选择爱与宽恕很难。 那天我听 Sam Harris 的一期播客，里面说到一种大爱：爱所有世人，希望每一个人都可以拥有很好的人生。我听到时有点鼻酸，我偶尔地也会冒出同样的想法。看完《地久天长》时，我最终还是想要祝福里面每一个人都可以拥有好的人生。 《Systemsprenger》（首映） 这是一部德国电影，名字“Systemsprenger”的英译名是“System crasher”。电影主角是一个 9 岁小女孩儿 Benni，她因幼年创伤而发展出一系列反社会行为，Benni 妈妈有心却无力照顾、管教她，于是德国儿童福利系统只能接管了这个小女孩。儿童局的工作人员尝试了很多方式，但 Benni 始终无法像正常小孩一样生活。最终儿童局决定送 Benni 去国外参加疗养项目，在离开德国的机场 Benni 最终还是选择了逃开这一切，以最彻底的方式逃离自己的命运。 我和一德国人在电影节开幕第二天去看了这部电影。结束后我问他观影感受，他耸耸肩说，这是一部典型的德国电影。不论是镜头、拍摄手法，还是悲观消极的结局。 我对德国电影风格并不熟悉，但这部电影让我想起《风雨哈佛路》—— 以前看《风雨哈佛路》时，不太理解主人公对自己那位吸毒妈妈的评价：「她很爱我，她已经给了我她能给予的一切，她已经尽力了。」 我当时认为主人公患了斯德哥尔摩症，我以为她妈妈当然可以做得更好做到更多，根本不是「她已经给了我她能给予的一切」这样的自我安慰能解释的。但看完《Systemsprenger》之后，我突然就理解了。 Benni 的妈妈有一点类似《风雨哈佛路》里的吸毒妈妈。她真的很爱自己的三个孩子，也真心想要给孩子们她能给予的最好的一切，但现实是，她的能力无法匹配愿望——她不懂得如何挑选负责正直的伴侣，不具备养活孩子的赚钱能力，不知道如何在生活上照顾小孩，不能起到正面的教育影响。 她只有纯粹生理驱动的原始母性，仅此而已。 尽管她只能提供这样的母爱，但孩子还是一样渴望着得到。 唉，人还是该认清自我，不做能力之外的事。 《春暖花开》（首映） 这部独立电影讲述了一个在北京打工的北漂儿的流离生活。故事也许受到17年大兴火灾或北京处理低端劳动力事件的启发。 老实说，这部片子相当闷。对于像我一样了解影片背景的人来说，这部影片没有给我任何新视角、新启发；对于不了解北京的外国人来说，这部片子或许太过云里雾里。总之，我能理解导演的意图，但不能欣赏他们的讲述方式。 最后，二三十年前引用海子《面朝大海，春暖花开》的是真文青，现在还在以此作为电影标题的就…… 我的观影体验：为什么要抢首映场 在第一次看电影节参赛电影之前，我并不知道全球首映场究竟有什么特别，毕竟首不首映票价都一样嘛。 那首映场究竟有什么特别之处呢？ ——通常包括导演在内的剧组主要人员及主演会出席全球首映场，陪观众看完这部电影。在放映结束后，剧组还会上台致谢发言，也许还会有现场 Q&amp;A 环节，期间伴有全场观众的掌声。重要的电影还会有很多摄影记者在现场拍照。 在这样热烈文艺的气氛中结束一场观影体验，走出影院时还可以顺便踩踩红毯，在 360 度无死角的闪关灯中自拍几张，可谓是专业的柏林电影节凑热闹经历了！ 一个遗憾 要说此次电影节的遗憾，肯定是在我抢到票之后却收到张艺谋的《一秒钟》被临时撤片这个意外了，还是大家熟悉的“技术故障问题”。 对于我国的文艺工作者来说，大概名气越大，困难越大吧。 " }, { "title": "如何写好一份简历", "url": "/sinantang.github.io/pr-7/posts/cv/", "categories": "Career as an NLP Engineer", "tags": "career, job hunting", "date": "2019-01-26 00:00:00 +0100", "content": "关于如何写一份真正具有求职竞争力的简历，我想在这篇文章里写一写我的几条有限经验。 由于我的工作实习经历几乎都发生在国外，所以这篇文章会更适用于海外求职者。 一个提问：你的简历是写给谁看的？ 每当你困惑自己的简历该怎么改时，都应该先回到这个灵魂拷问上思考一会儿。 你的简历是写给谁看的？—— 某个需要特定职位的公司的 HR 和你未来的老板、同事。 那他们在期待什么样的简历呢？—— 匹配特定职位要求（即 JD）的简历（求职者）。 一个元规律：match, match, match 决定房地产投资成败的三个条件是 location, location, location；决定求职成败的三个条件是 match, match, match。 关于「match」，我在旧文《海外求职攻略开课啦》中已经讲得很清楚了。发简历不是发朋友圈，目的不是为了让 HR 觉得你特别 NB，而应该让对方相信你“特别匹配”。 在写简历中的每一行字之前，都应该先想想该如何体现出“匹配”这个关键词。 该不该用模版？ 回到第一个提问——你觉得筛选简历的人会在意简历是否用了模板吗？想一下就能明白，在简历的呈现形式方面，筛简历的人真正在意的是简历本身是否清晰简洁易读，而并非用没用模板。所以如果用了模版能让你的简历更清晰易读，那你就可以用；如果并非如此，那就没必要用模版。我从来不用模版，因为我认为我自己写的版式比 99% 的模版都更灵活好用且清晰易读。 简历页数 简历一到两页都可以。如果你的内容稍多，没必要一定非得挤到一页纸里。记住，任何时候都要考虑看简历的人的感受。若只为在一页纸内强行装下所有内容，而不得不调小字体、减少行间距，结果让阅读感受大打折扣就得不偿失了。 但也最好不要让简历超过两页——你并没有那么多值得写出来的出彩经历。经历真正出彩的人反而不需要多余文字修饰，比如，你若发表了与申请职位相关的核心论文啊出版了相关的书啊得过相关的大奖啊，这样一行字的分量不是远超十行不怎么相关的实习工作描述吗？ 学会量化与举例的思维 请学会把量化思维运用到简历中的 description box / bullet points 中。所谓“量化”，即用数字来更准确直观地举例表述你的工作贡献、技能水平、学习能力。比起“帮助团队完成项目”，不如“为小组的两个xx项目贡献了 20% 的代码量”；比起“帮助提高了团队工作效率”，不如“帮助团队提前x天完成了xx milestone”；比起“精通 Python”，不如“GitHub 提交过 10k 行 Python 代码”。 很多找工作的学生或职场新人都爱说自己“学习能力强”，但这句话太不具体，就像一句“沟通能力强”一样，没人知道你究竟什么水平。对于这些谁都能写在简历上的技能，你就需要通过量化、举例的方式来向别人证明，你真的知道这些技能是怎么回事。例如，为了证明自学能力，我曾在简历里写过“在两周时间内自学 Java basics，并为xx项目写了一个实现xyz的程序”。 几点小心思 为了能让筛选简历的人在 30 秒有限时间内愉快地确认“对，这是我在找的简历”，我在多次改进自己简历的过程中总结出了下面几点小心思小技巧，可以帮助筛简历的人降低认知负担，帮我的简历提高过关概率。 一定要在简历开头加 Summary（或 Highlights）段 看过太多简历的人其实很难记住 candidate A 与 candidate B/C/D/E 之间的区别，毕竟大部分人的经历都趋于 generic。为了帮筛简历的人记住你的竞争优势，同时也为了帮他快速高效地浏览你的简历，在所有正式内容前先加一个 Summary（或 Highlights）段落是个很好的方式。在此段中，你可以以 bullet points 简洁地列举出自己所具备的且在 JD 中提到的重要技能点，比如会写什么编程语言什么技术框架，有什么出彩的工作/实习/项目经历，会几门语言等等。 都说第一印象最重要，这个 Summary 其实就是对方对你简历的第一印象。 特别是不需要交 Cover letter 的情况下，简历开头的 Summary 就更加不可或缺了。 选择性使用加粗字体 尽管已经用了 bullet points 列举工作学习经历，但看简历的人还是不一定第一眼就看到你所列举内容的重点。此时，你可以选择性地加粗重要技能点，比如 Python、machine learning、communication 等等。但加粗一定要有节制，半个句子都加粗就没意义了。加之我个人审美认为加粗并不美，所以不是特别想要突出的点真的没必要加粗。 增加经历相关性的技巧 对于像我这种跨专业找工作的人来说，写简历很重要的一点就是要让原本相关度低的经历看起来相关度高，即提高简历整体的「match」程度。具体的技巧就很多了，我就在这儿提一点： 我的本硕专业都是语言学，但我的目标是 NLP 的工作，而 NLP 行业的工作压倒性地偏好 CS 或 Computational Linguistics 专业出身的人。因此，我在简历中教育经历的部分列举出自己的硕士专业（Linguistics）后，会在后面跟一个后置修饰语，“with focus on Computational Linguistics”，并简单列举我修过的与 NLP 相关的课程——我明白筛简历的人在寻找什么样的「match」，我自己也确实尽量修了能与 NLP 沾边的课，还把毕业论文题目定在此领域内，那为什么不直接在简历上表明这个 relevance 呢？ 几个细节 注意细节是一种人人以为自己知道但极少有人能全部做到的能力。注意不到细节不是粗心，而是脑力、能力、经验不足。 不注意以下我提到的细节是不是就一定会求职失败呢？当然不是。 既然注意细节是一种大部分人都做不到的能力，自然也包括了大部分 HR 和老板，只不过其中的比例不同罢了。 另一方面，求职本是一场运气成分相当大的游戏。就算老板本身注重细节，但若他此时火烧眉毛急着找人干活，预算不多，求职者没几个，开人代价很低，那事情会如何发展，相信人人都能想象。 写简历时涉及的细节包括但不限于： 拼写错误：刚写完、改完的简历最好不要直接一键发送，可以第二天打印出来仔细检查一遍，一般此时会发现前一天的拼写错误 大小写规范（你还在写 python, JAVA, javascript 吗） 动词时态：已结束的工作应该用一般过去时，还在进行的工作用进行时 格式整齐：标点统一，小节开头对齐，字体字号统一 文件标题：我习惯把简历文件命名为“姓名_申请职位_CV” 文件格式：PDF only 小结 改出一份好的简历是个脑力活儿。并不存在可以照搬生效的模版，而是要根据职位要求、个人技能匹配度来决定简历怎么写。 求职最重要的一点是学会「换位思考」，了解 HR / 老板在寻找什么样的人，才能摆脱“无目标低效率海投”的行为，在“思考 - 行动 - 反馈 - 思考”的积极循环中更高效地找到理想的工作。 " }, { "title": "我的 2018 年度阅读清单", "url": "/sinantang.github.io/pr-7/posts/what-i-read-2018/", "categories": "Book Review", "tags": "learning, reading, books, Podcasts", "date": "2018-12-29 00:00:00 +0100", "content": "刚度过平安夜，没几天 2018 就要翻篇了，按照本博客传统惯例，是时候整理一下今年我的阅读清单了！ 今年从年初开始正式工作，所以今年的工作时间外阅读结构也有很大变化。不过，并不是变得更偏向于技术类，而是更加随心所欲地翻阅了很多不同领域的书…… 下面还是按“虚构”、“非虚构”两大类别罗列了我今年看的书。由于今年较忙，没怎么写专门的读书笔记，所以在这儿的个人短评会写得稍微长一些。 在书单后面会照例附上一点其他类别的文化产品推荐。 虚构类 《围城》 by 钱锺书 ★★★★★ 原来“出国如发水痘”的比喻出自此书。 读了之后才能理解为什么此书曾被列为禁书达30年。 对我来说，对人性更深的洞察是阅读此书的最大收获。在我看来，所谓“婚姻是围城、人生是围城”并不是此书的主题，更准确的主题应该是“人是自己思想的牢奴”。 钱锺书一辈子只写完了这一本长篇小说，我感到非常遗憾。 小提醒：想读但未读此书的读者请避免查看该书的百度百科，这个词条既刻板又教条，一股中国语文阅读理解模版答案之味扑面。换个角度说，如果一个人读了此书，生出的感想和百度百科词条差不多的话，那 ta 的头脑大概率也塞满了教条。 《海边的卡夫卡》 by 村上春树 ★★★★★ 跟着一位十五岁的少年在一个奇幻的维度上又成长了一回。 也许我对村上春树有偏爱滤镜，这本较有争议的书我也还是依然很喜欢。 《美丽新世界》 by 阿道司·赫胥黎 ★★★★ 也许是听说这本书已经太久，阅读时并没有给我像第一次翻开《1984》时的奇异之感。 从我第一次读《1984》到现在也八九年了，虽然依然认为这是经典之作，但我已经越来越发现《1984》里的对人性与人间刻画的单薄之处。 对比之下，《美丽新世界》更显深刻的一点是，小说情节里引入了“野蛮人”这个群体（印第安人保留区），当作者把“野蛮人”与新人类之间的冲突拉到剧场中心时，现实生活方式更接近于“野蛮人”的读者也不得不被拖入了对人性的思考之中。 经典之作应该读的理由之一：文化世界里充满了基于经典之作的引申、隐喻，只有读了的人才能体会到解谜的乐趣。 对于喜欢阅读《1984》、《美丽新世界》这类 dystopia 小说的读者，推荐一部老电影给你：《Brazil》(1985, 导演 Terry Gilliam) 《世界的凛冬》 by 肯·福莱特 ★★★☆ 去年读了《巨人的陨落》，今年接着读了第二部《世界的凛冬》。陪着主角五大家族接着走完二战一程，让我对历史与战争的理解又加深了一层。 但我今年对肯·福莱特的“世纪三部曲”的评价不如去年的高了，因为今年我突然开窍，学习、积累了很多政治常识。自身政治素养的增强让我看到“世纪三部曲”稍显幼稚的一面。我觉得这套书对战争与政治的理解还是有些肤浅了。所以也就不打算接着看第三部《永恒的边缘》了。另一方面也能看出，这样取景宏大的历史小说确实非常难写。 《红与黑》 by 司汤达 ★★★☆ 拖拖拉拉地把这本经典小说看完了。由于心理小说突出的写法特点，我在读前 1/4 时差点因主人公碎碎念太多而弃读。 看完这本书时我发了条读后感微博，说这本书适合傻白甜读来了解凤凰男的真实想法。现在再回忆这本书给我的直接感受，也许更值得惊异的是司汤达为什么如此准确深谙凤凰男主人公于连的内心世界。 《超·杀人事件》 by 东野圭吾 ★★★★ 没想到吧，我也是日本推理小说爱好者。 偶然发现这本东野圭吾的短篇合集。比起东野圭吾的长篇经典，短篇竟也很出色，且是我喜欢的黑色幽默。蛮适合快速翻一翻捧腹一笑的。 非虚构类 《Think Java》 by Allen B. Downey ★★★★ 这也许是我今年看的唯一一本纯技术书？因为工作关系，需要重新开始熟悉 Java，考虑到之前自学 Python 时拿《Think Python 2》当工具书效果不错，这次就直接找到同一“How to think like a computer scientist”系列编程书下单了。 《Surely You’re Joking, Mr. Feynman!》 by Richard Feynman ★★★★★ 这应该算是我今年最喜欢的一本书了！非常非常推荐任何人都翻开这本费曼的回忆文集读一读。你不需要懂数学物理（费曼是著名理论物理学家），也不需要对学术或核弹感兴趣（费曼曾参与曼哈顿计划），只要你还拥有一点天真与好奇，或想知道如何获取学习本身的乐趣，就肯定会被这本书中的费曼先生打动。 如果有机会能在 Audible 上听有声书，会使此书的魅力加倍立体。我几个月前已经在我的微博上推荐过这本有声书了。其实也是在听了这本书之后，我才第一次意识到，好的声优对于听书体验来说究竟有多重要。 （请认准这位优秀的声优：Raymond Todd 先生） 《What Do You Care What Other People Think? Further Adventures of a Curious Character》★★★★ 《The Pleasure of Finding Things Out: the best short works of Richard P. Feynman》★★★ 听完前一本《Surely You’re Joking, Mr. Feynman!》后，我实在是太喜欢费曼这个人啦，于是又找来这两本费曼的文集来看。 说实话，这两本都不如《Surely You’re Joking, Mr. Feynman!》，不论是从章节逻辑连接、内容本身价值，还是声优表现水平来看。相较之下，我更喜欢《What Do You Care What Other People Think》这本。其中一章里费曼写对第一任妻子的回忆非常动人。 《批评官员的尺度》 by 安东尼·刘易斯 ★★★★★ 这是我今年读过的对我影响最大的几本书之一。 何为民主、自由与法制？——这个话题是为在非民主体制下长大的人所不熟悉的。如何在民主体制下生活，是一件需要全民学习、经验的事。 这本书并没有在从头到尾枯燥地解释相关法律条文究竟是什么，而是通过全面回述美国里程碑式的“《纽约时报》诉沙利文案”来讨论、定义“言论自由”。 我的一大收获是更深入地理解了这个道理：打击偏颇、荒谬言论的不是压制，而是广泛活跃的对真理的讨论。这个道理不仅适用于公共领域，我也引申到了个人言论范围来应用。 《美国种族简史》 by 托马斯·索威尔 ★★★★ 对于世界各地的不同种族和肤色，我猜测绝大部分人都有着各种各样的刻板印象甚至歧视。倒不一定非要抱着纠正刻板印象与偏见的高大上目的翻开此书，仅仅为了解美国这个最有名的移民国家历史的一个侧面，或者多认识一点你身边的别种族朋友，这本书都是很好地增长见识的工具。 如果你恰好生活在国外且心态还算开放，那你应该会对此书的内容感兴趣。 《我的职业是小说家》 by 村上春树 ★★★★ “那时的感觉，我至今记忆犹新。似乎有什么东西慢慢地从天空飘然落下，而我摊开双手牢牢接住了它。” ——我非常喜欢村上春树 30 岁时决心尝试写小说那一刻的这个比喻。谁不渴望在尚年轻时就能这样接住从天而降的 calling 呢？ 作为从高中起就开始读村上春树作品的老读者，窥探村上成为小说家这一路背后故事的机会，我自然是不会错过的。如果你没读过村上的作品，也对作者本人无感，那这本书可能不会对你的胃口。 《有钱人想的和你不一样》 by 哈维·艾克 ★★★★★ 富人相信“我创造生活”。穷人相信“生活掉落在我身上”。 ——这本书写了富人、穷人及中产人士在思考和行为方式上的十七个不同之处。以上即为其中一个不同的举例。 如果你以合适的心态翻开此书，这本书可能会极大地改变你的思维模式，甚至人生轨迹。 这本书适合与我去年推荐的《富爸爸，穷爸爸》搭配着读，时不时翻出来再读一次。 《做生意的艺术》by Donald Trump &amp; Tony Schwartz ★★★★ 起初是看到一个做生意赚钱小成功的人在朋友圈推荐这本老书。 这本书初版于 1987 年，那时特朗普还远没有现在的名气，书里很多内容确实会比传记作家代笔的名人自传的干货比例更高。 这本书中反复印证的一个致富道理：世界上不存在“人傻钱多”这件事。赚大钱真的不容易，需要胆识、强大的自学能力和伺机而动的智慧。 书的倒数第二章记录了特朗普曾以不到半年的时间、20% 原政府预算的花费，免费为纽约市重建了沃尔曼滑冰场的著名故事。而在那之前，地方政府已经花了 6 年、1300万美元试图重建滑冰场却反复失败。从这件事就已经能够鲜明地看到今日成为美国总统的特朗普的性格和行事风格。 《韭菜的自我修养》 by 李笑来 ★★★★ “虽然它是对的，但它只能解释一小部分的世界。” 书中的这句话碰巧概括了今年我自己思维方式升级的一个重点。这个世界是复杂的，人性也是复杂的，你不可能拿一个论点去适应所有情况；但你也没必要因为一个论点在某一种情况下行不通就气急败坏地全面否定它。 《Zen and the Art of Motorcycle Maintenance: An Inquiry Into Values》 by Robert M. Pirsig ★★★★☆ 按这本书的哲学思考深度，我有点怀疑为什么《禅与摩托车维修艺术》为什么成为一本畅销书；也许和《时间简史》是畅销书的原因类似吧。 读过且喜欢这本书的读者也许会对 Scott Young 和 Kalid Azad 对这本书的一点讨论感兴趣。油管视频链接：https://youtu.be/gzrtLYl-G6k 《12 Rules for Life》 by Jordan B. Peterson ★★★★ 今年年初时着实对 Peterson 的思想着迷过一段日子。 我认为，读一读他的这本书或看几堂他发在油管频道上的公开课会对迷茫的大学生或生活陷入困境的人很有益。Peterson 的一些观点是对当代（尤其欧美）流行话语的反弹、反思。 「追寻意义，而非快乐」，「承担责任，停止逃避」——这些都是他重新提出并影响了一大批人的论点之一。 《The Language Instinct》 by Steven Pinker ★★★☆ 一开始选了这本书是因为身为语言学学生，却从未读过这本书，觉得有点不完整。于是还是花时间翻了翻这本书。不出意料，不少内容由于我的专业我已经很熟悉。但还是有一些意外收获，比如平克对于“语言塑造思维”这个近几年非常流行的论点的反驳，虽然这本书初版于 1994 年，但其中的论述依然值得一看。 小提示：如果你只是想了解如何高效学外语，那你完全不需要这本书…… 《Big Questions from Little People: And Simple Answers from Great Minds》 by Gemma Elwin Harris ★★★☆ 作为圣诞礼物给自己选的一本纸质书。拿到手开始读后发现确实特别适合当做礼物！每一小节，即对一个提问的解答，只有两三页；篇与篇之间没有逻辑联系，所以很适合在任何时候随意翻开某一页读上十几页。 比如，我现在翻到一个提问：「Why does time go slowly when you want it to go fast?」(为什么当你想让时间变快时时间反而会走得很慢) 一个心理学家的回答我总结一下大致如下：人身上没有一个器官（包括大脑）具有计时的功能。时间本身是一个很特别的概念，人类一直没有很好地学会如何与时间共处。 这本书有点像包含了不同方法论角度的“十万个为什么”。但与“十万个为什么”最大的不同之处在于，这本书里的每个提问都是有不同的人来回答的。这个解答者可能是有名的教授、学者、科学家、宇航员，运动员、作家，但也可能是个名气相对小的冒险家、旅行者、老师、厨师，因此里面的答案并不都是基于现代科学的角度。有几个回答我看完后觉得简直文不对题。我对 s 说，假如以后小孩可能会翻开这本书，我想提前把几页内容给撕掉。s 忙说，没必要啊，孩子应该多接触接触不同的观点。于是我最后还是住手了。 《Zero to One: Notes on Startups, or How to Build the Future》 by Blake Masters and Peter Thiel ★★★ 这是今年看的第一本书，很应景地在硅谷出差时听完了这本书。 有些人给了这本书非常高的评价，称之为“创业圣经”。对我来说，有几个观点对我启发，但现在站在年末回忆，这本书并没给我留下特别深的印象。毕竟，阅读体验是作者与读者之间的一次合作，不同读者在同一本书那儿的收获取决的读者自己的思维水平和人生阅历。 《古拉格群岛》 by 亚历山大·索尔仁尼琴 因为 Peterson 的热烈推荐而找到这三卷巨著（巨厚无比，光是卷一在 kindle app 上就显示长达两万八千页…）来看。目前还在读卷一。 《古拉格群岛》是一部反映苏联奴隶劳动和集中营故事的书。古拉格指苏联的集中营，而作者亲自在古拉格集中营中生活过。事实上，苏共直接、间接杀害的人比纳粹希特勒杀害的人还要多得多，然而当代人人基本都对希特勒同仇敌忾，却有很多人对苏共态度暧昧。 网上对此书的评价褒贬不一，我打算等我自己看完至少卷一后再做出具体评判。目前根据我已经读过的几章内容，我偏向于认可此书的价值。 《The Selfish Gene》 by Richard Dawkins 今年因经典而拾起的又一本书。 仍在读，但已意外地发现此书的风格对英文严肃写作非常有指导意义。希望学习优雅英式学术写作风格的同学，不妨翻翻看看。 《The Better Angels of Our Nature: Why Violence Has Declined》 by Steven Pinker 上个月下载了有声书，刚听了前几章。打算 2019 年接着听 :) 更多文化产品 去年提到过的播客、博客就不在这儿重复了。 新加一个常听播客: ⁍「文化土豆」 新加一个今年刚发现的优质博客站点: ⁍「Wait But Why」https://waitbutwhy.com 再推荐一个今年才看到的纪录片： ⁍「Maya Lin: A Strong Clear Vision, 1995」我非常喜欢像林璎这样既强大又细腻且有深度的职业女性。拿作品而非言论说话，大概是在长时间维度上赢得别人尊敬的唯一途径。 新栏目 - 推荐几个值得一看的 YouTube 频道： ⁍「Justine Leconte officiel」这是一个住在柏林的法国独立服装设计师。如果你关注如何才能真正穿得既得体舒适又时髦大方，而不仅是肤浅追逐当季流行，推荐你观看三个很棒的 playlists：「STYLE GUIDE - What works for your body」、「QUALITY FASHION - Tips to find good quality &amp; avoid fast fashion」、「COLORS - Which colors suit you」。 ⁍「Jessie Shao」她是微博上的“你好_竹子”摄影博主。和很多人一样，我也被她的真实和热情打动了。在她的「Vlog 31 days: 怎么成为一个有趣的人 20/31」视频中，我大概听到了我今年在微博上接收的最有价值的7分钟信息。 ⁍「Kurzgesagt – In a Nutshell」油管上超火的科普短视频频道，是由一个德国的小团队策划制作的，风格突出，一月一更。你一定在国内社交平台上看到过抄袭这个频道的科普视频…… 我常常会在读书时随手把当下的读后感或摘录碎片化地记录在微博上，如果你感兴趣，可以关注我的微博 @思南说。 Further reading 2017 年度书单及更多 What I read in 2019 What I read in 2020 " }, { "title": "我的 2018 结束啦！", "url": "/sinantang.github.io/pr-7/posts/my-2018/", "categories": "Self improvement", "tags": "learning", "date": "2018-10-29 00:00:00 +0100", "content": "虽然仍站在10月的尾巴上，虽然从本周起我的生活中会有一项新挑战开始，但 2018 年在我心目中已经结束。我连明年的台历挂历都买好了。 离开过去生活三年的弗赖堡，应该算是一个结束标志吧。 在弗赖堡的平静日子，除了上课，我很少去市区，很少逛街，没太外食，很少出门。三年前从英国搬来德国，到现在从弗赖堡搬来柏林，中间读完研究生，完成几份实习，结婚，接触编程，搞定签证，多走过几个国家，开始写个人博客（谢谢老读者两年来的陪伴），开始第一份正式工作，开始有一点积蓄，开始对自己的职业、人生规划更清晰。 比起我现在对自己的认知水平，三年前还在利物浦的我简直幼稚得令人不忍直视。自我认知这件事呀，不仅需要更成熟的心智，更丰富的经历，还需要对自己人生更高的掌控感。 从现在到新年的俩月，想把今年还没读完的几本书收收尾，想找勺子录一期主题已想好的播客（还没征求她的意见哈哈），想抽空再写几篇文章。再准备准备圣诞，然后 2018 就呼啦一下子过去了。 2019 年我的几个“大”目标：学车，考德语，学跳舞，继续多赚钱，继续多读书，研究去日本短居的计划。 你的 2018 过得怎么样？ 另，如果有在柏林的读者，欢迎来找我玩儿！ " }, { "title": "如何规划自己的职业道路，如何保持自学路上的执行力", "url": "/sinantang.github.io/pr-7/posts/career-planning/", "categories": "Career as an NLP Engineer, Self improvement", "tags": "career, job hunting", "date": "2018-10-15 00:00:00 +0200", "content": "在我写了《从英语翻译到人工智能：我如何用两年时间跨界转行》和《我是如何自学编程的》这两篇文章后，得到最多的称赞可能是关于我的“超高执行力”。每次我看到类似留言，我都会有点无奈地笑笑。有太多与执行力关系不大的事，总被人们盖上“执行力”这顶无比好用的归因帽子。在我看来，这颇有点避重就轻、以勤奋战术掩盖懒惰战略的味道。姑且把“执行力”算作“战术”，把“规划”算作“战略”，这篇简单写一写职业生涯中的“战略”与“战术”吧。 战略篇 “执行力”确实重要，但还有比这重要得多的东西——「方向」。「方向大于努力」这句箴言我在文章中微博里写过不止三五遍了。如果你选错了方向，执行力越高反而会越加速远离自己真正想实现的目标。大多上进的人都花过很多时间把注意力集中在“如何提高执行力”，比如写清单啊用番茄钟啊早睡早起啊。如果你也是其中的一位，你可以问问自己，你是否也花过相当的时间在思考自己的职业乃至人生方向上。如果一个人想了各种办法来提高自己工作学习的效率，却没怎么花时间思考过自己为什么要那么做，那多少有点不对劲、不明智吧。 最近读了 Tim Urban 的一篇长文《How to pick a career (that actually fits you)》，他详细写了如何为自己三四十年的职业生涯做规划的方法论（文章链接见文末，我之后也许也会转载分享）。他的方法论有效无疑，但我认为对于二十多岁已经离开校园的人来说，似乎只写了两种常见场景中的一个。 Tim 提到要寻找“想做的工作”与“能做的工作”的交集——先从不同的维度上设想所有自己向往的工作，再回到现实根据种种标准列出自己能做的工作，最后找到这两个集合的交集。 然而，依然拥有很多想象空间和选择余地是一种生活状态，但还有另一种眼下只有两三个选项的生活状态。随着年龄增长，对于大多数人来说，前一种生活状态会逐渐缩水，后一种生活状态会成为常态吧。比如，对于还在选择大学专业的高中毕业生或选择就业方向的大学毕业生来说，他们大可以也应该尽量大胆想象，扩大自己的潜在选择空间；但对于已经开始工作几年，甚至已经结婚生子的成年人来说，也许连找到除目前生活方式或职业外的另一选项都并不容易。 如果你还很幸运地处于第一种生活状态，那耐心读一读 Tim 的这篇文章，就算花几天几周的时间读完也很值得，读完必会有收获。 但今天我想简单写一下成年人的第二种生活状态。当你手上只有非常有限的选项时，该如何做出重要的职业选择呢？还是拿我自己做例子吧，因为对我而言最熟悉也最真实。 1. 关于我为什么在三年前为自己选择了转行到自然语言处理工作的原因分析，我在旧文中已有扼要的叙述——「钱」「兴趣」「擅长」三个关键词。在这里就不再重复了。对三年前的我来说，这并不是一个有很大选择空间的状态。打破已有专业的固定思维，需要一定的想象力、调研能力、独立思考能力，但这其中的选择空间其实很小。 如果你在开始工作前就有家里资源帮衬，那很幸运，选择也会更从容些；但如果你只是一穷二白，那就最好不要把「钱」的重要性排得太往后。请留意，这里的「钱」有“当下的钱”与“长远的钱”之分。真正看重钱的人想赚的肯定是“长远的稳定的钱”，而不是“当下的高风险的钱”。比如我在三年前作出决定时，首先考虑的是“毕业十年后能靠一份普通工作赚到的钱的总和”，而不是“当下就能拿在手里但未来不保证能持续的钱”。所以我在研究生课余时间里花了大量时间在家上 CS 网课，而不是出门去咖啡馆餐厅打工赚零花。 我认为，一个真正靠谱负责的人是会认同并践行「穷则独善其身，达则兼济天下」这个道理的人。努力不要成为一个意见比存款数字多的人，也要远离那些热衷夸夸其谈点评天下的穷人。 2. 我想花更多笔墨聊聊自己更近期的一个职业选择。 前段日子，我看到爱丁堡大学正在招明年自然语言处理方向的博士生，有 funding，名额也不少（链接在文末，感兴趣的可以去了解下）。如果你也是 NLP 业内人的话，你会知道爱大在业内的地位不言而喻。一开始我刚看到消息时非常心动，还没申请（且申请也不一定成功…），心里就已经自动罗列起了申请去爱大读博的种种好处： 有一个爱大 NLP 方向的 PhD 必定对跳槽升职涨薪都有很大积极影响；读博能加深我对这个领域的理解，是个可以整合知识提高专业能力的完整时间段；读博期间能认识很多业内专业人士，有助于拓展职业机会；可以和一小群背景多样但都很聪明的人朝夕相处；博士期间补助足以支持生活；英国博士三年即可毕业，比大部分国家的博士项目节约1-3年；我几年前去过爱丁堡，很喜欢那儿；我在英国有几个好朋友，可以顺道去拜访…… 但我没有立刻就去找导师发邮件，不立刻有所行动也不是因为拖延症，而是我觉得自己要先从看到这则消息的兴奋劲儿中冷静下来，好好思考一下这么做对我职业生涯甚至人生的影响，再做出具体行动。我问了自己两个问题，以问题引导自己思考，然后……我就冷静下来了，决定不申请爱大博士项目，也决定了不会再犹豫考虑其他大学的读博机会。这两个问题是什么呢？ (1) 想要读博，有多大因素是为了一个名校博士 title？如果我永远不可以向不相关的人提这件事，那还剩多少动力去做这件事？ 我想了想，如果一辈子不能向别人提到这个名校学位，我大概只剩 70% 的动力想读博。 剩下的动力其实有一部分来自“想和一小群特别聪明有趣的人一起工作”这个欲望。因为我觉得大多数普通工作环境中，还是庸人笨人太多……但读博是满足这个想法的唯一途径吗？答案也是显然。 (2) 假如四年后我顺利拿到学位，那将来的职业生涯真是我想要的吗？ 虽然这个博士只要三年，但却是在一个单一、特定、狭窄维度上的三年。并且，算上博士之前积累，已经在一个领域投入那么多，绝大多数人会因为沉没成本而一头在这条道上一路走到黑。在这个领域做科研或去工业界当二三十年的工程师——我相信对于真心热爱的人来说，这是个很让人向往、心安的前景；但这个想象当场就让我冷静了——我可从来没想过要以 xx 工程师的头衔退休呀！ 我对自己四十岁的想象，一直是快乐充实的全职妈妈、兼职作家、兼职经商。虽然对技术也感兴趣，但我从没想象过自己四十岁时会是个快乐的全职工程师…… 一生太短，你只可能在你热爱的领域做出点小成绩。 我其实很喜欢做生意开公司这件事，但心里总觉这是一件“很久以后的事”。 前几日，在兴致盎然地读特朗普的《做生意的艺术》时，我突然意识到，我从未以相同水平的兴趣去读一篇 NLP 的 paper，或自主去解一道编程题。那一刻，我意识到，我应该正式规划下自己真正感兴趣的这项事业了。 其实，对我而言，编程也好，计算机语言学也好，短期（10年）内追求做一位称职工程师也罢，在我心中的定位都只是用来“糊口”的工作。生活在一个普通人有机会通过自学就进入收入中上行业的时代，我很感激，也很认真对待这份工作。但如果选择读博，那我势必会在一个只是用来“糊口”的工作上花掉太多该用来“过我真正想要的人生”的时间精力。 想到这里，我最后给自己的答案已不言自明。 如果你也面临类似的职业赛道选择，也不妨以这样“直击内心”的问题来引导自己思考，寻找对自己目前情况来说的最优解。人生不同阶段有不同需求、不同疑惑，三年前我面对的选择与现在我所面对的并不同。独自探寻这个步骤，是没法由别人来代替的。 战术篇 在我看来，最大的执行力永远来源于对自己人生的掌控感。想象一下，如果一个人的专业是家长强选的，工作是长辈安排的，伴侣是父母决定的，那他每天早上能有多大的动力起床面对又一天被安排的生活呢？ 反之，如果你面前躺着一本薄薄的习题集，是两天后应聘心仪职位面试题的题库，大多数人肯定很有动力去翻那本习题集——每多看一道题，就多一份对面试的把握呢！假如人生也存在这样一本习题集的话，每多学一题，就多获得一分对人生的把握，那谁还没有执行力去看呢？ 不过，学会掌控自己人生这件事，确实需要二十多岁的年轻人习惯、学习。就像 Tim 在文章开头所说的，越来越多的人前二十二年人生都是由家长、学校、政府安排，从二十多年的惯性漂流中猛然换成自己游泳，一时半会儿换不上气也很正常。 把当下作出的选择与对未来人生掌控感连接起来，有个非常好用的思维工具：「Visualisation」，可视化的预想。即去大胆想象未来目标达成的情景，越具体越好，越细节越好。 五六年前，我决定去英国留学时，也经历了一番犹豫和挣扎，因为在上课的同时还要 DIY 申请材料、准备语言和签证，压力不小。那时大大减轻压力的一件事就是静下心来想象一年后在英国可能会发生的各种情景，意识到那些期待中的场景是由我当下所做的每一步准备铺就而成的——这不就是对自己未来人生的掌控感吗？这种有些陌生的掌控感却给我了实实在在的力量。 附言 「战略篇」与「战术篇」的篇幅与它们的重要性相对应。 参考链接： 《How to pick a career (that actually fits you)》 Support: Computational Linguistics; Cognitive Science: PhD, University of Edinburgh. " }, { "title": "做好自我审视，让你离自己的人生目标更近", "url": "/sinantang.github.io/pr-7/posts/a-guide-to-weekly-retrospectives/", "categories": "Self improvement", "tags": "meditation", "date": "2018-09-30 00:00:00 +0200", "content": "一转眼 2018 年只剩下最后 13 个星期，你还记得自己在 2018 前 9 个月里都做了些什么吗？ 若是在以前我听到这类问题，很可能会有点心虚，但今年的我不再心虚了，因为我此时确实能够顺利讲出这九个月自己每个月每个周甚至每天在做什么，以及做成了什么。不仅如此，我依然记得年初自己设立的年度目标。与之对照下，我对这九个月来自己的成长与变化也更加清晰了。而这一系列新获得的对自己生活的控制感，来自去年年底发现「每周审视」这一思维工具的帮助。 17 年年底在与勺子的一次聊天中，她兴奋地跟我介绍了与某位效率达人的一次际遇，讲了很多他的经历，还转述了他的一些工作方法，其中就包括每周日雷打不动的“每周审视” routine。我听了后也很兴奋，就在写新年规划时郑重把这条加入了 2018 的新习惯体验计划之中。 一开始，我有点迷茫该用什么形式进行并记录“每周审视”，经历了弃用 思维导图、涂鸦、周记 等工具的摸索阶段，最终找到了最适合自己的形式。这里就分享一下我现在的“每周审视”方法，供读者参考！ 说是“每周”审视，其实「自我审视」一词更为准确。因为我把回顾与计划的习惯融入每一天的生活中，这比仅仅拘泥于固定频率或形式要有益处得多。 1. 每日生活随笔记 在 2018 年开始前，我先入了一个好看又实用的 desktop calendar（台历），方便随手简单记录每天做了什么，以及接下来的重要预约或死线——事实证明，这可能是我今年花得最物超所值的十来欧元…… 到目前为止，前九个月的日历都被我的写写画画和贴纸填充满了。翻到过去的月份，我就能根据之前留下的痕迹快速回忆起那时做的事。 我会在日历上记下每天的： 运动 (W)、学德语 (D) 、小成就、各种预约、重要工作截止日期、旅行、朋友见面、冥想、随机想法 等等。 我发现，偶尔哪一天什么记录也没留下的话，第二天我盯着日历上的空白格子，常常想不起来前一天24小时究竟具体做了些什么，而时光却已实实在在地溜走了。这种感觉让我有点心慌，我不想再有站在一个月、半年、一年的尾巴上回望，又苦恼自己的时间花在哪里了的体验。 2. 善用清单 2018 开始一段时间，我的周日审视习惯总是断断续续、成效不大，主要因为我一开始没找到适合自己的记录方式，又在纠结表面形式上花了太多功夫。后来我发现，自己还是最适合简单的清单式自我审视，于是就回归简洁不啰嗦的 bullet journalling 了。 我的几个常用清单包括： 工作上，我已经习惯了每个工作日刚开启电脑时，就先去 MacBook 上的 Notes app，回顾昨天的工作完成情况，再开始写下今天的工作内容计划。这个工作习惯已伴随我两三年了，在旧文《职场菜鸟如何从零开始建立良好的工作习惯》中也写到过。这样的习惯让我很清楚地看到自己的工作进度和状态，轻易不会忘记战线拖得较长的任务，需要回顾工作时也非常方便。 生活上，我为自己写了一份“个人价值观”的小清单。我的“价值观”指的是那些真正能让我快乐的事，那些让我觉得有意义的事，以及我想拥有的品质。举个例子，我的价值观清单会包括： To excel（喜欢把一件事做到最好的感觉，尽心尽力和做到优秀让我快乐）； Mind &amp; Body（身心平衡，需要定期独处思考与锻炼身体的时间）； Creativity（必须要做一点有创造力的事，比如写作编程，不能忍受太久乏味重复的工作）； Curiosity（喜欢自己依然保持了对世界万物的好奇之心，不希望自己失去这份好奇心）； Family（小家庭对我来说很重要）； Fortune（喜欢赚钱，立志做有钱人）。 每个人肯定都有自己的那份价值观，如果你不是很确定的话，可以找一段静心独处的时间，抛开所有别人与社会的期待和成见，思考一下什么对你来说来说最重要的。 “个人价值观”再加上年初写下的“年度目标”，这两个清单主导了我每周审视的焦点。每周日，我会在书桌前坐下，看着台历上留下的记录，以“价值观”与“年度目标”清单为参考，回顾这个周的生活，以清单的形式，写下值得骄傲的小成就、有什么进步、没完成的任务、运动次数、读书进度、喜欢的书和影视，以及对下周的期望。 最后，我还会专门想一想，此时是否有一些让我抗拒或我正在拖延的事依然在大脑后台挂着进程，尽管那些小事可能很不起眼，表面上也没有影响生活，但不解决的话，它们会一直默默运行在你的大脑后台，占用大脑带宽，还可能慢慢变成更严重的事。比如，对朋友、对伴侣的小情绪，对工作的抱怨，枯燥的文书工作（paperwork）。 除此之外，我还有“阅读清单”，记录想看、在看的书；“GTD 清单”，记录必须要做的生活杂事，比如看医生、付账单、寄快递、打扫等等小事。 3. 工具 在这个习惯中，工具相对来说是最不重要的，但我还是简单写一下个人自我审视用到的物品和 app 吧！仅作参考。 前文已经提到，随笔记录每天生活的是 desktop calendar（台历）。 在工作笔记本上记录每日工作的是苹果自带的 Notes，简单够用不花哨。 手机上记录“价值清单”与“年度计划清单”，以及各种小清单的是 Google Keep。如果找不到 Google Keep 的话，我知道类似的效率工具还有个 OmniFocus 和 Wunderlist，前者更花哨，后者稍简单。我一般喜欢简单的工具。 手机上每周日写“每周审视”的，依然是 Notes……我在 Notes 里专门建了一个文件夹，用来盛放“每周审视”。 小结 今天是周日，借这篇文章，我也顺便简单回顾了 2018 前九个月的生活状态。 正好赶上国内十一假期，可以拿出一两个小时，坐下来安静想一想今年做了什么事，年度目标达成了多少，剩下三个月，说不定还可以努力赶赶路呢 :) 最后附上喜欢博主的一条微博，完美结尾： 假期愉快！ " }, { "title": "聊聊工程师职场中的细节", "url": "/sinantang.github.io/pr-7/posts/engineers/", "categories": "Self improvement, Career as an NLP Engineer, A Developer Guide for Newbies - Starting with Python", "tags": "programming, developer, newbie, career, github", "date": "2018-09-24 00:00:00 +0200", "content": "如果你是一名程序员，或在工作中常与程序员接触，那你一定对 Git / GitHub 不陌生。程序员差不多有一半工作时间都是在 Git / GitHub 上度过，要么在写代码、push commits，要么在 review 同事的代码。 在工作了一段时间后，我发现几个与 Git / GitHub 相关的工作细节被很多人忽视或并不在意，从而给别人带来不必要的麻烦，浪费别人的时间与注意力。 1. 换位思考，减少对别人注意力的消耗 在 review 别人代码时，如何提交你自己的 comments 存在两个选项： ​ A. Start a review ​ B. Add single comment 如果你选择 A，那么你的所有 comments 会在最后结束 review 时一次性提交一次，所有 watch 这个 repo 的同事和与这个 Pull Request (PR) 直接相关的人，此时就会收到一封 GitHub 发出的提示邮件。这封邮件会显示你留的所有 comments，干脆利落。 但如果你选择 B 呢，你的每一条 comments 会挨个提交，所有 watch 这个 repo 的同事和与这个 PR 直接相关的人，会不断地收到来自 GitHub 的提示邮件。对于一个改动多的 PR，一个 reviewer 留十来个或更多 comments 也不奇怪，于是所有人就会接连不断地收到十来封或更多提示邮件——每一封邮件内容只有一个 comment。 这确实是一件看起来很小很小的事，但作为习惯于让收件箱未读邮件数归于零的人，时常被这样一长串 GitHub 提示邮件打扰，我偶尔会有点恼火——因为每一次打断注意力的信息量竟如此之低，有时我不得不手动到邮件文末去点 mute the thread 按钮。就算是更改了一部分邮箱收件规则和间隔，也还是避免不了被这样的小事打扰。 其实常常做出 B 选项的人都是固定的几位，来来回回几次，至少给我留下了他们也许不太在意细节、不太会换位思考的印象。当然，作为工作还不到一年的新人，我对别人的职场印象对他们的影响几乎为零，可如果时间比我宝贵得多的老板也像我这样龟毛呢？ 2. 先做好自己的工作，再…… 在写代码、提交 PR 这件事上，也很容易观察到不同人的工作风格。只有在 GitHub 上开新 PR 时，所有 watch 这个 repo 的人和被加到 reviewer/assignee 列表的人才会第一次收到邮件提醒。在收到这类提示邮件时，我在有些同事的 PR 提示邮件中正文中很清晰地看到一串清晰简洁的 commit history，外加适当的代码改动总结，表示这次提交的主要内容已经完成，同事们可以直接 review 了；在另一些同事的邮件正文中，却只看到一个 commit 记录，没有 PR 总结，并且这次要提交的内容往往还待完成，因此所有在收件列表上的人还会继续收到几次信息量不高的邮件提醒。 我对前一类同事真的很有好感。 3. 举一要反三 在 review 别人 PR 时，比较令我无奈的情景之一是：当我留言指出一个小问题后，原作者快速改掉了，但 ta 只改了我指出的这一处问题，同一 PR 中其余几乎一样的小问题还是纹丝不动。或者我以前曾在 review 中留言指出一个语法错误，但隔了一段时间后，同一位代码作者又写出了一模一样的错误，并且表现出“不知错在哪儿”的茫然表情。 这样的场景除了发生在 GitHub 上外，相信在各种工作场景、各种职业中都不少见。 我觉得职场中大部分同事大都很友好，会愿意通过建议的方式指出问题，但大多数人大概都对反复提醒同一个人的同一个错误缺乏耐心。连孔子作为老师对学生都有“举一隅不以三隅反，则不复也”的要求，同事和老板对你抱有“举一反三”期待，也是非常合理的了吧。 小结 新手写作者容易犯一个毛病（我也常犯）：一下笔就絮絮叨叨啰啰嗦嗦，恨不得把自己脑中想到的一切细节全部倾倒在纸上，生怕不写出来别人就不知道自己的思考有多么严密深入。但读者此时只觉文字拖沓，缺乏简洁有力的筋骨，甚至有时令人云里雾里。当一名写作者终于学会在纸上隐藏脑中走过的中间细节时，ta 必然会同时明白，一篇好作品背后藏了多少作者提前排练过的细节和不为人知的心思。 工作也是如此。看到别人获得一项好业绩，如果你没能达到同样的水平，那你很可能不知道背后包含了多少不会黑纸白字写出来的细节。那些细节究竟是什么，我常常很好奇，因此也很愿意琢磨像这篇短文中写出来的这些小细节。 " }, { "title": "博主博主，你是怎么学好英语的啊？干货满满的英文学习 Q&A 大放送", "url": "/sinantang.github.io/pr-7/posts/english-learning-q-and-a/", "categories": "Self improvement", "tags": "learning", "date": "2018-09-10 00:00:00 +0200", "content": "这大概是我收到的最频繁的提问之一了。 关于英语（语言）学习，我其实已经写过好几篇文章，比如： 《高级英语阅读方法：理解中英文语法形态的大不同》 《那个会说十几门外语的美国小哥来了》 《六年后重考高考英语给我的收获》 《隐喻的世界：浅谈语言对思维的反向塑造》 甚至为了响应小伙伴们要提高英语阅读水平的需求，我还办过两期「我的第一本英文原版书」读书社（现已完结，暂无新开计划）。 但各种关于英语学习的提问还是络绎不绝，我做不到一一回复相似的提问，就索性写个 Q &amp; A 吧。以前写过的内容尽量不再重复。 我的英语学习经历 Q: 博主，你是怎么学英语的啊？ A: 我从小就对英语感兴趣，认为英文很美。成绩也不算差，高考英语139，大学考到中山大学英语翻译系；大二考了雅思、专四、BEC；大三大四去了英国继续读完本科，那时修的双专业中的一门是英语语言学；硕士也是语言学，在德国念的。课余做过雅思老师。喜欢看英文书。 Q: 我怎么能把英语学到像博主你一样那么好？ A: 首先，我觉得我的英语算是够用，语言不会成为我日常生活学习工作的一道障碍，但真算不上“特别好”——就好像你应该不会夸你的父母中文好一个道理。当然我的英语跟非英语母语的中国人比起来很不错，但我并不生活在国内，所以这个比较对于我也意义不大。 再就是，看了上一段我大致的英语学习历程你就会知道，就算是我这样“够用”的英语水平，也是多年来不间断地认真学习扎实积累的结果。直到现在，我也是每天都在读原版英文书、看英语新闻信息、用英语工作、聊天、学新单词。提这些只是想摊开说一件事，学了十几年的英语，我知道的只有踏实的学习方法，并无几句话就讲完的速成捷径。 要真说“捷径”的话，我大概只知道一条：出生并成长于英语母语的环境中。 但说到方法呢，经验又告诉我，大多数人并不是缺少方法，而是缺乏行动。 如何提高英语听力 Q: 我已经在美国生活了一段时间，可大多数时候还是听不太懂外国人的英语。 A: 首先，在母语国生活不代表外语会自动进步，毕竟你已经不是学语言时障碍很低的儿童了。我三年前刚来德国时，一句德语都不会说。但是通过点滴自学，现在不少人都说我比很多在德国生活多年中国人的德语更好。如果你也在国外生活，应该很清楚，有的是在外面生活了小半辈子也说不利索外语的华人。总之，作为成年人，你的外语水平不会在不主动学习练习的情况下就自动变好。 再就是，“听不懂外国人的英语”这个问题太笼统。你应该好好问问自己，听不懂的到底是什么？究竟是口音呢，还是口语发音方式，还是俚语习语，还是一个笑话的文化背景，还是某些生词，还是你根本不了解那个话题（即，就算是中文也不会懂）。“听不懂”的原因，实在是太多了。 解决问题最重要前提就是提出一个好问题。不论是请人解答还是自己思考，都请先明确你的问题到底是什么。 关于”如何提问”，我已经写过几篇文章，比如《Tim Ferriss 教你如何提问》，《万能思维框架 WHAT HOW WHY》 供读者参考。 Q: 好吧，我有时连很多认识的单词也听不出来。 A: 这是提高英语听力的一个入门级难点。由于英语口语中存在大量连读、弱读、省音等发音现象，你听到的”tomorrow”并不是你自己在发的那个“tomorrow”，于是就导致简单常见的单词反而听不懂了。 解决这个难点的方法很简单，但需要积累大量练习时数。听力的基础“磨耳朵”练习——「精听」+「泛听」即是这个方法。具体方法细节可以参考《之二： 刘亦婷的学习方法和培养细节》这本书提供的一个思路。以前在旧文里推荐这套书时，写过下面一段话，供你参考： “可以毫不夸张地说，我在学业上的启蒙很大一部分始于初中读了“刘亦婷的学习方法”。特别是英语，在那之前我的英语一直不温不火，后来采用了书中介绍的学习方法坚持了一段时间后，明显感觉到我的耳朵对英语发音的确敏感了很多，第一次听到了以前从未捕捉到过的弱读、连读、音调等发音现象。而扎实的听力基本功也是讲一口漂亮英语的基础。因此我初中时就打下了英语学习的基础，从那以后就一直属于周围英语最好的那一小撮人。” 还有一个另辟蹊径提高听力水平的方法：以练口语来提高听力。 听不懂连读根本原因是自己不会连读，听不到弱读根本原因是自己从不弱读。口语基本功扎实的人不会有听力问题，除非真的不懂谈话内容。 最后，有时单词、习语不懂就直接问对方好了。这种情况下记住生词的效率往往超高，因为你是在一个真实使用场景里学习原汁原味的用法。我知道很多人还是担心面子——所有有教养的母语者都不会嘲笑英语学习者的正经提问的！退一万步讲，就算人家背后嘲笑，我觉得跟学到新知识相比，还是后者更值呀。 如何提高英语口语 Q: 如何准备英语面试？ A: 就像准备中文面试一样就行了。面试的套路都是固定的，先保证听懂提问，再提前备好回答套路。 Q: 如何快速提高英语口语？ A: 准备、准备，还是准备。若对自己即兴讲口语没信心，就提前准备好腹稿，甚至像 Presentation 一样提前练习可能的对话内容。 五年前我刚去英国没多久时，口语很差，很多日常对话都很吃力。我的应对方法就是尽量在每次开口前都准备好自己想说什么。去银行前想好怎么表达自己的需求，上课发言前想好自己的问题是什么，甚至在和同学聊天前也想好可以聊什么话题、怎么聊；没把握的单词词组也提前查好。 这样不只是你在别人面前表现出的口语水平会有明显提升，同时也有助于增长自信，让你有动力下回也敢于开口讲。只不过“提前准备”这个方法看起来如此简单，以至于很多人都忽略了。 很多人以为自己口语不好是因为词汇量不行。其实在词汇量完全不变的情况下，有很多口语小技巧可以帮助提高口语交流效果。比如降低语速，抓住单词主要元音的发音，使语调变得更生动等等。 关于念不准短单词中元音的后果，我想起以前的一条微博 :) 如何提高英语阅读 见 《高级英语阅读方法：理解中英文语法形态的大不同》 那英语写作呢？ 口语和写作都是语言输出的形式。如果说口语要让人听懂还需要一定发音训练的话，写作已经完全抛却了语音的负担，但很多人写作成绩也不见得就因此会比口语高。这是为什么呢？ ——因为英语写作说到底还是写作，写作是表达个人观点、描述故事的方式。如果你并没有什么可写的，还谈何“怎么写”呢？因此想要言之有物，绝不仅是提高英语水平那么单纯。 除此之外，英语写作可以学习的主要是写作范式。尤其对于常写英语论文的留学生来说，学会学术写作的范式和风格很重要。除了学校给的 reading list 外，我想推荐一本有名的英文科普类书，《The Selfish Gene》。我最近在读的时候发过这么一条微博： 小结 关于英语学习，我已经写了很多很多方法论啦，能不能偷完师学到家就看你的了！ 觉得哪个方法最有用，就在评论栏里留言给我吧 😇 " }, { "title": "我是如何自学编程的", "url": "/sinantang.github.io/pr-7/posts/how-i-taught-myself-programming/", "categories": "Self improvement, Career as an NLP Engineer, A Developer Guide for Newbies - Starting with Python", "tags": "programming, developer, newbie, career", "date": "2018-09-02 00:00:00 +0200", "content": "今天来简单写一下我是如何自学编程的。 自从半年前写了这篇文章《从英语翻译到人工智能：我如何用两年时间跨界转行》后，我就不断地在公众号和微博（我的微博账号：思南说）上收到标题里这个问题，这个周末终于有点清闲，就找机会把这篇写出来了。 16年年初，在我决定要从纯语言学转方向到计算机语言学之后，我就开始了自学基础编程（——之前有不少读者误会我是在学校转了专业，其实不是，一是因为我们学校没有计算机语言学，二是德国大学普遍不能转专业。所以我只是在课余自学而已）。看了一些前辈的科普后，我选择了先从 Python 开始。因为我以前在 Coursera 上过网课，体验很不错，所以那时也照例先在 Coursera 上找到了一门 Python 入门课。 我选择的第一门编程课是密歇根大学推出的《Python for everyone - learn to program and analyze data with Python》——相信很多自学编程的人都曾上过这一门相当热门的编程系列课。 16年上半年四五个月的时间里，每个周末我都拿出几小时花在密大这一系列共5个模块的课上。因为我对于新知识向来入门慢，结束这系列课所花时间确实不少，但我最终还是完成了所有课程内容和作业，也算是一只脚跨进了编程的大门。 现在回头看，密大这个系列的编程课最大优势在于教授讲得非常浅显易懂，Python 的基础知识点都一一讲过；但是，整体课程实在有些浅，很多计算机科学的基础知识都略过了，编程作业也太少太浅，导致单纯按这个课程走下来的学生必定练习严重不足。编程知识与技能的积累相辅相成，两者都需要用大量练习形成肌肉记忆，才能真正走到应用这一步。 当时 Coursera 上的课程还普遍免费，只有最后的 certificate 需要付费。我并不迫切需要 certificate，就利用 Coursera 当时的政策报名了好几个与计算机科学或数据科学有关的课程。除了密大的 Python 入门课之外，我还上完了杜克大学的《Mastering Data Analysis in Excel》。这个课则比我预想得讲得深不少，一方面帮我拾回了不少数学基础，另一方面我也无意中学到了一些数据科学（Data Science）的基础概念和方法，例如很是有用的二分类（binary classification）、混淆矩阵（confusion matrix）、熵（entropy）和互信息（mutual information）等。我认为，如果你大学没修过任何高数类课时，想要转行进入数据科学或软件工程的话，那至少杜克大学这门课里面的所有基础概念都应该认真掌握。 接下来16年的暑假，我申请到了去图宾根大学计算机语言学系实习的机会。在那儿，我第一次接触到了学术界关注的几大自然语言处理主题，比如分词、句法分析、情感分析等等，NLP 于我不再只是一个空中楼阁般的虚称。 同时，在我的积极争取下，mentor 给了我一个简单的编程任务，但需要用 Java 来实现。Java 基础完全为零的我在两周内通过自学挣扎着写完了一个短程序，完成了任务！ 那时快速记下的种种 Java 语法细节，自然是过后全被我忘了，但这个经历让我初步认识到不同编程语言之间范式的不同，也让我了解到编程在现实中的应用形式，同时还大大锻炼了我通过谷歌和 stack overflow 在纷杂的互联网世界里快速寻找有用信息的能力…… 暑假结束，我回到学校继续上课。一天我在翻李笑来多年前的旧博客时，看到他推荐过 MIT 6.00 (2008 fall) Introduction to Computer Science and Programming 这门网课（链接见文末）。后来我才发现这是门相当有名的经典计算机科学入门课，欧美很多自学计算机科学转行编程的前辈都学过并推荐这门课。于是我在课余也开始踏上了自学这门网课的“漫漫之路“。 不夸张地说，我认为从我开始上这门课的那一天起，我才真正入门了计算机科学（Computer Science）。以前只是入门了初级编程而已，其实根本还没碰到 CS 的门边儿——CS 之于 coding，就好比“懂得出海捕鱼之于只会去鱼市买鱼”一样，其实完全不能等同于一回事。 MIT 6.00 这门课很难，我直到2017年暑假才把所有课程视频看完、课后阅读读完、编程作业和考试写完。但这门课的两位教授（Eric Grimson &amp; John Guttag）是我在网上见过的讲 CS 讲得最好的老师之二，跟着这两位教授的指引，我加深了对 Python 的理解，了解了几种基础算法的实现，学习了数据科学基础和机器学习，知道了测试的重要性，认识了几种常见编程范式，还了解了 CS 在工业中的具体应用。 很多初学编程的人，已经跟着一门像密大 Python for Everyone 那样的课程规规矩矩学完了 Python 的所有语法，但若抛给他一个实际问题、问他如何用 Python 实现，他就立马傻眼了。这些只学会了表层语法的人，都需要认真研究一门像 MIT 6.00 这样真正的计算机科学入门课，来提高对编程的理解与真正写程序的能力。 MIT 6.00 这门课也让我深刻认识到优秀的老师究竟有多么重要。天下老师手里的课本都相差无几，但大部分老师只是在做“努力把课本中的表层知识搬运到学生的耳边”这样的事，只有少数优秀的老师才真正理解一个知识点的内涵与外延、一群知识点之间的联系、不同学生的困惑之处，以及如何画龙点睛般化解学生的疑问。 秉承着这个“尽量只上好老师的课”的标准，在学完 MIT 6.00 后我又找到了另一门“名师课”：Peter Norvig 在 Udacity 上开设的免费课程《Design of Computer Programs》。 In case you don’t know Peter：Peter Norvig 是现任谷歌科研主管，USC 副教授，曾任 NASA 科研主管，出版过 CS 课本。Norvig 曾写过一篇名为《Teach Yourself Programming in Ten Years》的著名文章，欧美程序员几乎无人不知无人不晓。 这门课果然没让我失望。如果你已经很熟悉 Python，也有一些基础的 CS 知识了，那就可以上这门网课试试（链接见文末）。Peter Norvig 教了很多编程自学者容易忽略的程序设计的原则和算法考量，我常常一边上着课一边在内心惊呼：“噢，原来是这样！” 除了以上这些值得一写的网课之外，我还上过其他大大小小、免费或付费的在线课程，但总体来说，那些课程质量并没有太出挑的。 关于选网课，我总结了一下自己的经验和标准——非常简洁！如果你是真正想要扎实学到知识，而非为了快速获得一个不知哪儿来的认证或为了缓解自己的内心焦虑，那最重要的标准就是「老师」。 不论谁来教 Python，语法都一模一样，但优秀的老师积攒了大量业界经验和教学经验，优秀的老师能够设计出优秀的课程安排，优秀的老师可以高屋建瓴地点通你的困惑，优秀的老师拥有能感染学生的热情。只有跟着优秀的老师，才能最少弯路地进入一门新学科——你可是只有一次“入门”新领域的机会呀。 除此标准之外，付费还是免费、课时多少、有没有结课证书，这些都没那么重要。作为学生，对老师的要求应该尽量高一点，对自己的大脑尽量珍惜一点——绝不是什么人都可以来向你大脑里灌输内容。这样最终你自己的水平才会越来越高。 除了网课之外，在2017年春夏时，我去 IBM 全职实习了5个月。这5个月不仅大大提高了我的编程和测试能力，也向我揭开了编程在大数据和机器学习应用的实现方式。在有若干 mentor 和同事的环境中，显然我的进步也更快了。我也是从那时起从零开始学习 Bash 脚本编程，开始频繁使用 git，开始学着以编程思维来思考工作中的问题，学着用写程序来简化重复性工作、减轻不必要的工作量。 在 IBM 的实习结束后，我拿一部分实习工资买了一台 MacBook Pro，从此终于进入了用 macOS 编程的人生！我不得不也老生常谈一句，对于程序员工程师来说，硬件与软件工具都很重要。能力范围内能升级的工具都可以尽量升个级。 以上就是我在正式开始工作前近两年大致的编程自学之旅。其实也不外乎网课、实习、看书、练习，然而这样一点一滴的用心积累，确是进步的最快路径。 希望对想要跨界转行的你有所参考价值！ 你有什么转行经验想和我和其他读者分享吗？欢迎在评论中留言！ 参考链接： University of Michigan: Python for Everyone &lt;www.coursera.org/specializations/python&gt; Duke University: Mastering Data Analysis in Excel &lt;www.coursera.org/learn/analytics-excel&gt; MIT 6.00 (2008): Introduction to Computer Science and Programming https://bit.ly/2neVySQ Peter Norvig: Design of Computer Programs &lt;udacity.com/course/design-of-computer-programs–cs212&gt; " }, { "title": "如何教自己做困难但必要的事", "url": "/sinantang.github.io/pr-7/posts/how-to-get-difficult-but-important-stuff-done/", "categories": "Self improvement", "tags": "career, problem solving", "date": "2018-04-01 00:00:00 +0200", "content": "到了该睡觉的时间了，你突然却想吃宵夜想刷手机想奋发读书…… 论文马上要 due 了，但你一打开电脑就不由自主地刷起了微博…… 健身馆快关门了，你还在镜子面前磨磨蹭蹭地照一身干爽运动装的自拍…… 同事抢了你的功劳，你畏于冲突，于是再一次选择了在背后跟朋友吐槽而不是直接与老板同事强势沟通…… …… 到底要怎样才能「自律」，如何才能完成为自己设定的年度/季度/每周计划呢？我想，这个问题应该造访过每一个还没放弃自己的人吧。当然，我也不例外。最近正在经历一场大型拖延拉锯战，这使我对这个话题的思考又达到了新高度。今天就快写一篇文章分享一下我的思考成果。 这篇文章着重于「术」，也就是说，我假设读者已经知道哪些困难的事是自己应该去做的——绝不是每件困难的事都值得花费时间精力去做，比如，闲着没事儿背三字经古文电话号码只为向别人展示记忆力，为“体验生活”染上恶习再竭尽全力地去戒掉等等。 「方向比努力重要」，先悟对了这个「道」再去忙「术」才是高效愉快生活的根本。 1. 甩掉外部激励，寻找内在动力 使用外部奖赏来激励某种行为是无比常见简易的鼓励手段。但一个不小心，外部激励就很容易变味，反过来损害你主动做一件事的内在动力。理解这一点对于育儿来说也有很大意义。这不仅是现代心理学已经证实的现象（谷歌搜索“why rewards hurt”就能得到很多心理学证据和文章），也能通过逻辑推理来想通这件事。 举个例子，很多人劝自己每天起床工作的主要“动力”就是几十年后可以退休——哼，等我退休了，我就天天葛优躺睡到自然醒吃吃喝喝啥也不干了！不管是有钱躺沙滩还是没钱躺沙发，这个愿望最大的意义其实仅仅止步于带给你“想象愿望时分泌的愉悦 (多巴胺)”。不然你试试当真的实现了这个心愿之时，有可能比几十年前正在想象未来的自己更快乐吗？ 除了“葛优躺”这件事确实带不来什么可持续的快乐之外，更重要的是这样的激励手段明显把愿望放在比做事本身更重要的地位上了。如果你辛辛苦苦工作几十年只为可以葛优躺，那为什么不现在就辞职去沙滩上躺着呢？这不怎么花钱，也肯定比老了之后更能招来桃花更有力气享受生活吧。 如果不是为了退休葛优躺这样的外部激励，那工作是为了什么呢？如果你能从工作中找到靠自己劳动证明个人价值的成就感，与更多人产生多种多样关系的连接感，用站着挣来的薪水养活家人、追逐自己理想的使命感，那哪还需要“退休葛优躺”这样虚无缥缈意义不大的“奖励”来逼自己工作呢？ 把目光缩小到每一件你认为自己应该做却还没做或做得不够好的事上，这个方法论同样成立。 是“减到100斤就给自己买包包”在逼迫着你每周去三次健身馆吗，还是运动本身给你的快乐和对自己身体健康的掌控感让你不去健身就不自在？ 面对每一件这样的事，不妨努力寻找自己从这件事本身能找到的乐趣（示例见旧文《编程的乐趣》），把目光从外部激励转向内在动力，这才是可以真正持久的「自律」。 别人以为你对自己够狠，却不知道你其实乐在其中。 2. 你的每一小寸进步都值得真诚庆祝 「One small step for man, one giant leap for mankind.」 这句话不必解释大家也很熟悉了，我觉得在自己生活中也应该拿出这样隆重多戏的态度来对待自己的每一点小进步。 怎么教自己做困难但重要的事呢？把一个任务不断地分解成子任务，直到无法再分解了为止；然后挨个去做一项项子任务，直到自己意志力的尽头为止。 Jordan Peterson 基于这个方法论提出过很多极度可操作的方案。 在一次 Q&amp;A 直播上，有一个读者提了一个问题—— “我一年前就加入了 self-authoring program，但直到现在也没写下一个字。请问我该怎么办？” （self-authoring program 是 JP 团队推出的以写作的方式了解自己并制定未来计划的心理学项目） JP 说， 你可以把这件事分解成很多个小步骤，然后一步步地去做，经常去尝试这件事，这样就很好了。 这个任务可以这样分解：打开电脑 -&gt; 打开邮箱 -&gt; 找到一年前写了你的登录名和密码的邮件（可能会花一段时间） -&gt; 打开浏览器 -&gt; 打开 self-authoring 的网址 -&gt; 用个人信息登陆账户 -&gt; 点开其中一项作业 -&gt; 阅读页面提示 -&gt; 写下第一行内容 -&gt; 现在可以关掉电话出门庆祝自己的进步了！值得奖励自己一顿火锅！ 把一项看似庞大可怕的任务分解到不能再分解——看似朴素的方法论里却蕴含了宇宙的真理！ Incremental progress 是每个人实现自己目标的最好武器。只要每天都能在正确的方向上进步一点点就非常好了。谁的路不是先迈一步左脚再迈一步右脚再迈一步左脚再迈一步右脚……这样走出来的呢。 3. 直面魔鬼，消除心魔 当你熟练运用以上两种方法后，如果依然偶尔会拖延重要的事的话，那就可以上第三招了：直面你的魔鬼。 举个例子。 当你抱着写完报告的目的打开电脑却迟迟不想点开 Word 时，首先，千万不要试图拿任何阻力很小的事来转移自己的注意力！刷网页玩微信吃零食，这些都属于阻力极小、让人不亦乐乎，但回到惨淡现实后只会多添一层焦虑愧疚的事。 觉得写报告这件事很让人抗拒，觉得那个 Word 图标后面藏着魔鬼让你不敢点开——这种情绪实在太混沌笼统了，你其实完全不知道自己究竟在怕什么，此时一旦滑入转移注意力的事，就失去了直面自己内心的一次机会，也顺便失去了成长进步的机会，这可比一篇报告重要多了。 ——但是，你可以试着忍住从现场懦弱地逃开的冲动，把自己的全部注意力都放到“我正在拖延一件重要的事”上面，在点开 Word 之前就盯着空白电脑屏幕好了，终于打开 Word 了就盯着空白文档页好了。 人在任何情况下都很难停止思维活动，就算盯着毫无意义的裂纹也会脑补出一个完整的故事。当你把全部注意力都放到眼下这件令你害怕的事上时，你会不由自主地开始分析自己害怕的原因、恐惧的心理活动，在那混沌笼统的表层情绪之下，很可能藏着让你哭笑不得的真相。 当你终于意识到真相其实是“我不想写报告是因为我讨厌要求我写报告的老板”时，并不一定会减轻你对老板的负面情绪，但却能帮助你把情绪与事实与任务分离开。“我虽然讨厌老板，但因此不交报告反倒会变成我的损失，为了一个我讨厌的人而牺牲自己的职场利益，每个有脑子的人都不会这么做的！”——看，问题已经迎刃而解! 若没有经过专门的思维训练，人很难意识到自己潜意识里在想些什么。恐惧生于未知，如果你有对峙心魔、直面真相的勇气，你就更可能成为一个心人合一的人，与混沌负面的情绪和解，有勇气去做所有你想做、该做的事。 在很多个这样直面自我的时刻，我都会发现我们最终需要的还是「勇气」。暂时抛弃不安全感而投入一项未知事业的勇气，与魔鬼对峙时依然能坚持自我的勇气，以及笃信自己最终一定能抵达目标的勇气。 祝愿你成为一个更勇敢的人。 " }, { "title": "编程的乐趣", "url": "/sinantang.github.io/pr-7/posts/fun/", "categories": "Career as an NLP Engineer, A Developer Guide for Newbies - Starting with Python", "tags": "programming, developer, career", "date": "2018-03-14 00:00:00 +0100", "content": "对我来说，编程的乐趣有三层。 第一，边思考边写程序极易让人陷入心流。而生活中高比例的心流体验是让人产生「有意义的快乐」的关键。 这是因为程序本就是为了更有效地解决实际而具体的问题而存在的；尤其在工作中，没人会扔给程序员一个假设性命题。相比于编程，研究数学更难让人沉浸的原因之一就是，数学要么在解决假设性命题，要么在解决高度抽象的理论问题；前者难让人产生现实连接感，后者对人的智力、天赋要求极高，我达不到。在数学中，我相对最喜欢的是概率论的部分，因为概率这个课题来自现实世界，同时还有点反直觉，随便研究一下都会给人一种探索的乐趣。 第二层可能因人而异。编程总会给人自由创造的空间，这一点也会让我快乐。我不能忍受一定要按别人的规定一步一步地去做一件事。就像西式烘焙的菜谱，所有用料、用量、时间、步骤都清清楚楚地标出来了。在生活中，我不讨厌按别人的菜谱一步步做出好看的菜品，但这要是搬到工作上，我是断然忍受不了没有一点点自己发挥创造的自由度。 而编程就不一样了，面对一个问题，你常常可以选择用哪种语言来编程，进而选择一种算法，进而选择合适的数据结构，最后还可以自己给所有变量命名！因此，当你最后面对一个程序时，不管简单还是复杂，你都很清楚这是你与自己大脑合作创造出来的作品。既结果导向，又存在自由的空间和创造的快乐，这可不是所有工作都能赋予的。 最后一点乐趣和第二点有关，我把这层称之为「成长的快乐」。 正是因为面对同样的问题，会有很多不同的思考方式和解决方案，于是在衡量每种方法的优劣时，也就成了你技术进步的绝好契机。一个新手要用十几行几层循环实现的功能，熟手可能随手调个库或用个巧妙的高级方法，一行代码就实现了。只要勤写勤思考，一步步地迈向熟手甚至高手，也并非特别艰难。 你的工作会入侵改变你的思维方式，这一点我非常相信。对于编程来说尤是如此，因为编程本质上就是一种解决问题的思维方式。当你慢慢地在编程在工作上获得成长时，你的思维方式必然也得到了成长。只要你想，每天都可以通过解决一个以前解决不了的小小技术问题来获得个人成长，这种强大的 incremental progress 像复利一样日积月累，最终会承载着你去往从未到达过的高度，看到从未想象过的风景。 你能为你的工作找到三个绝不容自己质疑的乐趣吗？如果能，那你的生活一定不会太糟糕。 " }, { "title": "写给小白的第一份命令行工具Bash教程", "url": "/sinantang.github.io/pr-7/posts/Bash-for-beginners/", "categories": "A Developer Guide for Newbies - Starting with Python", "tags": "Bash, vim", "date": "2018-01-27 00:00:00 +0100", "content": " 这是一枚属于拖稿很久的「面向小白的 Python 教程」系列的彩蛋。 . 作为一个编程小白，你是不是见过其他程序员电脑屏幕上这样花花绿绿的窗口以及一双在键盘上飞快跳跃自带重影的手？ 徘徊半天不好意思开口问对方窗口里的那些命令是什么，暗暗希望自己有一天也能把屏幕搞得如此神秘炫酷？ ——你需要一篇优秀程序员必备的命令行工具教程！ . 近看 Bash 关于命令行（command line）工具和终端（terminal）的概念，我们在「Python 教程」的开篇就简单介绍过了： 一开始对于 Terminal 这个东西理解困难的读者，可以把它想象成一个壳（shell），在这个壳里，你可以写命令（command），这些命令直接发给电脑，电脑收到特定命令会执行特定行为，比如打开、编辑、删除文档。 而 Terminal 只是承载了这个壳（命令行工具）的 APP 的名字。你还可以像我一样下载其他类似的 APP，比如很多程序员都爱用的 iTerm (https://www.iterm2.com)，功能更加强大。 当时我只说了这个可以写命令的 APP 的名字，为了不让小白产生混淆，没提主流命令行工具的本名 — Bash。Bash 的维基百科定义是， Bash is a Unix shell and command language written by Brian Fox […] as a free software replacement for the Bourne shell. — Wikipedia 实际上 Bash 这个名称就是 Bourne-again shell 的首字母缩略词，而 Bourne shell 从维基的定义中可以看出是 Bash 的前身，即另一个（有点过时的）命令行工具。 Bash 是 Unix (Linux + macOS) 操作系统（operating system）的默认命令行工具。也就是说，只要你手边的计算机是苹果电脑或 Linux 系统电脑，那打开 Terminal 后就自动进入了 Bash 的环境。 WIndows 10 用户现在有了从微软官方下载安装正经 Linux 双系统的选项！如果你短期内不打算换到 Unix 操作系统的电脑，又想提前感受更加敏捷流畅的开发体验，不妨试试这条途径。 我把相关官网链接放在文末了。 . 现在，可以点击 ⌘Space 用 Spotlight 呼出 Terminal / iTerm 了。 . Bash 入门 在 Terminal 窗口中，我们跟计算机直接交流的（编程）语言就是 Bash。 Bash 指令有点像 Python 函数（functions）。 一个 Bash 指令 = 关键词（keyword）[+ 一个空格 + 某个/些参数（parameter）]； 最后不要忘了点击 enter 键才能看到运行结果。 先来试一个非常简单直观的 Bash 指令： $ echo Hello World! （代码框内 $ 符号后面的才是 Bash 代码，下同） 你看到什么回应了吗？ ——这个名叫 echo 的指令是不是和我们熟悉的 Python print() 语句差不多？ Bash 有些指令或许看起来复杂，但实质上和这行 echo 语句的语法本质是差不多的。 . 相对路径与绝对路径 前文提到了操作系统（operating system）这个词，那操作系统到底指的是什么呢？ 某种程度上，我们可以把操作系统看作一台电脑里目录（directories，即文件夹 folders 的另一称呼）与文件（files）的组合。任何一个目录或文件都自带一个路径（path），表示其在操作系统中的地址——就像可以通过网址找到对应的网站一样。当你在使用 Bash 时，你总是在某个有特定路径的目录下；想知道目前所在的目录或路径可以输入这个 Bash 指令： $ pwd pwd 是 present working directory 的缩写；working directory 是指你（在 Terminal 里）目前所在的操作目录。比如，我现在的路径和操作目录就可以在下面输出结果中看到： $ pwd /Users/sinansmac （路径表示方式是不是和网址很像 :） 所有目录以“树（tree）”的结构呈现。“树”在计算机科学中是个重要概念，是一种数据结构，以后我们还会反复遇到。 为什么说电脑里所有目录构成“树”呢？看看下面的目录结构解剖图就懂了： 在这棵倒立的树的每个分支处都是一个目录，树根有一个唯一的根目录（root），从根目录可以延伸出无数子目录，每个子目录的路径都可以非常清晰地从这棵树上看到。比如，english 子目录的路径就是 /Users/carol/english ；/ 表示 root。 . 知道了路径表示目录或文件在操作系统中地址，就可以不点开 Finder/文件管理器 这类图形界面，在 Terminal 中直接访问目标文件夹或文件。 在 Unix 操作系统中有两种描述路径的方式：绝对路径（absolute path）与相对路径（relative path）。 绝对路径即为从根目录出发的的路径，比如前文的例子 /Users/carol/english 。 相对路径则是相对于目前所在目录位置的路径。举个例子，如果我目前在 carol 这个目录里，想去访问 english 子目录，那相对路径只需从 carol 出发，表示为 english 即可。 . Navigating in Bash 知道怎么写路径了，就可以用 cd 这个 Bash 指令关键词访问相应路径。比如， $ pwd /Users/carol $ cd english $ pwd /Users/carol/english $ cd / $ pwd / $ cd ~ $ pwd /Users/carol $ cd physics $ cd .. $ pwd /Users/carol cd 为 change directory (更换目录) 的缩写。 / 为 root directory 的表示方式，前文提到了。 ~ 为 home directory 的表示方式，这个半角波浪符号的英文名是 tilde。 .. 表示退回到上一级目录，所以这里又回到 carol 了。 . 频繁与 cd 交替使用的一个指令是 ls，可以列出当前目录下所有子目录与文档（这样你才知道能够 cd 到哪个目录去）： $ pwd /Users/carol $ ls physics english $ cd physics $ ls proj.txt foobar ls 为 list directories 缩写。 . 此外还可以创建一个新目录（即创建新文件夹），用 mkdir 关键词，加上新目录名字这个参数。如， $ pwd /Users/carol $ ls physics english $ mkdir programming $ ls physics english programming mkdir 为 make directory 的缩写。 创建了新目录后可以用 ls 查看是否创建成功。思维方式依然强烈依赖图形界面的同学，可以打开相对应的文件夹，你会看到一个新的文件夹静静地躺在那儿。 . 删除一个目录用 rmdir dir-name： $ pwd /Users/carol $ ls physics english programming $ rmdir programming $ ls physics english rmdir 是 remove directory 的缩写。 . 用 Bash 取代 Finder / 资源管理器 我现在已经记不太清如何在 Windows 电脑上新建文档或搜索文件夹内内容了，因为我有 Bash :p 下面让我来介绍下如何用 Bash 相关小工具更快更优雅地完成所有你在 Finder / 资源管理器内能够进行与无法进行的常用操作。 . 新建、删除文档 在合适的目录下输入： $ touch sinan-talk.txt 看一眼 Finder，或接着输入 ls 指令，是不是能看到一个名为“sinan-talk”的 txt 空白文档？用 touch 指令新建任意文档就是这么简单。 删除一个文档可以： $ rm sinan-talk.txt rm 即为 remove 缩写。 rm 还可以用来重命名文档，使用方法如下： $ rm old-name.txt new-name.txt rm 删除掉的文档或文件夹不会出现在垃圾桶中，小白请慎用。 . 预览文档内容 找一个内容的文档，在其目录下输入： $ less sinan-talk.md .md 是 Markdown 格式文档的扩展名。 此时你会看到 Terminal 窗口变成了 sinan-talk.md 这个文档内容的预览窗口。这个功能是 less 实现的。 退出预览点击 q 。 除了文字文档外，还有很多文件类型都能直接在 Terminal 预览，比如音频文件（但需要多走一步安装其他类似 less 的小工具）。 . 查看文档内容，合并文档 查看文档内容除了用 less 指令外，还常用到 cat。cat 不会跳到预览界面，而会把文档内容直接返回。比如， $ cat sinan-talk.md ### 玩转命令行工具 Bash — 马上让你看起来像个资深程序员！ ... 除此之外，cat 还可以用来做简单拼接文档的工作。比如， $ cat f1.txt Programming is the most fun $ cat f2.txt when you can have your clothes on. $ cat f1.txt f2.txt &gt; newfile.txt $ cat newfile.txt Programming is the most fun when you can have your clothes on. cat 本身是 concatenate（串联）的缩写，即“首尾相连接在一起”。 这里涉及到 &gt; 这个符号。虽然是半角大于号，但在 Bash 脚本中常可以把 &gt; 看作用于指向的箭头。cat f1.txt f2.txt &gt; newfile.txt 里 &gt; 很形象地指向了一个保存拼接内容的文档名称。 这里的 newfile.txt 既可以是先前不存在的文档（电脑会即时创建这个新文档）；也可以是已经存在的文档（但此步操作会覆盖掉文档中原有内容）。 . 查看文档大小、长度、字数 这个需求也非常常见。用 wc 这个小工具即可快速查看各种大小参数。 wc 是 wordcount 缩写。 wc [-options] [file] 这个指令可以配不同的选项（options, 也称 flags）。通过明确不同的选项，可以分别查看文档的字数、行数、字节数。具体如下： -c 字节数 -l 行数 -w 字数 例如： $ wc -l blog-post-80.txt \t366 blog-post-80.txt $ wc -w blog-post-80.txt \t1772 blog-post-80.txt $ wc -c blog-post-80.txt \t18857 blog-post-80.txt . 不想浏览长文档的全部内容 在程序员的日常中常常需要处理很大的文档（成千上万行内容或更多），这种时候没有正常人会直接打开这个文档（因为太慢，或有些编辑器不支持，或太占用电脑的 working memory），也不便于在命令行直接浏览。此时有个只浏览前 N 行的小指令就非常方便了。 这种情况下我们可以使用 head 指令。 $ wc -l long-file.txt 234124 $ head -10 long-file.txt Programming today is a race between software engineers striving to build bigger and better idiot-proof programs, and the universe trying to build bigger and better idiots. So far, the universe is winning. ... head 紧跟的数字选项是你想查看的前 N 行内容。前 10 行即为 head -10. 配上上面刚学到的 &gt; ，head 还可以非常方便地选中文档前 N 行内容并单独保存到另一个新文档中。 $ head -10 long-file.txt &gt; short-file.txt 这样就不用在文档之间跳来跳去地反复“复制粘贴”啦。 . 用文本编辑器打开文档 这个指令就很简单啦！如果我想用 Atom 或 SublimeText 这两个主流文本编辑器打开一个文档以便进一步编辑，可以这样： $ atom sinan-talk.md $ subl sinan-talk.md 此时会跳出相应的应用界面。 如果想一次性打开此目录下所有文档，可以用 . 表示： $ atom . （以上操作的前提是你已经下载安装了 Atom 或 SublimeText，否则请看第一篇） . 其他可以一秒上手的 Bash 小技巧 Tab Complete 各种指令、目录名、文档名手动敲来敲去会让人很快失去耐心。当你写 Bash 指令写到一半时，可以单击 Tab 键，Terminal 会尝试自动补全你的指令。 比如，你输入 ec， 再点击 Tab，会被补全为 echo。 Tab 还可以用来补全目录名称与文档名称，但前提是你已经输入了一半的名称在当前目录下无歧义，否则 Terminal 没法帮你精准地偷懒。 快捷键跳到语句首末 Terminal 内不能用鼠标改变光标位置，因此改变光标输入位置对于新手来说会是件可能会把人逼疯的事。但你只要记住以下四个快捷键组合就可以相对迅速地在指令中跳来跳去修改内容。 esc + b - 跳到前一个词 esc + f - 跳到后一个词 ctrl + a - 跳到开头 ctrl + e - 跳到末尾 还有更多“高级”指令可以做到更多，比如交换光标前两个单词的位置等等。在这儿就先不详述了。 重复输入旧指令 单击键盘上的 🔼 键。可多次点击回溯旧指令。 在 Python console 中也适用。 查看 Bash 指令历史记录 $ history . 让 vim 承包文档编辑任务 早在 Python 第一节，我就已经简单介绍过“工程师的文本编辑器 (text editor)”了，但当时我们着重介绍的 Atom 和 SublimeText 依然存在图形界面。今天我们要学着使用一款丢掉外壳，直接从 Terminal 进入文本编辑模式的编辑神器——vim。 vim 功能十分强大，如果你能熟练运用，这绝对是大大提高你工作效率（和炫酷程度）的程序员工具。但 vim 和 Bash 本身一样，对从没接触过的人来说，理解起来需要一定时间，学习曲线一开始会有点陡峭。这也是为什么当你在谷歌上搜索“vim tutorial”时会瞬间跳出无数结果…… 想知道如何用 vim，可以直接在 Terminal 内输入： $ vimtutor 这是个完整的 vim 教程，带详细说明和练习，有空可以慢慢敲完。 如果你更习惯更加直观的练习教程，可以试试这个网站（https://www.openvim.com）。 我是那种走一遍教程也记不全的人，所以喜欢下载、手写一些 cheatsheets 帮助记忆。你也可以试试。 （苹果电脑一般自带 vim，Linux 可能要自装） . 小结 认真跟下来这篇 Bash 教程的小伙伴想必会忍不住赞美一下这个强大又炫酷的开发工具了吧。 总结一下各类程序员开发工具的精神就是：偷懒，炫酷，偷更多懒。 Bash 一开始学习曲线会相对陡峭，但说到底还是能否下决定搞熟练的问题。练习直到形成肌肉记忆，是条踏实的捷径。毕竟，长远看来 Bash 会为你的开发生涯节约无穷无尽的时间，让你把那些时间留下给思考更重要的问题。 Work smarter, not harder! . 资源区: Win10 安装 Linux 双系统，官网指引： https://docs.microsoft.com/en-us/windows/wsl/install-win10 友好的 vim 教程：https://www.openvim.com 万能的 Bash (shell) 指令查询网站：https://explainshell.com " }, { "title": "海外求职攻略开课啦", "url": "/sinantang.github.io/pr-7/posts/pilot/", "categories": "Career as an NLP Engineer", "tags": "career, newbie, job hunting", "date": "2018-01-22 00:00:00 +0100", "content": "趁着对自己求职期的记忆依然新鲜，想趁热把这个找工作攻略系列写完，供更多正在找工作的年轻人们参考。 上一篇《从英语翻译到人工智能：我如何用两年时间跨界转行》算作「求职攻略课」系列文章的开篇吧，接下来打算谈谈如何打磨简历，怎样斩获各种面试，如何与公司进行薪水谈判，怎样快速写出得体又令人印象深刻的英文邮件。 这个攻略系列谈的求职大背景是在欧美发达国家（因为套路相对固定可循），主要工作语言为英文，求职对象是非体制内的商业公司。不过大道总是相通，相信善于观察的读者都能从文中找到对你有用的信息。 . 这篇作为「求职攻略课」的暖身小活动，让我们先来复习一下： 顺利求职的决胜点是什么？ 得到一份工作 offer 的「元」方法是什么？ 答案分别是心态与匹配（match）。 如果对这两个答案毫无头绪，可以戳这里回顾旧文。 . 心态上一篇已经说得非常细致了。 关于「match」，你是否真的理解了其中精髓呢？ 插播一个小练习，来测试一下你是否掌握了以上提到的求职「元」方法： 美国前总统奥巴马 2017 年退任后，想找份新工作，他在一家私立小学门口看到一则招聘校园保安的启事，有点心动。 你能帮奥巴马拿下这份工作吗？请列出三点奥巴马可以在求职简历和面试中强调的个人优势。 . . . 思考 60 秒 . . . 时间到。 如果是我的话，我会以下面三个论点帮奥巴马争取到这份工作： 1 我生活规律身强体壮，多年来每天早起在专业教练指导下锻炼身体近一小时，包括心肺与力量训练，这让我有足够的体力胜任校园保安的工作； 2 我定期接受正规的安全训练，多年来与顶级安保人员一同工作，具有在极端情况下冷静快速反应的丰富经验，相信这对于需要有能力应对紧急安全情况的保安工作是极大优势； 3 我和妻子共同养育了两个可爱的女儿，尽管以前工作繁忙，但我仍尽量每天抽空陪女儿们读书玩耍。作为一名爱孩子的负责父亲，我必然会全力保护校园里的孩子们。 . 你的论点是什么呢？ 如果你打算提到“曾任两届美国总统”或“哈佛法学院毕业”，那就说明你并不清楚「match」到底是什么意思。 专业的 HR 不会考虑 overqualified（资历过高）的求职者，更不会因为一个与职位要求毫不相关的经历而对求职者加分——那只说明了求职者不理解这份工作的职责是什么。 还有，我在上面列出的三项优势中涉及的事实部分全部属实。这就引出了另一个不要在求职中犯的错误：撒谎。话术绝非说谎，说谎不是话术；你可以选择性表达一部分事实，也可以换个角度灵活叙述一件事，但最好不要说谎，除非你特别擅长长期面不改色心不跳地说谎再不断圆谎。 . 现在，来尝试一项求职思维实验。 找出一份心仪已久职位的招聘启事（Job Description, 之后简称 JD），仔细读过之后为自己列出至少三条强有力的求职优势。每一个论点都必须伴有真实论据。 想得差不多了后，接着考虑该如何根据自己的求职优势和职位要求来修改个人简历和求职信（cover letter）。 如果你是马上要面临毕业找工作的学生，强烈建议你把对应的简历和求职信写下来作为今后的对照参考。 （这是我在德国大学上的一门 job haunting 选修课的老师曾留过的一项作业。） . 接下来我会陆续更新「求职攻略课」的简历、面试、邮件、沟通章节，敬请期待。 虽然找工作不是特别令人愉快，但不得不承认这是个既考验人的心态又检验个人思考能力的过程。所以，我打算在之后文章中多加入像这篇一样的思考小练习。 . 记住，你的主动思考永远比任何人的被动输送要重要得多。 " }, { "title": "从英语翻译到人工智能：我如何用两年时间跨界转行", "url": "/sinantang.github.io/pr-7/posts/translation-to-ai/", "categories": "Career as an NLP Engineer, Natural Language Processing", "tags": "career, newbie, NLP", "date": "2018-01-16 23:01:01 +0100", "content": "刚刚发了一条微博，纪念自己从决定转行到现在刚刚好两周年： 在这两年里，我经历了以下大大小小的里程碑： 2016 年初：在德国刚开始读英语语言学硕士没多久，萌生了转方向到计算机语言学（Computational Linguistics，后来我才知道那与自然语言处理 Natual Language Processing 领域基本重合）的想法。 2016 年春夏：开始在 Coursera 上从零自学编程，主要是 Python。 2016 年夏末：找到第一份计算机语言学领域的实习，在德国一研究院做 Research Assistant。 2016 年冬：利用第一份实习找到第二份德国 IBM 人工智能小组（Watson Analytics）的实习机会。 2017 年春夏：IBM 全职实习 5 个月，那时才知道计算机语言学与人工智能息息相关。 2017 年秋：密集地在家自学了几个月计算机科学的科目，包括算法入门、数据分析、概率论、程序设计，同时继续提高编程能力；开始投简历练面试找工作。 2017 年冬：找到人生第一份正式工作，全球 500 强科技企业，人工智能行业，薪资超过德国 CS 硕士平均起薪。 2018 年初：开始工作，来到硅谷参加入职培训。 这样列出来看起来似乎既光鲜又井井有条，但大概只有我才知道自己经历过多少不安、焦虑、抓狂和混乱。 这也是我从去年起就一直积极写文科生转行学编程找实习系列文章的初心：我懂得这条路的艰辛不易，也摸索出了一点微薄的经验与方法，更知道达成每个小目标的欣喜，因此希望能以自己的真实经历启发、帮助到更多处境类似的读者。 让我尤有成就感的是，我已经收到过几位读者的私下赞赏和留言，说 TA 在我经历的鼓舞下也勇敢地踏出了转专业 / 转行的第一步。 . 如果你也怀有转行到 IT 行业技术工程岗的想法，或想多了解在德国（欧洲）找工作的技巧，或只单纯想参考我的转行与自学编程经历，都能从这篇文章中找到你需要的内容！你也可以关注我的公众号，我会常常分享原创的工作与技术文章。 . 本文会写到以下小话题： 为什么转行？ 转到哪儿去？ 如何转行？ 怎么跨行找工作？ . 为什么转行？转到哪儿去？ 我认为在做任何重要决定之前，比起搞清楚该怎么做（HOW），追问自己为什么要做出这个选择要重要得多（WHY）。 方向大于努力。 大多数人终究也不懂这个道理，于是终日一边忙碌一边迷茫。 当面对职业规划的重要决策时，你做决定的依据是什么？（+选择旧文链接） 钱更多？更喜欢？更擅长？ 任何一条理由都没问题，但为了增加你转行的成功率和优化新工作的发展前景，应该尽量寻找这三条职场优势的公共交集。 一开始，谁也不能一击命中既钱多又喜欢还擅长的工作，但这并不妨碍你先从已经同时具备了两个职场优势的选项出发，并把三大优势的交集作为自己职业规划的终极目标。 除此之外，每个人或许还有些个人限制条件，比如地理位置和语言水平。再比如，对于留学生或有移民需求的人来说，如果想留在国外工作，那就应该把解决签证作为最重要的职业先决目标。 . 如何利用以上理论来分析自己适不适合转行、该转到哪儿去呢？我就拿自己来举例分析分析—— 首先，我决定暂时留在德国或其他欧洲国家工作，这就存在语言问题。两年前刚到德国时我完全不会德语，一两年时间业余学德语也达不到可以用来流利工作的程度，因此我最好能找到可以英语工作的公司。 另一方面，钱对于我也很重要。由于过去两三年都是自己负担生活费，常常连买学期火车票都要心疼一下，所以很迫切地需要 financial stability。 能赚一点钱、可以讲英语还机会多的职业选择，在德国基本仅限于 IT 技术行业了。 作为文科生，对于 IT 肯定不具备“擅长”这个职业优势。但我有别的长处，我不讨厌理科和代码，有点喜欢和数据打交道；后来自学编程渐入佳境后，也喜欢上了用程序解决问题的思维方式。 综上，对我来说，转行到 IT 行业就是我目前的职业规划最优解，接下来只要方向明确地补齐技能树就应该能够转轨到理想行业了。我找到 CS 与语言学的交叉学科“计算机语言学（Computational Linguistics）”，在翻了很多维基百科、Quora 和知乎帖子后，决定先从自学 Python 开始。 当然，这过程绝非顺风顺水。后来在对自然语言处理（NLP）有了更实际的认知后，我才意识到在这个领域，计算机科学素养比语言学知识储备更重要。但从本质上来说，这只是难度与积累时长的问题，而非选错了努力方向。因此现在回望，我两年前的决策依然是有效、明智的。 . 如何转行？ 培训学校铺天盖地的“三个月从零到精通 Python，成为大数据工程师”速成广告，朋友圈和知乎最流行刷的也是“三个月转行数据分析”、“五个月成为前端工程师”。此时我写下这样一行“我用两年时间跨界转行”确显得非常不合群不鸡汤了。 但我真心认为，用两年时间跨度真正从零掌握一门能够赚钱养家的专业技能，绝不算漫长。 注意这里的重要定语：能够赚钱养家。 技能分很多种，并非所有都能在两年学习积累后成功变现。那些非常依赖天赋，跟年龄关系很大，特别需要运气或社会资源的行业，外行人进入的困难更大。 这里的两年指的是保留原本工作或学生身份的两年，比如我在自学编程做实习找工作的两年间也同时在正常地上课考试写论文。 我并不鼓励脱产全职学习某项技能长达两年，因为大部分人并不能承受那种心理压力。而大跨度转行（比如纯文科转纯理工）积累阶段的最大障碍其实来自心魔。 “我会不会一开始就选错了？”、“别人看起来比我更有天赋，有更多资源优势，我真的能行吗？”……长期被恐惧和焦虑驱动的滋味可不好受；这不仅让人难过，还会让人脑处于“资源稀缺”的思维状态（参考《稀缺》&amp;《贫穷的本质》），容易做出只顾及眼前好处却牺牲长远利益的短视决定。比如年轻时为了赚小钱省小钱而花费宝贵时间与注意力，这类短视决定大多数人都做过，包括我。 所以对于一开始还没在新行业建立起自信的人来说，保留主业所带来的安全感（safety net）是保证我们大脑尽可能作出符合人生长远利益决策的前提。 但是，长达两年的下班后转行积累方案始终存在一个致命问题：大多数人都走不到能看见光明的节点，在中途的某个困难上就跌倒在舒适区（comfort zone）的蜜糖罐儿里起不来了——任何需要长期执行的方案都存在这个问题。 那该如何解决呢？唯有有效计划。 先入门再积极寻找实践机会。 想进入一个新领域，在互联网资源极度丰富的今天，入门其实不难。 很多人想要转行当程序员工程师，而现在网上自学编程的课程非常多，找个权威口碑好的课程（比如 MIT600）配一本权威经典的入门书（比如我推荐多次的《Think Python 2》），认认真真在半年之内学完读完做完习题这就算入门了。 理论知识上入门之后，就需要寻找可以练手实践的机会，比如实习比如个人项目，这些实践机会最好既能让你获得成长又可以留下方便展示的作品。 初学者对新领域的理解不论是广度还是深度上都必然存在误区与盲区，这些误区盲区很可能不能仅靠小白独自一人摸索来破除。与我以前在《文科女进德国 IBM 实习做程序媛，我是怎么办到的》写到的道理一致，你必须在与现实世界的交流反馈中才能快速成长通关，想太多做太少的要么成了哲学家要么得了焦虑症。 在实践过程中反思并调整计划，有意为自己寻找职业发展路上的 mentor（同行业的前辈、校友、教授等），在学习和实践中一点点增长技能点。 按这样的路径，两年时间足以让一个普通年轻人转换职场赛道。并且，在产业发展还未完全成熟的国家地区，比如国内，这个转行过程肯定会更快。 . 怎么跨行找工作？ 不论是否跨行，找实习找工作的过程中，最重要的决胜点在于心态。 . 尤其对于正在找人生第一份正式工作的学生来说，校园到职场的转变期对于任何人来说都是不小的挑战。 我也经历过很久这个“知道该怎么做却毫无动力去执行 - 不行动带来的焦虑越积越多 - 焦虑状态下要么动弹不得要么做啥错啥 - 最终崩溃大哭”的消极循环，所以我很理解排斥走出象牙塔，拖延开始找工作的学生心态。 我收到工作 offer 后的第一反应是“终于不用找工作了”，因为那实在是不令人愉快的体验。我到现在也不喜欢找工作这类需要等待别人审判再贴个标签的事，你也没必要喜欢啊，但这不影响我们参与 Job Hunting 游戏。 确实可以把这看作培养职业素养的第一步：把个人感情与工作任务分开。 没多少人喜欢找工作这件事，你又怎知面对你的 HR 和面试官不讨厌他们自己的工作，但这不妨碍每个人扮演好自己的职场角色，做好成人世界的游戏。 毕竟，对立心态在职场对自己毫无好处。 . 解决了心态问题，接下来为找到工作行动起来就是自然而然的事了。 这里限于篇幅就不赘述找工作细节了，具体求职攻略我会以后单独更新。但有一点关键「元」方法我一定要写一写。 找工作是一件比找对象还讲究「合适」的事。每当看到一份招聘启事（JD）时，脑子里应该立刻放大并高频闪烁「match（匹配）」一词。 HR 并不关心你的人生经历或你的履历是否高大上，TA 只关心你是不是这个职位的「match」，你是否在简历和面试中清楚有力地表达了自己具备这个职位所需的技能或拥有学习这项技能的潜能，并给出了具体经历来证明你说的论点。这一点无比重要，不论什么水准的求职者都可能犯这个错误，即把求职的焦点从「match」上移开。 对于跨界转行的求职者来说，这一点只会更重要。 . 关于简历和面试，我想说的还有很多很多，准备接下来专门针对这个话题写篇求职攻略文，欢迎关注 :) . 尾声 通过自己的力量转行成功这件事对我来说有什么意义呢？我认真想过这个问题。 除了更好的职业出路外，最大的意义或许是这个世界对我个体的认可吧。 在两年前决定转行的那一刻起，我便患上了「冒充者综合症 (Imposter Syndrome)」。不论参加实习还是在网上写技术文，我总觉得自己在假装一个更有天赋、更有能力、更优游自如的人，而别人随时都会戳穿这层面具。实际上，直到长途飞机落地美国我走过了美国海关的一刻，我都在怀疑这一切的真实性，还认真担心过自己签证出意外最终被海关检查员以奇怪的理由遣送的场景。所以当我终于在硅谷住下，在入职的第一天拿到属于自己的 badge 时，我突然如梦方醒，“哇，这一切竟然都是真的！！” 用两年时间自我积累转行成功，让我觉察到我真的拥有改变自己人生轨迹的力量，也让我有依据地相信一个人有只要愿意学习就能获得成长的巨大潜能。而这一切都让我进一步笃信继续写文章的意义，也许其中有一篇就改变了宇宙中另外一个人的人生轨迹了呢。 . 这篇阶段性转行攻略文洋洋洒洒四千字，希望有你觉得有用的内容！ 关于跨界转行，关于自学编程，关于德国求职面试，如果你有什么想分享的，可以在文末留言噢！欢迎转发分享 :D 这是我持续写原创文章的动力之一。 " }, { "title": "我的年度书单及更多 | 2017文化产品消化清单", "url": "/sinantang.github.io/pr-7/posts/cultural-products-2017/", "categories": "Book Review", "tags": "books, reading, learning, Podcasts", "date": "2017-12-31 00:00:00 +0100", "content": "2017 正以可怕的速度从指尖滑落（按欧洲时区!!），为了安慰自己没有虚度这 365 天，每年末的年度总结是少不了的。 这回年度总结打算以今年消化完的文化产品（主要是书）为指针，梳理一下 2017 年的成长路径。 为什么说是“消化”而不是“消费”呢？因为对于书籍影像博客等文化产品来说，单纯花钱消费绝不代表你就拥有了它们，只有花费时间精力消化反思之后，你才能试着说，自己体验过这本书或那部电影。 本文就简单梳理一下我今年读完的书、喜欢的影视、访问量最高的博客播客，以及目前已划入明年心愿书单的书！ . 年度书单与短评： 为防止不同译本、版本间差异引起混淆，用中文书名表示我读的是中文版，英文亦然； 这里列出的书我均读过完整版，各种缩略版、快读版不计于此； 已经在公众号写过读后感或相关文章的，会在书名处加上文章链接，请热烈点击。 虚构类： ​ 《巨人的陨落》★★★★☆ “旁观历史是让人抽离现实小纠结小得失的最好方式” 非虚构类： ❍ 技术 / 学术： ​ 《Think Python 2》★★★★★ “不起码看完这本经典书做完所有课后习题的话，可以说是没学过 Python了” . ​ 《Python Programming (Wikibooks)》★★★ “参考书总要多备几本。不过这本书的内容有些散乱、重复” . ​ 《The Self-taught Programmer》by Cory Althoff ★★★★☆ “本科学政治却大跨学科自学编程成为软件工程师的作者，是这本书最好的广告” . 「Little Bee Books (series)」by IBM ★★★★ “一系列以十几页浅显叙述配走心插图的数据科学领域概念扫盲书——如果你好奇机器学习、大数据、区块链这些热词都是什么，可以在网上找到 IBM 出品的这系列免费电子书过过瘾” . ​ 《Speech and Language Processing: An Introduction to Natural Language Processing, Computational Linguistics, and Speech Recognition (ed. 2)》by Daniel Jurafsky and James H. Martin★★★★☆ “每个在 NLP 领域——尤其是对话系统分支——混的人，都不好意思说自己没看过这本斯坦福大学的经典教材” . 《数学之美》by 吴军 ★★★★ “浅尝自然语言处理的入门读物” . 《黑客与画家》by Paul Graham ★★★★☆ “不看这本书，很可能听不懂程序员社区与硅谷创业公司的暗语” . 《NLTK Natural Langauge Processing with Python》★★☆ “单纯的工具书；建议想熟悉 NLTK 库的同行直接从其官网 tutorial 开始看” . 《Human Cognitive Processing: Corpus Methods for Semantics》★★★★ “纯学术参考书！清晰简明好引用” . ❍ 社科与其他： ​ 《Sapiens: A Brief History of Humankind》★★★★☆ “在读 前，你很可能并不了解人与人类社会的基本运行原理” . ​ 《The 4-hour Work Week》by Tim Ferriss ★★★★★ “想要依靠每周几小时工作来提供稳定现金流，从而可以无压力地自由尝试自己想做的事？早有人做到了，而且热心地把方法论写下来了” . ​ 《富爸爸，穷爸爸》 ★★★★★ “所有看书名以为是可耻鸡汤而放下这本书的人，你真的错过一个改造自己财富观的机会” . ​ 《Beyond Feelings》★★★★★ “不落于浅薄与从众——独立思考的方法论” “一本永远推荐的五星思考工具书” . ​ 《暗时间》by 刘未鹏 ★★★☆ “本书大多数文章对我来说并无新意，但由此发现了未鹏君的博客遗珠（http://mindhacks.cn），十分爱读” . ​ 《Fooled by Randomness: The Hidden Role of Chance in Life and in the Markets》★★★★★ “世间人分两大类，一类懂概率统计，一类不懂” . ​ 《Poor Charlie’s Almanack》by Charlie Munger ★★★ “听闻此书盛名已久，但读来并无太多深刻感悟，或许是我太年轻——记在小纸条上 3 年后再重读” . ​ 《通往财富自由之路》★★★★☆ “最推荐的《得到》专栏，改变你在生活、学习、投资中的底层逻辑” . 《万万没想到》by 万维钢 ★★ “对我来说大部分文章无新意，平时社科类书涉猎少的读者或许会喜欢” . ​ 《拆掉思维里的墙》★ “价值不大的鸡汤” . 累计播放时长最久的播客： ⁍「The Tim Ferriss Show」tim.blog/podcast ⁍「得意忘形」 ⁍「Freaknomics Radio」freakonomics.com ⁍「Blow Your Mind」 . 访问次数最多的博客： ⁍「Scott Young’s Personal Site」www.scotthyoung.com/blog ⁍「BetterExplained」by Kalid Azad betterexplained.com ⁍「编程随想」 ⁍「阳志平的网志」www.yangzhiping.com ⁍「SinanTalk」sinantang.github.io (每次在 git 推送完改动后都得打开网址查看下呈现效果，因此访问次数不低 : ) . 喜欢的影视作品： 电影《爆裂鼓手》 电影《第五元素》97 法国版 电影《海边的曼彻斯特》 吉卜力《红猪》 美剧《This Is Us》 美剧《老友记》第 7 - 10 季 日剧《Code Blue》第 3 季 日剧《被讨厌的勇气》 . 「影子练习SinanTalk」更新总结： 今年一共推送了 62 篇文章，平均每周一篇多一点儿，多了很多新读者订阅，勉强满意！明年已经排了不少好玩的计划，「Python 教程」系列会尽早更新（!），新播客也即将在新年更新，希望能给读者带来不一样的扎实技术文与看待事情的独特角度。同时也希望喜欢「影子练习」的读者多多转发支持啦，谢谢 😘 . 2018 阅读心愿单 (边读边加) 《From Zero To One》by Blake Masters &amp; Peter Thiel 《Tools of Titans》by Tim Ferriss 《世界的凛冬》 《永恒的边缘》 《人月神话》 《Mean Genes》 《Surely You’re Joking, Mr. Feynman!》by Richard Feynman 《Design Patterns: Elements of Reusable Object-Oriented Software》 . 说到读书，去年曾推过一篇 2016 夏秋书单，可以点击这里查看。(不好意思这篇文章已经找不到了——来自2020年的作者注) . 你 2017 年读了什么好书、看了什么好电影呢？或者新一年计划读什么书？欢迎转发留言推荐好书！ " }, { "title": "从 JavaScript 事件监听与网络安全到知识变现的真谛", "url": "/sinantang.github.io/pr-7/posts/event-listening-internet-security/", "categories": "How to learn better", "tags": "jQuery, JavaScript, Internet Security, Podcasts", "date": "2017-12-23 23:31:06 +0100", "content": " 第一次尝试轻技术播客 我一直想要尝试以播客形式来更新内容，几周前我和勺子同学终于录了一期以“事件监听与网络安全”为主题的轻技术播客。但是，试图剪辑我们的首次录音过程中，我发现这期播客处女秀的录音设备与网络条件过于“裸奔”，我的声音因为不够放松也超常地低沉，以致可剪辑性接近于零……于是我本着学习剪辑技术的精神，硬剪出了现在这几分钟的节目，请读者包涵初次尝试的渣音质与语无伦次，一起期待以后会更好吧！ . 但是！这期播客并没有白费功夫。在与勺子对话的过程中，我顺便反思了「学习的意义」这件事。准备在这儿也插播写一写，免得这篇文章看起来太不靠谱。 . 你为什么需要看这篇文章 起初想与别人分享这期播客涉及的内容，是在我第一次学习 jQuery（一个 JavaScript 框架，即库） 相关知识的时候。 当我还只是个普通上网用户时，虽然知道自己在网上的浏览痕迹乃至一举一动都可能被大公司当作用户数据监视、存储，但对于其中的技术细节一无所知。就这么怀着对互联网公司采集用户数据手段的好奇和疑虑，直到自己学了点前端开发的皮毛，才终于窥见了一点神奇的真相。不过我觉得更神奇的地方在于，见识了这种在外行人想象中很神秘抽象的技术问题后才发现事实竟可以如此简约——很多我们原以为很复杂困难的问题真的揭开面纱后会发现完全不是想象得那样。 所以我强烈建议你也上手试试这节中会涉及的一点操作知识，不需要任何背景知识，跟着一步步来，确实不复杂，但体验之后或许会让你重新思考网络安全与用户体验的关系。再进一步地，我还会写写学习知识的不同境界。 另外，音频与文字内容大部分不重合，只看文字也能完全自洽! 真爱读者可以考虑点开音频经受“折磨”。 . 工程师是怎样监视你网页浏览活动的 用专业术语来讲，工程师关注我们上网活动的技术手段被称为“事件监听（Event Listening）”。这里的“事件 (Events) ”指的是用户在网页、浏览器上进行的一切操作，比如关闭网页是事件，在网页内搜索框内输入内容是事件，调整浏览器窗口大小是事件，网页内的任意点击也可以是事件。 JavaScript 作为前端后端开发中占有率都很优秀的主流编程语言，自然具备进行事件监听的功能。下面我们就来看一下如何仅用一个浏览器进行事件监听模拟。 . 1 打开谷歌浏览器（火狐 (Firefox) 浏览器也可以），进入这个可供实验的简单网站： http://udacity.github.io/intro-to-jquery/ 在网页内击 ⌥⌘J 组合键（火狐是 ⌥⌘K），此时会跳出一个窗口，这就是 JavaScript 的开发环境。 比起其他大部分编程语言在开始写之前先要设置一大堆开发环境，JavaScript 对待初学者算是无比友好的了——只要有个浏览器就可以马上敲起代码啦。 . 2 Console（控制台）一打开可能会有很多红色报错信息，不必在意。 接下来在 JavaScript 的 Console 里输入下面指令： &gt; monitorEvents(window, \"resize\"); (指令不包括开头的箭头符号) 接着，随意拖动改变下浏览器窗口的大小，观察 Console 内是否有变化。 若无意外，此时 Console 内会跳出大量反馈信息——因为我们输入的指令就是在监视窗口的大小改变么。细看一下反馈信息，确实都是以 resize ▶︎Event {isTrusted: true, type: \"resize\", target: Window, ... 为开头的信息；凭借这些详细数据，工程师就足以判断用户端进行了什么相关操作。 想要取消监听以上事件，只需在 Console 中输入： &gt; unmonitorEvents(window, \"resize\"); 就是这么简单！ 虽然以上只是个最简单的示例，但基本原理你已略知一二了。 . 3 除了改变浏览器窗口大小外，我们还可以捕捉页面搜索框内的键盘事件。 新开一个空白网页，打开一个有搜索框的网页，比如 谷歌主页，或者 亚马逊主页，或者其他任何带了搜索框的网页。这里就以谷歌主页作为示例。 右键点击搜索框，选中最后一个 inspect 选项。 此时会跳出你刚刚已经见过的开发者工具窗口。从上方标签页中选中 Console（控制台），现在又回到了 JavaScript 的开发环境。在 &gt; 后输入， &gt; monitorEvents($0, \"key\"); (指令不包括开头的箭头符号) 此时在网页搜索框内随便打些内容，再一一删除。你会看到 Console 随着你的键盘动作疯狂地跳出很多反馈信息。 仔细看一下反馈信息，你会发现键盘的任何动作都会被记录下来：输入的字母、空格、删除、功能键等等。从这些记录中，不难拼凑出你在搜索框内输入了什么内容，即便你还没开始正式搜索。 想要关掉以上监听，在 Console 内输入， &gt; unmonitorEvents($0, \"key\"); . 4 除此之上，还可以监听很多其他事件。比如鼠标动作（具体到页面内的坐标）和页面控制。具体能捕捉到的事件详情可参照下表： Event type Corresponding mapped events mouse “mousedown”, “mouseup”, “click”, “dblclick”, “mousemove”, “mouseover”, “mouseout”, “mousewheel” key “keydown”, “keyup”, “keypress”, “textInput” touch “touchstart”, “touchmove”, “touchend”, “touchcancel” control “resize”, “scroll”, “zoom”, “focus”, “blur”, “select”, “change”, “submit”, “reset” . 普通人还有网络安全可言吗 哇！既然如此多的网上活动细节都可以被互联网公司捕捉利用，那普通人民群众还有网络隐私和安全可言吗？ 我和勺子以前就热烈讨论过这个问题。从技术角度来看，这自然是个“教学相长”的过程——更厉害的锁同时也在培养更厉害的锁匠。同样地，在隐匿个人网络踪迹领域，可以通过社会工程学（Social Engineering，相当于网络安全领域的“反间谍”学）、多重代理 + 虚拟机、谨慎安装个人软件、加密或擦除隐私文件等方式来捍卫个人网络安全。但是，普通用户有多大动力和精力学习陌生技术领域的繁杂知识呢？这还没有提网络安全是个需要跟随时代步伐、定期升级知识储备和解决方案的学科呢。 所以，在这次讨论的最后，我和勺子达成了消极共识：普通用户在大公司面前几近砧板上的肉，嗯。 . 知识变现的真谛 我在这期播客开头，刚跟勺子宣布这期“事件监听”主题后，勺子第一反应不是我期待中的「哇这个技术是怎么实现的？」，而是： 「那我怎样才能阻止自己被监听呢？」 我愣了一下，然后不得不承认，我没想过这个问题，所以我也不知道是否真的有可能“反”监听。 接着，这个问题又提醒了我，我与勺子对学习知识的不同境界。 我大多情况下都会满足于见识到一样新东西时的「哇！」； 但勺子会紧接着问一句，「那这可以怎么用？」 . 但实际上第二种境界才更有意义。 知识本身不代表价值，能把知识用起来才算有价值。这也解答了「为什么高学历不一定能赚更多」这个经典问题。 你懂很多知识，所以呢？那些知识都能应用到你自己的生活中了吗？能用此来满足别人的需求吗？如果你不能为别人提供价值的话，必然也赚不到太多钱。尤其在现在“知识变现”可操作性大大提高的大趋势下，每一个想要利用知识站着赚钱的人都必然需要思考这些问题。 我在写博文的过程中也多次体验过这个真理。常常我提笔写某个话题的冲动来自于面对新知识的一声「哇」，但写着写着，我会反复发现，若只写某个知识或某本书带给我的感受，文章会显得非常矫情无力。我必须再深入挖一挖——这条知识到底能给读者提供什么价值，读者可以怎么用这篇文章呢——这样思考完才觉得文章不算白写。 " }, { "title": "读《巨人的陨落》：世界大战是如何打起来的？", "url": "/sinantang.github.io/pr-7/posts/giants/", "categories": "Book Review", "tags": "", "date": "2017-12-16 23:31:06 +0100", "content": " 在第一次世界大战的硝烟中，每一个迈向死亡的生命都在热烈地生长。 最近读完了历史小说《巨人的陨落》一套三册。《巨人的陨落》是英国爱伦•坡奖终身大师奖得主作家肯・福莱特的“世纪三部曲”第一部，以5个家族的视角写了第一次世界大战发生前后宏大的世界图景。 今年我只看了一部小说，选了这一部实在太明智。 我下单这套书的主要动机是想了解更多关于两次世界大战的历史知识。虽然“世纪三部曲”是历史小说，存在大量虚构人物与情节，但同时也涵盖了很多真实历史人物，且肯・福莱特在定稿前都会请历史学家审校背景知识；这几册书全球畅销，但不怎么存在（至少我没注意到）来自评论家对其历史合理性的质疑。因此我倾向于相信小说绝大部分内容是合理的。 . 关于一战，国内中学历史课本上如是说： 1914年以萨拉热窝事件为导火索，奥匈帝国在德国的支持下向塞尔维亚宣战，拉开了第一次世界大战的序幕。 这场帝国主义非正义战争主要发生在同盟国（德意志帝国、奥匈帝国、奥斯曼帝国、保加利亚王国）与协约国（大英帝国、法兰西第三共和国、俄罗斯帝国、意大利王国、美国）之间。 一战是欧洲历史上破坏性最强的战争之一，造成了严重的经济损失，给人类带来了深重灾难。约有6500万人参战，1000多万人丧生，2000万人受伤。 在历史课老师口中，一战是一个有序幕有发展有高潮有结尾的刺激但残酷的故事；世界上好似真的存在一条时间线，历史就是按着高潮迭起的剧本在这条时间线上时不时盖下一个戳——这个事件是导火索，那个是转折点，这个是尾声——现在可以深情地总结几句事件意义了。 . 但历史真是这样的吗？ . 我认为，或许《巨人的陨落》里描述得才更接近真实客观的历史进程。 . 对于还未读过“世纪三部曲”的读者来说，可以这样理解：历史课本与《巨人的陨落》之间的差距就像是电视剧快进与你对自己日常生活感知的差距。 . 人与时空的复杂性 如果你只有一分钟来了解第一次世界大战，毫无疑问只能选择中学历史书的框架式格式化叙述；但其中脸谱化的历史人物形象，就像影子一样极度简化了真实人物的血肉细节。读罢只能像孩子一样给每个人贴上“好人”或“坏人”的二元标签——要么热忱洋溢地赞美，要么咬牙切齿地痛骂。 . 但一个真实的人以及 TA 存在过的那段时空却远比历史课本要复杂得多，我对这种复杂性深深着迷，也因此喜欢上了阅读试图还原一部分复杂性的“世纪三部曲”。 . 你可能从没想过…… 压榨矿工剩余价值的英国伯爵，在面临战争时必须身先士卒，第一批上前线指挥作战。 在只有儿子才能继承家产的”重男轻女“传统制度下，看似男性是传统的获益者，但实际上儿子同时也连带负担了家族所有女性、小孩儿与佣人的开支消费，使得妻子、妹妹与三姑六婆不必外出工作也能消费得起来自巴黎的昂贵华服。 骄横美貌的俄国公主嫁给英国贵族后，也深知自己有绝不能不履行的妻子义务——丈夫的同床要求与多生儿子的指标。 出身贵族的英国女勋爵会为女性投票权而热情奔走，会为怀孕的单亲妈妈提供免费医疗服务，但仍因为自身阶级的局限性，对改革怀有不切实际的天真目标。 俄国贵族因农民强占了自己的土地而私刑绞死几人示威；十几年后，在俄国革命的推动下，愤怒已久的农民闯入贵族私宅，枪决了主人，一把火烧了豪宅。 农民工人依靠诚实辛勤劳动最多只能图温饱，利用小聪明和偷蒙拐骗才可能积累些许财物。 道貌岸然的神父也会拉下贫穷人家小男孩的裤子。 …… . 在近距离观察一个人、一群人、一段时空之后，你真的很难满怀信心地四处贴上自己手中的标签。人生与人性的复杂让人不得不审慎，不得不收起自大。 . 所谓历史节点与人生节点并不重要 《巨人的陨落》同时还验证了我长时间以来的一个假设：所谓「变化节点」并不重要，不管是在历史长河中还是人生中。 . 每个人都读过主人公“一夜长大”、“瞬间洗心革面”的经典叙事套路（storytelling）。我小时候也以为人生有一个这样的「成长瞬间」——在这瞬间之前，我还是傻乎乎的小孩儿；在这之后，我就完全成人了，可以自如应付生活的所有考验了！但我左等右等，很多年过去，我依然没等到属于自己的「成长瞬间」。倒是隔一段时间会因为经历了某件事而确认了一点「好像比以前聪明一点了」的感觉。 成长是积累的过程，而不是瞬变的刹那。 . 再比如，我们习惯的以知识点的形式来学习历史。当谈到一战时，必会提到导火索萨拉热窝事件——1914年6月末，奥匈帝国王储斐迪南大公及夫人在塞尔维亚被民族主义青年射杀，奥匈帝国在德国的支持下向塞尔维亚宣战，拉开了第一次世界大战的序幕——听起来这就是历史长河中的瞩目节点啊！ 但是，如果没有萨拉热窝事件，一战就不会发生了吗？历史没有假设，但我们可以通过搜集史实、逻辑推理来进行推测。在萨拉热窝事件之前，德国就已在谋划施里芬计划长达十几年；普法战争中大败的法国一心想要找机会收复阿尔萨斯-洛林地区；因为在巴尔干半岛的利益冲突，俄国与奥匈帝国之间冲突渐深；普法战争后欧洲逐渐形成两个对立阵营，一旦有任何局部冲突都会牵一发而动全欧洲；等等等等……所有这些史实都往火药包里添了新料，只要时机合适，任何事件都可以成为导火索，引发一战。 战争开端是积累火药等待时机，而非依赖于单点突变的“节点”。 节点也许是个偶然事件，并不重要，在节点来临前的势能积累才重要。 . 以“开端 - 发展 - 高潮 - 结局”的叙事套路学习历史无疑非常简单清晰，但往往忽略了现实的错综复杂。当我们面对自己的人生时，该如何预测生活的“开端、发展、高潮、结局”呢？难道只有这几个节点才值得活吗？ " }, { "title": "Tim Ferriss 教你如何提问", "url": "/sinantang.github.io/pr-7/posts/Tim-Ferriss-on-questions/", "categories": "Reading Notes", "tags": "Podcasts, Tim Ferriss", "date": "2017-12-05 23:31:06 +0100", "content": "最近在听 Tim Ferriss 的播客「The Tim Ferriss Show」。这个 Tim Ferriss 就是写了超级畅销书《每周工作四小时》的作者。最近我刚开始看这本书，若有所触动的话也许后面会写读书笔记。 「The Tim Ferriss Show」获得过 2016 iTunes 最佳播客奖，播客录音拥有超过两百万下载量。 这同时也是我听过的广告最多最长，但仍不影响好感的播客节目……每期节目至少两三枚广告，但由于节目内容十分吸引人，广告也就不显得那么突兀。Tim Ferriss 节目有大量采访名人的访谈，有讲学习工作方法的，也有聊生活方式的。个人风格强烈，人与话题又十分有趣。 很是推荐英语听力尚可的读者订阅「The Tim Ferriss Show」，试着听几期。喜欢的话回来留言噢 :P . 在最新一期节目「The Answers to My Favorite Questions」中，Tim 一次性回答了一系列他最常提问嘉宾的问题，其中有一小块儿有关「如何提问」这个古老话题，我听后很受用，就整理并加上了自己的理解写在下文。 关于「如何提问」这个话题，我曾在旧文章中几次写过自己的理解，一再讨论这个问题是因为我觉得自己提问的水平还是没达到预期，而这件事又确实重要。Tim 从不同的角度讲了讲提好问题的“套路”，也许对你也会有启发。 . 提问有什么意义 Questions are critically important 因为所谓「思考」这件事，大部分时候就是“向自己提问再自己回答”的过程。提问的质量就决定了思考的质量。 再者，一个人想要获取的任何知识或经验，99.999% 以上都已存在于世间某本书里或谷歌搜索结果之中了。但有时你或许有机会见到一个人，ta 的头脑中就存着你想要的答案，此时获取它的唯一途径就是向答案拥有者提问。 . 如何问出好问题 Improve your questions 学会观察别人如何提问 在自己提出好问题之前要先观察别人是如何提问的。可以通过多听播客多看访谈观察这一点。试着评判别人提问的质量。肯定有好也有坏，好的、妙的问题就可以借过来，自己下次问问题时实验一下效果。有了对问题的基本审美后，就算问不出什么妙问题，也自然不会随意把烂问题问出口。 举了例子，我之前发过一条微博，吐槽了我听到的一期访谈里的糟糕问题。在那期采访中，主持人提问身为编剧的嘉宾， “你的这部作品是完全虚构的吗？” ——这算什么问题？！ 基本具备文学素养的人都知道世界上不存在完全虚构的故事，而写作者写任何作品必然无法避免地会受到自己过往经历的影响。并且在这段访谈中，节目播放了一小段嘉宾编剧的话剧作品，非常明显与编剧自身经历有重合的对白片段。因此提出“你的这部作品是完全虚构的吗？”这种问题的主持人显然既无基本文学素养，也不够了解嘉宾背景——就不说这个问题本身就无法引出一个有趣的回答了。 . 提问前思考这些问题 对方能在 5 秒内给出一个好答案吗？ 过长的沉默对于双方来说都是尴尬，因此在提问前要判断，“对方能很快给出好答案吗？” 举个例子， “你最喜欢的书是什么？” ——坏问题。 太宽泛。对方可能读过成百上千本书，搜索自己记忆书库并抉择的过程也许会花太久。 “你最常送给别人的书是哪本？“ ——好问题。 这个问题的答案非常明确清晰，对方基本不需要思考就有了答案。 ”你快乐的源泉是什么？“ ——坏问题。 ”当你结束一天工作后，什么事最能让你放松？“ ——好问题。 问题的顺序合适吗？ 如果你准备了深刻的”大“问题，那最好考虑在那之前加几个轻松的暖场问题。 比如像这种大问题，太早摆上来就容易给人过大压力。 ”如果你有块儿巨大的广告牌，成万上亿的人都能看到，那你会在这块儿广告牌上写点什么？“ 给被访问者提供灵感和线索了吗？ 有时一些问题并非不好回答，而是一开始被访问者没有思考的线索，导致犹豫和沉默出现。此时，为对方提供回答的灵感线索就是提问者的责任。可以通过举例来衔接问题与答案，同时也给了被访问者十几秒的思考时间。 比如，像这种问题： ”你有没有什么奇怪的个人爱好？“ 若提问者先开始“自我暴露”，拿自己举例，就既给了对方思考时间，又拉近了彼此心理距离，若有观众的话还调节了气氛。 读者/听众能从这次访谈中看到一个真实丰满的人物形象吗？ 也许整个采访的基调是严肃的，主题是高大上的，但好的访问除了那些“干货”外，往往能让听众一窥嘉宾的内心世界。 作为提问者，你是否把被访问者看作一位有血有肉的人，是否能提出个人的、生活化的、特别的问题？ . 向名人提问时不要做这些 如果你有机会向那些社会地位和影响力都远高于你的人提问的话，再紧张激动也不要问出这两类问题： 谷歌上能轻松搜索到的问题 能谷歌的问题不问别人，已经是互联网时代网民的基本文明素养之一了吧。拿这类问题打扰别人，是对别人时间的极大不尊重。 过于宽泛的成功学问题 “如何才能成功？” “现在年轻人应该做什么？” “年轻人应该创业吗？” …… 这类成功学问题虽然热度一直很高，但并不能掩盖这些是烂问题的真相。烂问题引不出好答案。在你自己不能简洁明确地定义「成功」二字之前，期盼把这思考的压力推给别人可能不是个好主意。 . 最后，如果你想成为一个有趣的人，那就少说话，多思考多观察，思考如何才能问出一个好问题。 " }, { "title": "能与你聊天的机器人管家 | 对话系统扫盲", "url": "/sinantang.github.io/pr-7/posts/dialogue-system/", "categories": "Natural Language Processing", "tags": "Dialogue System", "date": "2017-12-01 23:31:06 +0100", "content": " 在近几年人工智能高歌猛进的大趋势下，机器与人的关系日趋复杂微妙。 一方面，机器在专能上必然或已经逐步超过人类，比如今年名声大噪的 AlphaGo，还有从工业革命起就已越来越发达的取代了无数纺织女工的工业机器；另一方面，走上另一条岔路的机器人在往越来越“像人”的方向发展——要不为什么会叫“机器人”呢。不难想象到，越来越像人的终极目标之一就是使机器人具备与普通人用人类语言自如交流合作的能力。 . 这类机器人的雏形就是像现阶段 Siri 这样的智能个人助理。说“雏形”是因为 Siri 还远远达不到能与普通人正常交流的水平。在普通用户中流传最广的 Siri 讲段子反而是最没技术含量的功能。那些段子仅仅是提前存储好的问题和答案罢了，与人工智能啊人机对话啊扯不上一丁点关系，主要在为营销宣传做贡献。 虽然 Siri 2011年才刚问世，但智能个人助理背后的核心科技——自然语言处理（Natural Language Processing）——却相当”古老”。最早试图进行机器翻译（自然语言处理的一个细分领域）的尝试出现在上世纪 30 年代。在自然语言处理中，一系列应用于智能个人助理的技术组合即为对话系统（Dialogue System）。 . 建立对话系统究竟难在哪儿 为什么自然语言处理的研究已经如火如荼进行了八十年，但 Siri 还是现在这个鸟样呢？ . 因为理解、处理人类语言对于机器来说实在太难。 首先，Siri 要学会语音识别（Speech Recognition）。当你家中某处呼唤“Hey Siri”时，它能迅速忽略背景杂音并拾起你的语音信号，但不会在你跟人打招呼“Hi Sarah”时误以为在跟它对话。 开启后，Siri 接着就要进行下一步，自然语言理解（Natural Language Understanding），它得搞清楚你在说什么。“我小学时的美国总统有谁？”——“我”还是“你”？“小学”？“美国总统”？互联网上不存在这个问题的现成答案，Siri 必须拆解出这个问题背后的假设（小学生的通常年龄段，“我”在那个年龄段的年份）和需要的常识性知识（美国总统有谁，分别在哪几年任职）。 接着还需要识别用户意图（Intent Recognition）。人类语言可以有无数种形式来表达同一意思，Siri 需要在模糊、多义、多变的人类语言里准确鉴别出真实意图。“我今晚出门需要带伞吗？”——这其实是在问天气。人可以毫不费劲地迅速理解这句话，但对于机器来说，这就绕了不止两个弯。 . 当以上过程出现在人机对话中时，难度又翻了几番。 有时 Siri 需要推断谈话目的（Goal Inference），主人为什么要跟我讲这个？我若是说“我想看电影”，那 Siri 究竟应该网页搜索最近热门电影，还是定位附近电影院，还是应该问我想看什么类别的电影呢？ 有对话就出现了语境，一些人类眼中无比自然的信息到了 Siri 这儿，就需要额外建模分析 (Context Modeling)。比如，下面这一串问题， “奥巴马是谁？” “他的妻子是谁？” “她生日在什么时候？” 这里只提到过一回“奥巴马”，从未提及“米歇尔”，但 Siri 需要推断出第二句话中的“他”指奥巴马，第三句的“她”则指米歇尔。 有时，用户并不会给出一个明确指令或意图，Siri 就得自己琢磨此时该生成何种反馈（Response Generation）。当听到“Siri，我很无聊”时，该做出什么反应才合适？很多人类自己也拿不准该如何回应的话题，机器有可能表现得更好吗？ . 对话系统的基本架构 现在市场中的智能个人助理应用主要有这几个玩家： 虽然名称图标长短处各有不同，但它们背后的基本架构大同小异。 当开启任务时，先要识别人类语音，有时还需要核实个人音色来解密。输入的语音信号转化成文字，再理解这个文字内容。接下来到了对话管理环节，需要决定该做出什么回应，调用相关的任务。接着把这个回应转化为人类语言，最后把内容合成为语音，输出给用户。 观察一下，这个架构设计其实模拟了人类社交谈话时的过程分解。其中，对话管理（Dialogue Manager）就扮演了 Siri 大脑的角色。 . 对话管理 作为对话系统的大脑，对话管理模块既负责处理输入信息，还负责决定接下来该采取什么行动，并输出信息给任务管理器与语言生成/语音合成模块。 对话管理存在多种架构，比如：（中文译名仅供参考） 有限状态（Finite State） 基于框架 (Frame-based) 信息状态 (Information State, Markov Decision Process) 经典 AI 设计 (Classic AI Planning) 分布式/神经网络 (Distributional / neural network) . 这里只简单介绍前两种常见对话管理实现方式。 . 有限状态对话管理 想象当你网上订机票时，需要做出哪些决定呢？ 大致是以下几个关键信息吧： 出发城市； 目的地； 何时起飞/到达； 单程 or 往返。 当使用有限状态对话管理系统来预订机票时，系统与你之间的对话简化之后是这样的： 这个系统确实非常清晰有逻辑，开发难度也不高，一切尽在电脑的掌控中。 但其缺陷也很明显。因为对话主动权（dialogue initiative）完全由系统控制，系统只接受特定的答复，非常机械生硬。只能适应于极其有限且简单的专门应用。这个例子也许会唤起你对带声音 ATM 的记忆；除此之外，创建用户名与密码的场景也应用了有限状态机。 . 基于框架的对话管理 在人与人之间的对话中，对话主动权会在说话方中交替传递。除了特殊关系和情景，并不会有一方一直提问、主导对话走向，还不允许对方给出不同回应或转移话题。为了让人机对话更自然灵活，就需要双方均有使用对话主动权的机会（mixed initiative）。实现共享对话主动权的最简对话管理模型，即为基于框架的对话管理。 此处的框架可以理解为，在某个特定领域下涉及到的信息都可以在某个框架里确定。 看个例子，还是刚才预订机票的情景，可以先设计好这样一个框架： Flight Frame: ​\tORIGIN: ​\t\tCITY: ​\t\tDATE: ​\t\tTIME: ​\tDESTINATION: ​\t\tCITY: ​\tAIRLINE: 在所有空格都被填满前，用户可以直接提供信息，“我想订下个月 5 号从伦敦飞纽约的单程机票”；对话系统也可以提问，“早上的航班可以吗？” 当这个框架被必要信息填满后，就可以查询相关数据库，验证无误后就能下单出票。 这个对话管理系统的背后理论涉及框架语义学（frame semantics）、隐马尔可夫模型（HMM）与机器学习，在这儿就不展开讲了，有兴趣的读者可自行查阅相关资料。 基于框架的对话管理系统已经非常“古老”，最早在 1977 年就有人提出。不仅古老还十分长寿；直到今天，大多数现代商业对话机器人（比如智能客服）都依然在使用这个对话管理系统。 . 小结 本文非常简单地扫盲了 Siri 类智能个人助理背后的对话系统原理。 限于篇幅与作者知识水平，讲了讲一部分机器人必然会越来越像人、最终达到能与人交流合作的未来趋势，从语言学和自然语言处理角度讲了讲机器要理解、处理人类语言需要克服的几大困难，最后写了写对话系统的基本架构，以及对话系统的大脑——对话管理。 对话系统科技以及其中各个小模块目前大都处于快速发展期，仍有很大发展潜能，我认为这是非常适合自然语言处理或人工智能从业者学习进入的领域。欢迎从业者们留言交流 :） . 既然有一部分专能机器人的工作效率早已超过人类，还有一部分机器人在拼命向人类靠齐。那，未来会是什么样呢？ 也许会是这样吧： （但我不觉得这会在自己有生之年发生 :P . References: Speech and Language Processing. Daniel Jurafsky &amp; James H. Martin. *Keynote: Conversational AI in Amazon Alexa - Ashwin Ram Udacity Intersect 2017.* CS224S Spoken Language Processing, Lecture 10. " }, { "title": "能量管理 - 你真的会休息吗？", "url": "/sinantang.github.io/pr-7/posts/how-to-best-rest-yourself/", "categories": "How to learn better", "tags": "learning, energy management", "date": "2017-11-18 23:31:06 +0100", "content": "在工作效率这件事上，我曾写过《自知是效率之魂》，但那时我并没想清楚一个与效率相关的重要问题，因此并未在前文提及。最近我自觉思考得差不多了，可以试着总结一下我的想法了。 . 这个问题就是题目提到的「休息」问题。 . 我意识到休息很可能负面影响工作效率这件事已经很久了，但直到前段时间也没想出什么特别好的解决方法。 是的，我认为大部分人的休息方式对于脑力工作的效率都有负面作用。尤其当一人从事对脑力要求较高的工作时，很多时候休息完反而比休息前更累了。这主要由于大脑在不同任务之间切换时会固定地消耗不少精力。尽管有时你可能注意不到，但频繁切换任务确实会蚕食大量珍贵注意力。 想象一下，你独自沉迷于一个编程难题，在钻研中逐渐进入了物我两忘的心流状态—— 此时，突然听到电话声。你吓了一跳，不得不翻出手机，按下通话键。 是一个朋友，问昨晚聚会后有没有把自己的眼镜落你包里了。 你不得不起身去找背包，一番翻找后摸到了不属于自己的眼镜。 是的眼镜落我包里了，明天下班路上给你送去吧。什么你明天不方便？那后天？嗯嗯行那就这样吧到时联系。 这通电话虽然只有 10 分钟，但就算挂了电话后你能马上回到自己刚刚正在做的事上，也至少需要七八分钟才能重新找回刚才的思路，再要过二三十分钟或许才可能进入下一段心流。（但此时你可能已经饿了 :） . 除了被不相干的事情打断外，有时我们还要主动加大自己休息时的能量消耗。 比如在休息时间刷微博看新闻，在这些会吸取你丰富情绪的娱乐活动过后，你从更兴奋的状态回落到相对没那么跌宕起伏的工作上来，一般都会觉得更累了。 . 因此，有一段时间我认为，与其拿间歇性休息消磨光本该投入工作的精力，倒不如乘一口气把今日清单上的工作全都做完再彻底放松好了。 这种策略我也实践了一段时间，有时确实非常有效，也极易给人成就感。 但这样的安排也有不小问题，这种日程对人当天状态和工作是否顺利要求很高。 在效率这件事上，我们的自由意志其实相当有限。 天气、食物、咖啡因、睡眠质量、荷尔蒙波动等等，无数环境和身体因素都在时时刻刻影响着我们的感知、心情与工作状态。 比如，你大概也经历过”温暖晴天让人心情大好从而更易投入到有难度的工作中去”的体验吧；很多女生都有过“生理期前心情烦躁什么也没耐心做”这类被荷尔蒙小波动大大影响到的体验。 另一方面，当选择先做完所有工作再休息的策略时，若不幸一直卡在某个难题上进行不下去的话，更容易让人急躁、自责，甚至“自暴自弃”直接放弃当天所有工作计划。 ——以上种种“意外”我都体验过很多次。 . 那，到底该怎么休息呢？ 启发我下面解决方案的还是我之前写过的全能学习高手 Scott Young。 既然频繁切换任务对大脑来说是种无形却可观的能量消耗，那就尽量不要将工作任务与娱乐项目 ABAB 地拼插起来呗。 然而，长时间持续脑力劳动毫不休息确实会导致效率逐步下滑，而且此时的工作结果倚赖太多环境或身体因素，那在任何感觉累了的时刻都主动短暂休息一下才是最好的策略。 关键就在于，什么样的休息才能真正放松大脑以达到长期范围内最佳效果？ ——那就做那些比工作更无聊且不费脑力和情绪的事吧！ 比如，起身喝一大杯水，随便走动走动，甚至打个盹或发会儿呆，都是很好的真正让大脑得到休息的方式。 但注意不要休息太久，否则注意力很可能会被吸引到其他事物比如手机上——人无法长时间忍受无聊状态；另外，除了确实浪费时间外，休息太久还会增加完不成工作而心生自责的可能性。 . 最后，如何衡量你的休息方式是否与工作本身本末倒置了呢？ 你可以问问自己，你是否会在工作时暗自期待一会儿休息要做的事？如果说中了，那说明在你心中休息是不那么有意思的工作所“赢取”的奖赏——也就是说你其实更喜欢休息时做的事，工作只是获取心安理得的休息的手段罢了。 这样的心态常见，但很是危险。这种危险在于，潜意识里，你认可“工作本身的意义并不如休息时做的那些事（刷刷微博看看剧什么的）高”。这样的心态既否定了自己努力工作的意义，还容易形成消极循环——越觉得没意义就越难投入工作，因此更难收获进步或成就，最终显得更没意义了。 （这一块儿感悟启发自 Paul Graham 那篇有名的《How to do what you love》） " }, { "title": "终生学习者必备元技能：抓住一切陌生概念的核心", "url": "/sinantang.github.io/pr-7/posts/learning-abstract-concepts/", "categories": "How to learn better", "tags": "learning, abstract concepts, life-long learner, Feynman technique", "date": "2017-11-10 23:31:06 +0100", "content": "面对一堆陌生又抽象的概念一头雾水无从下手？初入新领域的人肯定都曾产生过类似感受，尤其是在硬核学科（理工科类）。有些人会死磕直到理解，有些人会总结方法越学越快，剩下大部分人只要不是致命情况可能就不了了之随缘去了。但我相信，学习陌生抽象概念是一项可以通过学习、练习掌握的元技能。 . 一句话总结，这个元技能的关键词就在于「具体化」。 “抽象”的对立面即为“具体”，想要化解抽象概念自然要从「具体化」来着手。听起来像废话，但我总结出 3 个破解「抽象」实现「具体化」的方法，百试99灵，不信你试试。 . 场景化 把一个概念放回到它的使用、创造场景中，是快速建立对其认知的重要方法。 最先启发我这个方法的是「服务器（server）」这个概念。 由于我只是个半路出家自学编程的文科生，先前对计算机硬件及网络知识毫无了解，所以以前一直没能理解「服务器（server）」到底是什么，脑子里懵懵懂懂有个模糊轮廓，但每次在技术文里碰到「服务器（server）」这个词都要再扫几眼 Wikipedia，才能勉强确认它在具体语境下的具体含义。 关于「服务器（server）」，Wikipedia 是这样说的： In computing, a server is a computer program or a device that provides functionality for other programs or devices, called “clients”. . 哦。。。 . Wikipedia 当然很科学很准确，但用大量概括性太高的大词（program、device、functionality……It’s simply too general），让人很难一秒理解某个抽象技术概念的核心。 后来有一次，我在看书时，无意中看到作者对「服务器」的一句话解释，突然瞬间就抓住了服务器是什么。这个作者是这样说的： “A server is a computer or computer program that performs tasks like hosting a website.” ——Cory Althoff 噢！其实服务器就是电脑！只不过在执行一些特别任务而已！有了这个基层理解后，「服务器」在我的脑海中就从先前模糊不清的机器形象，进化成稳坐云端的一台电脑了。 有这样一个可以让你把一个概念视觉化、场景化的基础形象，大脑就可以更方便迅速地存储这个概念，把这个概念与相关概念连接起来，形成「知识网」。就好像当我们看到描述“大海”的文字时，往往会顺带联想起海浪、海风、海滩和咸咸的味道。但你没法”顺便联想”到一个在你大脑中未存储过具体形象与场景的事物，比如“角箱鲀”……因为你不知道这种生物的存在，甚至也不知道自己不知道这件事。自然无法主动联想到它。 （顺便提下，角箱鲀长这样： （现在你的大脑中有了角箱鲀的具体形象了 :） . 这里说的「场景化」并不仅限于把一张平面照片印在记忆中，而是一个可以由多个感官参与的动态互动场景。只记住一个单薄名词和存储完整场景的差别，就像只听说过「熔岩灯 (Lava lamp)」和目睹过「熔岩灯」的真实制造过程的理解深度差距一样巨大。 . 类比 类比则是另一个强大的学习陌生概念的工具。 “你用没用过微信？” “没用过，那是什么？” “就和手机版 QQ 差不多！” 以上对话在 2011 年时肯定发生过很多次。先不说类比可能会让人忽略不同事物之间的重要差异这个副作用，但这确实是在见不到实物的情况下能够最快大致理解一样事物的方法了。 类比能把陌生物体与已知实体连接起来，比如，用电脑类比人脑；还能把陌生概念与只存在于人想象中的已知概念连接起来，比如，把善恶定义与法律联系起来——尽管两者都是仅存在于人类想象中的概念。 你很难在解释一样陌生事物时不加上这么一句，“其实和xxx很像，不过有abc区别”。因为这样类比熟悉事物并归类的认知方法是如此基础。对于成年人来说，这个世界已无太多完全新鲜的事物，所有陌生事物几乎都可以与已知类别的 prototype（原型）建立关联。 比如，虽然这个世界上并没有一样东西叫做“水果”，但一提到水果，每个人头脑中都会出现一个或几个水果的原型，很可能是苹果、香蕉、橙子这些。若听说或者在超市看到某样从没见过的物体，只要别人告诉你是“水果”，那你其实已经掌握了 80% 以上有关这个陌生物体的信息了：某种食物，可以吃，非主食，很可能是甜的，也可能发酸，可能含有大量维生素、水分与纤维素。如果你没有见到这样水果，也没有听过对它形状的描述，就可能在脑海中以一个类似苹果形状的物体来替代。这就是「类比 + 归类」的力量，让我们不必亲身经历某样事物也可以快速获取必要信息，进而获得一种「确定感」。 当面对陌生概念时，就可以多试试这个思维游戏，“这让我联想到了……它有点像……但有些不同……” . 举例 举例是应对高度概括性抽象概念的一大利器。 比如，在「场景化」一节中，我引用了两个不同版本的「服务器」定义，第二个更平易近人的定义就几处使用了举例—— Wikipedia 说 device，Cory 说 computer（device 的一种）；Wikipedia 说 functionality（功能），Cory 说 tasks（功能的一种实现方式），并且进一步列举了个简单任务例子，“hosting a website”（网站）。 Cory 的版本并没有 Wikipedia 的那么正统准确，但却直观友好很多。 . 举例的方法在英文阅读理解中也有妙用。 英语学术或技术文中，也常有作者爱拽大词（当然，也与文体、主题、深度高度相关），在多次读到崩溃之后，我总结了处处举例这个高效阅读方法： 当看到“某种液体” - 在大脑中替换成“水”； 读到“实现特殊功能” - 编个功能安上，比如“实时翻译”； 碰到“某一类物体” - 那就“苹果”吧。 用这样举例的方法阅读当然不能完全理解作者深意，但起码我读几行就走神翻几页就瞌睡袭来的根本问题解决了，脑子里也形成了文章的大致框架，接下来重读重要段落时就可以一路修补原先不够完美的解读了。 . 检验你是否真的理解了 比不理解某样概念更糟糕的大概就是“你以为自己理解了，但其实并不理解”。 因此，在初步（以为）理解了一个概念之后，还需要设一质检站，检验自己是否真地学会了。就像上学时的小测大考一样。 长大了没人给出考卷改分了，我们还可以用著名的「费曼学习法」。 「费曼学习法」没什么高深的，一句话就讲完了：把概念讲明白给外行听。 具体分为四步： 选择一个概念； 把它教给完全不懂的另外一个人（比如8岁孩子）； 如果卡壳，回到原始材料； 回顾后重新表达； 好的老师并不一定是学术成绩最好的，而是最会解释一个陌生概念的。 向小孩子或外行讲清楚一个专业抽象概念非常难，除了因为你要先知道别人为什么不懂才能针对性解惑外，还因为人均有忘性。这个忘性在于，当你在某个领域积累了一点知识和经验后，就习惯了那些概念的存在，就会忘记自己还是个什么也不懂的小白时是种什么体验。你的大脑确实不可逆地回不去从前的状态了。就像大学毕业生很可能不知道不会解四则运算是种什么体验。 所以说，大多专家学者讲话，自以为很清楚了但普通人还是很难听懂，也是出于这个原因——他们已经很难想象不懂那个领域的基础术语和概念是种什么体验了。 这也是我在学艺仍不精时选择写 Python 系列教程的初心之一。我不想忘记自己初学时的挣扎和疑惑，尽量减少产生“这很简单啊你怎么学不会是不是太笨了”这类事后孔明的想法。 . 小结 破解陌生概念三步走：「场景」「类比」加「举例」。 当然，记住并理解一个概念只是第一步，用起来才是真的。 如果这篇文章能帮你走好第一步，就已经达到目的了！ " }, { "title": "函数、作用域、封装 | 写给小白的工程师入门", "url": "/sinantang.github.io/pr-7/posts/functions-in-python/", "categories": "A Developer Guide for Newbies - Starting with Python", "tags": "developer, programming, python, funtions, encapsulation", "date": "2017-11-05 23:31:06 +0100", "content": " “Functions should do one thing. They should do it well. They should do it only.” — Robert C. Martin A. 函数定义与基本用法 函数（function）是一组复合语句，可以接收输入值，执行特定命令，选择性地返回输出结果。 Python 中函数与数学里的函数相似。比如这个代数函数： f(x) = x * 2 等式左边定义了一个函数 f ，这个函数需要一个输入值 x ——即为参数（parameter）。一个函数可以带一个或多个参数，也可以不用参数。 等式右边就是这个函数的具体定义了。这个函数可以把传入的参数乘二，并返回结果。 在代数和 Python 中，呼出（= “调用”、使用）函数的语法都是一样的： FUNCTION_NAME(PARAMETERS_SEPERATED_BY_COMMA) （在这套教程里，我用约定俗成的「大写字母 + 下划线」来代表应该用真实代码取代的内容；在编程中这样的习惯用法很多。） 比如我们可以传入参数 4 到上面的代数方程中， f(4) &gt;&gt; 8 再比如，print() 是一个我们已经很熟悉的 Python 3 内建函数 (built-in function) 了： &gt;&gt;&gt; print(\"Whatever you like :p\") Whatever you like :p 自定义函数 由程序员来定义一个函数在 Python 中极度常见。比如，上面的代数方程用 Python 自定义函数表达即为： def f(x): \treturn x * 2 这几乎是最简形式的函数定义了，由此我们不难推断出 Python 自定义函数的基本规则： def FUNCTION_NAME(PARAMETERS_SEPERATED_BY_COMMA): \tFUNCTION_DEFINITION 定义函数的关键字为 def，函数名称可以随意取，但应该避免 Python 关键字（keywords）；习惯上 Python 函数命名通常为「小写字母 + 下划线」组合，例如 print_area, multiply, even_or_odd. 函数名称后紧跟一对单括号 ()，如果有参数的话应该放在括号里，多个参数以逗号隔开。不要忘记句末冒号。 # 零参数的函数 &gt;&gt;&gt; def hello(): ...\t\treturn 'Hello Python!' ... &gt;&gt;&gt; greeting = hello() &gt;&gt;&gt; print(greeting) Hello Python! # 多个参数的函数 &gt;&gt;&gt; def sum_all(x, y, z): ...\t\treturn x + y + z ... &gt;&gt;&gt; my_sum = sum_all(1,2,3) &gt;&gt;&gt; print(my_sum) 6 所有跟在 def 行后面缩进的语句都是该函数的定义。上面 f(x) 的函数定义只有一行，且用到了 return 关键字。return 后跟着的表达式或值即为这个函数会返回的输出值。函数定义可以不包括 return 语句，没有 return 的函数返回值为 None. 比如： # calling a function with return statement &gt;&gt;&gt; f(2) 4 &gt;&gt;&gt; result = f(2) &gt;&gt;&gt; print(result) 4 # create a function without return statement &gt;&gt;&gt; def no_return(x): ...\t\tx = x * 2 ...\t\tprint('multiplied by 2:', x) ... # call a function without return statement &gt;&gt;&gt; no_return(4) multiplied by 2: 8 注意：很容易忽略的一点是，当你想要保存一个函数的输出值（以便之后使用）时，需要新建一个变量（variable），用这个变量来保存函数的输出结果，比如上面的 result 变量。 函数的复用 为什么要创建、调用函数而不是直接写出具体指令呢？ 因为有一个现成函数可以大大降低程序员的码字工作量。想实现什么功能第一反应应该是，“是否有现成的 函数／方法／模块 可用？“——而不是重复造轮子 (reinventing the wheel) 。 To reinvent the wheel is to duplicate a basic method that has already previously been created or optimized by others. — Wikipedia 当前人已经发明、优化出一种解决问题的方法后，后人若还要自己从零开始新造自己的方法，这就被称为「重复造轮子」。在大部分情况下，应该尽量避免「重复造轮子」。 调用已经写好的函数，就是一种减少「自造轮子」，提高代码复用性（reusability）的方式。 例如，我们可以用这节课学到的函数自定义方法和上节课条件控制语句写一个“判断输入值奇偶性”的函数： def even_odd(x): \tif x % 2 == 0: \tprint('input is even') else: print('input is odd') 接着调用这个函数： &gt;&gt;&gt; even_odd(2) input is even &gt;&gt;&gt; even_odd(3) input is odd 接下来每次需要用到这个功能（functionality）的时候，只要一行代码调用 even_odd 函数即可，大大减少了重复的工作量。 嵌套函数 上一节，我们认识了嵌套条件语句（nested conditionals），就是在一个条件语句的 True 分支后又接了一个条件句。在函数定义中，嵌套函数（nested functions）也是允许的。 例如， def outer(): \tprint('Outer Funtion!') \t \tdef inner(): \t\tprint('Inner Function!') inner() 外层函数（outer function）与内层函数（inner function）的命名也不言自明。 此时调用 outer 函数，会是出现什么结果呢？ &gt;&gt;&gt; outer() Outer Funtion! Inner Function! 内建函数 Built-in functions 如果我们需要用的所有函数都要自己一一写，那写代码效率就太太低了。因此，Python 是有自带内建函数库的（https://docs.python.org/3/library/functions.html）。 比如，刚刚提到的 print() 函数。常见的 Python 内建函数还有以下这些： # len() returns the length of an object &gt;&gt;&gt; len('Monty') 5 &gt;&gt;&gt; len('12345') 5 # type() returns the data type of an object &gt;&gt;&gt; type('Welcome to SinanTalk!') &lt;class 'str'&gt; &gt;&gt;&gt; type(98) &lt;class 'int'&gt; # str() takes an onject and returns a new object with a string data type &gt;&gt;&gt; str(100) '100' # int() takes an object and returns a new object with an integer data type &gt;&gt;&gt; int('99') 99 # float() takes an object and returns a new object with a floating point data type &gt;&gt;&gt; float(88) 88.0 # input() collects information from the user &gt;&gt;&gt; age = input('How old are you? ') How old are you? 18 &gt;&gt;&gt; age = int(age) &gt;&gt;&gt; if age &lt; 28: ...\t\tprint('Still young!') ... else: ... \tprint('You must have seen a lot!') ... Still young! &gt;&gt;&gt; B. 变量作用域 Scope 是时候了解变量的作用域这个重要概念了！ 作用域（scope）是变量（variable）的重要特性之一。 变量作用域决定了哪一部分程序可以访问某个特定的变量，即为对一个变量的「访问权限」。 A variable’s scope: refers to what part of your program has access to the variable. 变量的访问权限是有这个变量的赋值位置决定的。 为什么一开始讲变量的时候没有涉及这个重要概念呢？ 因为在没学自定义函数之前，是很难理解变量作用域是怎么回事。 根据作用域，变量可分为两大类： 全局变量（global variable）：定义／赋值在函数（或类）之外的变量； 局部变量（local variable）：定义／赋值在函数（或类）内的变量。 对于一个全局变量而言，在这个程序的任何位置都可以访问它；而局部变量则只能在局部（即某个函数／类的内部）访问，走出了这个函数／类，就不能再访问局部变量了。 打个比方，在你面前站着一面放满书的书柜，你可以看到每本书的书名，但只有选其中一本书翻开，才能看到这本书里提到的人名。 这面书柜就是一个程序，每本书都是一个代码块，写在书脊上的书名是全局变量，需要翻开某本书才能看到的人名是局部变量——站在书架前是看不见局部变量的！ 我们来看看在具体代码中的全局／局部变量。 &gt;&gt;&gt; x = 1 &gt;&gt;&gt; y = 2 &gt;&gt;&gt; z = 3 &gt;&gt;&gt; print(x, y, z) 1 2 3 全局变量可以从程序的任何位置访问，也包括函数内部： &gt;&gt;&gt; def print_vals(): ...\t\tprint(x, y, z) ... &gt;&gt;&gt; print_vals() 1 2 3 如果在函数内部定义了局部变量，则不能在函数外单独访问，否则会抛出 NameError 异常： &gt;&gt;&gt; def print_new_vals(): ...\t\tval = 100 ...\t\tprint(val) ... &gt;&gt;&gt; val Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt; NameError: name 'val' is not defined 这种情况下，Python 解释器看不见局部变量 val ，有点像选择性失明。 如果在函数内容定义一个与已经存在的全局变量名称相同的局部变量，那么在这个函数外再访问此变量，会返回什么值呢？ &gt;&gt;&gt; x = 1 &gt;&gt;&gt; def local_val(): ... \tx = 100 ... &gt;&gt;&gt; x 在 idle 内敲一遍的话会发现，x 返回的值是 1。这个例子更加充分地证明了局部变量和全局变量的作用域差别。 如果想在函数内部改变某个全局变量的话，可以用 global 这个关键字来表明这儿访问、修改的是全局变量。 &gt;&gt;&gt; x = 1 &gt;&gt;&gt; def f(): ... \tglobal x ...\t\tx += 1 ...\t\tprint(x) ... &gt;&gt;&gt; f() 2 为什么编程语言中的变量普遍需要规定作用域呢？ 如果不存在作用域限制的话，一个程序中的任何变量在任何位置都可以访问。那么在一个很长的程序中，如果你在一个函数内部使用了全局变量且不小心改变了这个变量的值或类型，那在接下来的程序中这个变量就可能会拥有不同的特性，引发意想不到的错误。 如果有多个程序员碰过同一个程序，可能并不是每个人都清楚别人命名的变量，没有作用域的访问限制的话，很可能会出错。 变量的作用域不同同时也引出了编程中封装（encapsulation）的概念。 C. 函数的封装 封装是面向对象编程（object-oriented programming）中的重要概念。今天我们只粗浅地介绍一点和函数有关的封装行为。 封装，顾名思义，就像把一些代码封起来装进胶囊或瓶子里去，在胶囊外的代码不能访问胶囊内代码。 When code is encapsulated, it means when it is called, the caller cannot access the code’s internal data. 比如，上面介绍的函数内部的局部变量，就是函数封装行为的体现。 这样做的好处很多。当用户（指所有使用这个程序的人）运行你的代码时，他并不需要知道你的代码里有什么函数，每个函数内部又存在怎样的变量和运算，他只需要知道如何运行即可。另一方面，正常情况下，一个程序会需要反复优化升级，后期你可能会修改一个函数内部的代码，没有封装的话，这个函数外部的代码可能会直接访问内部，一旦修改内部代码，就可能会造成“连锁事故”。 所以说，封装是提高代码可维护性与可移植性的重要前提。 第7节 小节 掌握本节的自定义函数与上一节的条件语句，已经能写很多 Python 短程序了呢！ " }, { "title": "如何成为全能的学习高手？", "url": "/sinantang.github.io/pr-7/posts/renaissance-man-learning/", "categories": "Book Review, How to learn better", "tags": "learning, reading", "date": "2017-11-04 00:00:00 +0100", "content": "我最近三个月的生活关键词：学习。 比预定计划提前完成了两门 MIT OCW 的计算机网课，同时读了几本与技术相关的书：《黑客与画家》、《数学之美》、《Think Python》和《The Self-Taught Programmer》（有机会会写写读书笔记）。 除此之外，因为几乎每天都在接触很多新知识——有时进展顺利，但更多时候花大量时间纠缠在消化、应用陌生概念上——我也看了不少牛人谈如何学习的文章，其中就包括了我今天想分享的这位作家／程序员／创业者：Scott Young. Scott Young 是真正的学习高手。 他曾经发起一年自学修完 MIT 四年制计算机科学本科所有课程的挑战，并以通过所有考试的成绩完美收官；作为加拿大人，他完成过一项颇有趣的“不讲英语的一年”外语学习挑战，那一年里，他和朋友去西班牙、巴西、中国和韩国旅行生活，并分别学会了这几门当地语言；去年他还达成了一项“30天学会人像绘画”挑战，下图是他在第1天和第30天的素描自画像水平的巨大对比： 他的个人网站上还有他出版的几本关于学习方法与工作效率的书和课程，有兴趣的读者可以自行了解。 了解过一点他的经历的人很可能会联想到英文中「Renaissance Man」这个词—— Renaissance Man: Polymath, a person whose expertise spans a significant number of various subject areas, referring to the renaissance period. 文艺复兴式人（博学多才的人）：一位在多个领域均有建树的人。这个称呼源于文艺复兴时期，指像达芬奇那样跨领域高成就的天才巨匠。 然而实际上，在现代社会再想要成为「Renaissance Man」已经比文艺复兴时期要难得多了。因为各行各业的发展距几百年前已是参天巨树与小白杨的对比，仅是大致了解一门细分领域就要花费一个人从小学到博士的大部分时间精力，更别提在多个跨度极大的领域都成为专家了——我们已经进入不折不扣的专能社会。 虽然真正意义上的博学多才已极度罕见，但 Scott 还是向我们展示了一个人依然可以通过有效学习在多个领域达到超越大多数（80-90%）的水平。 具体该如何做呢？ Scott 在一篇文章（《How to become a Renaissance man (or woman)》）中分享了他的思考；我加上了自己的理解，把答案总结在下文： 我（这段中“我”代指 Scott）把不同技能的学习方法分为两大类：项目制学习（projects）与习惯性学习（habits）。 项目是短期、密集的学习形式。比如，针对一个主题短时间内大量集中阅读，完成几门网课，写一篇论文等等。这类学习的目的是为了突破某个学习难点，在完成项目后你在该领域的水平会达到新高。 习惯则是长期、放松的学习形式。比如，和外国朋友见面讲讲外语，在通勤时听听播客，有空时翻几页书。并不需要太费力。 . 那什么时候适合项目制学习，什么时候可以选择习惯性学习呢？ 当你需要学习一项困难的新技能时，那最好启动一个项目。悠游的心态永远也无法征服一道算法或编程难题。相反，在短期内高密度地投入大量精力，才能让你快速突破难关，解锁一门技能的关键成就点。比如，我的 MIT 挑战、不讲英语的一年、30天学会人像画，都是靠项目制学习达成的。 习惯式学习则适用于那些你已经入了门，且目前不存在太大学习障碍的领域。通过持续稳定、但最低限度的精力投入来积累经验、防止技能退化。比如当你掌握了一门外语的基本语法词汇后，就可以把练习这门语言内化为一个生活习惯，只需每天或每周安排些与这门语言有关的小活动即可。 . 对于有志掌握多项技能的人来说，有效学习的关键就在于如何在项目制学习与习惯性学习之间寻找平衡点。 如果你想掌握的技能并不是每天翻两页书就能自然而然地学会的话，那你就需要为自己规划一项任务，一个学习项目（learning projects）。 . 项目制学习时最常见的错误就是，同时并排多个学习项目。 一个有挑战的学习项目占用的不仅是大量优质时间，还有隐形的精神上的开支（mental overhead）——你需要有效的时间管理，还需要常常鼓励自己、保持动力、保存兴趣以防半途而废。每一个项目都会无法避免地产生相应地精神开支，同时在多个项目之间跳来跳去，只会消耗过多心力，让每一件事都变得更加难以坚持下去。 . 但一段时间内只能推进一个学习项目不代表你就不能学其他东西了。在项目之外，还可以持续多项习惯性学习。倒是不必以苛刻的目光来审视这些细水流长的学习积累。比如，我通常手边同时放着四五本正在看的书，常常练习各种外语，还会画画，编程，烹饪等等……但这些技能我绝不会逼自己每天挨个来一遍；哪天不在状态的话，我也不会因为没做什么“有用的事”而背上负罪感——以短期进步而牺牲长期兴趣，是得不偿失的行为。 为了牢固形成自己熟练这些技能的习惯，我并不会想方设法每天多挤时间来做这些事，反是花了很多时间思考这个问题—— 「我究竟如何才能尽可能地降低自己开启一件正确的事的门槛（reduce the friction instead of increasing efforts）呢？」 很多作家戏虐，写作80%的困难在于坐下、打开 Word 文档（= 拿出纸笔）。 相信很多人都体验过这种体验，明明有项工作等着你去做，其实也没难到让你想哭，但你就是需要先看三集美剧再吃两包薯片刷一圈微博才能做好「开始去做一件事」的心理建设。 我很早就想通了这一点，因此总是在思考如何才能找到适合自己的「自然而然、非常即兴地」开始学习的状态。 道理讲完，如果你也想试试「一个项目 + 若干学习习惯」来掌握多项技能的生活方式，Scott 贴心地给了三个建议： 在一张清单上写下所有你感兴趣学习的技能。可以是你掌握了皮毛，但仍想不断提升的能力；也可以是一项白纸一张的技能。 上面列出的技能，有没有哪些是可以通过降低“开启门槛”而随性进行的学习呢？比如，找到一个优质播客随时可以听，买几本书放在你随处可见的地方。 如果有一项技能对你来说非常重要，你无法把它变成一个不费力的学习习惯，或者你正卡在进步的瓶颈上，那就应该考虑把这项技能学习升级成一个1-3个月的学习项目，设定好完成期限、成果与日程安排。 . 对 Scott 的其他文章感兴趣的读者，可以订阅他的免费 Newsletter. 我订阅 Scott 的博客已经很久了，虽然并不是每篇文章都会看（毕竟他已写了十多年博客……），但每次点开都有启发和收获！也祝你学习愉快 :) " }, { "title": "Lecture Series Notes - Design of Computer Programs with Peter Norvig", "url": "/sinantang.github.io/pr-7/posts/Lesson-1-Notes/", "categories": "Lecture Series Notes - Design of Computer Programs with Peter Norvig", "tags": "design pattern, python", "date": "2017-11-01 23:31:06 +0100", "content": "I started a new online lecture Design of Computer Programs taught by Peter Norvig on Udacity. The quality of this lecture series is exceptional - once again proving the importance of a great teacher! Highly recommend this course for people who are familar with Python and some basic knowledge in computer science. It’s freely available on Udacity. I will be updating my notes for these lectures. FYI: They are not meant to be self-containing. . Lesson 1 - playing poker Map ordinal of characters into some integers: My attempt: def card_ranks(hand): \td = {'2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':11, 'Q':12, 'K':13, 'A':14} ranks = [d[r] for r,s in hand] ranks.sort(reverse=True) return ranks Peter’s solution - simpler: def card_ranks(hand): \tranks = ['--23456789TJQKA'.index(r) for r,s in hand] ranks.sort(reverse=True) return ranks Descending/ascending order &amp; same element tests My attempt: # Define two functions, straight(ranks) and flush(hand). # Keep in mind that ranks will be ordered from largest # to smallest. def straight(ranks): \"Return True if the ordered ranks form a 5-card straight.\" for i in range(1, len(ranks)): if ranks[i] != ranks[i-1]-1: return False return True def flush(hand): \"Return True if all the cards have the same suit.\" for i in range(1, len(hand)): if hand[i][1] != hand[0][1]: return False return True Peter’s solution - using set: def straight(ranks): \treturn (max(ranks)-min(ranks) == 4) and len(set(ranks)) == 5 def flush(hand): \tsuits = [s for r, s in hand] return len(set(suits)) == 1 Find n consecutive elements with the same value in a list: My attempt: def kind(n, ranks): \"\"\"Return the first rank that this hand has exactly n of. Return None if there is no n-of-a-kind in the hand.\"\"\" i, kinds = 0, [] while i &lt; len(ranks): length = 1 while (i+1) &lt; len(ranks) and ranks[i+1] == ranks[i]: i, length = i + 1, length + 1 kinds.append((length, ranks[i])) i += 1 for l, s in kinds: if l == n: return s return None Peter’s solution - using list method .count(), much simpler: def kind(n, ranks): \tfor r in ranks: \tif ranks.count(r) == n: return r return None Find 2 pairs of elements with same rank in a list: My attempt: def two_pair(ranks): \"\"\"If there are two pair, return the two ranks as a tuple: (highest, lowest); otherwise return None.\"\"\" res = [] for r in ranks: if ranks.count(r) == 2 and (r not in res): res.append(r) if len(res) == 2: return tuple(sorted(res, reverse=True)) return None Peter’s solution - : def two_pair(ranks): \tpair = kind(2, ranks) lowpair = kind(2, list(reversed(ranks))) if pair and lowpair != pair: \treturn (pair, lowpair) else: \treturn None Making changes to our program - counting [A,2,3,4,5] as straight too the number of places to change in the code should correspond to changes in the conceptualisation of the program Peter’s version: def card_ranks(hand): \tranks = ['--23456789TJQKA'.index(r) for r,s in hand] ranks.sort(reverse=True) return [5, 4, 3, 2, 1] if (ranks = [14, 5, 4, 3, 2]) else ranks Handling ties - return all maximum values from a list My attempt - gives None in Python2.7, TypeError in Python3.6: def poker(hands): \treturn allmax(hands, key=hand_rank) def allmax(iterable, key=None): \tres = [] for i in iterable: if hand_rank(i) == max(iterable, key): \tres.append(i) return res Peter’s version: def allmax(iterable, key=None): \tresult, maxval = [], None key = key or (lambda x: x) # not very clear about what's the difference bewteen key=key &amp; key=lambda x:x for x in iterable: xval = key(x) if not result or xval &gt; maxval: result, maxval = [x], xval elif xval == maxval: result.append(x) return result Write deal() function My attempt: import random mydeck = [r+s for r in '23456789TJQKA' for s in 'SHDC'] def deal(numhands, n=5, deck=mydeck): \"\"\" return hands in a list \"\"\" hands = [] random.shuffle(deck) for i in range(numhands): hand = random.sample(deck, k=n) update_deck(deck, hand) hands.append(hand) return hands def update_deck(deck, hand): \"\"\"remove cards in hand from deck \"\"\" for i in hand: deck.remove(i) Peter’s solution - much shorter… def deal(numhands, n=5, deck=mydeck): \"\"\"return hands in a list \"\"\" \trandom.shuffle(deck) return [deck[n*i:n*(i+1)] for i in range(numhands)] # slicing the deck of cards with step of n # no need to random sample the deck as it's already shuffled Hand frequencies def hand_percentages(n=700*1000): \t\"\"\" \tsample n random hands and print a table of percentages for each type of hand. \t\"\"\" \tcounts = [0]*9 for i in range(n/10): for hand in deal(10): ranking = hand_rank(hand)[0] counts[ranking] += 1 for i in reversed(range(9)): print('{}: {:.3f} %'.format(hand_names[i], 100.*counts[i]/n)) Dimensions of programming Efficiencies, Correctness, Features, Elegance (buying time for the future) “The best is the enemy of the good.” Refactoring (more elegant) e.g. ... \telif kind(3, ranks) and kind(2, ranks): \t\treturn (6, kind(3, ranks), kind(2, ranks)) ... principal DRY: Dont’t Repeat Yourself. a way to refactor -&gt; group(7, 10, 9, 7, 7) -» (3, 1, 1), (7, 10, 9) Implement this refactoring (very enlightening!): def hand_rank(hand): \t\"\"\"return a value indicating how high the hand ranks. \tcounts: the count of each rank; \tranks: lists corresponding ranks. \te.g. '7 T 7 9 7' =&gt; counts = (3,1,1); ranks = (7,10,9) \t\"\"\" groups = group(['--23456789TJQKA'.index(r) for r, s in hand]) counts, ranks = unzip(groups) if ranks == (14, 5, 4, 3, 2): ranks = (5, 4, 3, 2, 1) straight = len(ranks) == 5 and max(ranks)-min(ranks) == 4 flush = len(set([s for r,s in hand])) == 1 return (9 if (5,) == counts else 8 if straight and flush else 7 if (4, 1) == counts else 6 if (3, 2) == counts else 5 if flush else 4 if straight else 3 if (3, 1, 1) == counts else 2 if (2, 2, 1) == counts else 1 if (2, 1, 1, 1) == counts else 0), ranks def group(items): \"\"\"return a list of [(count, x)...], highest count first, then highest x first \"\"\" \tgroups = [(items.count(x), x) for x in set(items)] return sorted(groups, reverse=True) def unzip(pairs): return zip(*pairs) Another possibility - even more concise but less explicit: def hand_rank(hand): \tgroups = group(['--23456789TJQKA'.index(r) for r,s in hand]) counts, ranks = unzip(groups) if ranks == (14, 5, 4, 3, 2): ranks = (5,4,3,2,1) straight = len(ranks) == 5 and max(ranks)-min(ranks) == 4 flush = len(set([s for r,s in hand])) == 1 return max(count_rankings[counts], 4*straight + 5*flush), ranks count_rankings = {(5,):10, (4,7):7, (3,2):6, (3,1,1):3, (2,2,1):2, (2,1,1,1):1, (1,1,1,1,1):0} I prefer the first explicit version. Lessons Learned Understand the problem Define pieces of the problem Reuse pieces of code already existing Test along the way Explore the design space (4 dimensions) " }, { "title": "大数据时代的陷阱，你掉过几回", "url": "/sinantang.github.io/pr-7/posts/lie-with-stats/", "categories": "Data Science, Book Review", "tags": "statistics", "date": "2017-10-21 23:31:06 +0200", "content": " 「There are three kinds of lies: lies, damn lies and statistics.」 . 大数据时代到来后，你会发现无数人（可能也包括你自己）都应时产生了一种“数据信仰”——信教者认为统计数据即为科学，大量数据背后暗藏了世间运行规律，漂亮流畅的数据表格PPT自带客观准确有深度的印戳。 . 虽然说对漂亮统计图表的盲信是普通人面对科学时不明觉厉的自然反应，可盲信恰好是科学精神的死敌。今天我们就来破除几个大数据时代的极度常见的盲信和陷阱。 . 你看到的数据可能被悄悄动了手脚 在所有造假行为中，数据造假可能是难度最低且最不易侦破的。 所有写过实验报告或学术论文的人都知道悄悄删掉几个不和谐的数据点是多么简单的事吧。每年新闻里都会有几起有名教授被爆论文造假事件；大学者如此，更别提造假压力没那么大的小研究员和受大企业赞助的研究项目了——当然，我并不是说所有论文都不靠谱，而是论文都有不靠谱的可能性，且非专业人士无法分辨这个可能性的大小。 对于普通受众来说，只要保持怀疑和独立思考，就已经具备绕开大多数据陷阱、在大数据时代生存下去的基本素养了。 . 数据没问题，可是产生数据的样本不靠谱 如果不是在闭门造车造假数据，那真实数据必然来自样本（sample）。除了极少见的情况下，有条件不加过滤地采集所有目标样本的数据（比如需要登门拜户的人口普查）；绝大多数时候，统计数据来自抽样调查——即在目标样本中随机选取一定小样本。 有代表性的抽样调查（representative sampling）关键就在于随机二字。但是在现实条件下，做到随机非常非常困难。 一方面，外部干扰条件太多，要做到随机可能会是件相当劳民伤财的事。 比如，当进行人口抽查时，理应每个地方都有相同比例的居民会被抽样，但面对十个交通便捷人口众多的城镇和一个人口稀少坐落于几千米高原之上的小山村时，时间资金有限的调查员，真的能做到为了小山村个位数的居民样本而严格遵循随机原则吗？ 这也是政治民意调查很少靠谱的原因。很多国家的媒体热衷于在新闻中展示近日民意调查结果，这类调查人数往往只有几百到数千，先不说如此小的样本是否真的具备数据意义，就算是只看媒体进行民意调查的方式，有一定概率常识的人也很难相信这种调查得出的结论——电视媒体进行民意调查的主要途径是家用座机。现在社会有多少人能通过座机联系到呢？这样的采样方式无疑与随机取样差了十万八千里。 . 第二，就算是非常简单的问卷调查，也总会有发出去收不回来的问卷。那一部分无回应的样本（non-response samples）却可能会完全改变调查的结论。 二战时，数据科学家 Abraham Wald 所在的研究组曾为英国海军的战机做过损失分析。当时从敌区飞回的飞机身上存在着这样分布的弹孔： 示意图来自 wikipedia 大家都认为应该加强弹孔密集的机翼、机尾区的材料强度，但 Wald 却提出，真正值得在意的是没留下什么弹孔的发动机和机身区域——因为被射中那儿的飞机当下就挂了，根本就没法飞回来供研究员检查！ 这是一个非常生动的幸存者偏差真实例证，也证明了无回应样本可能带来巨大误导。 这也是绝大多数人都会忽视的一项数据谬误。比如，我们总会把商品评论、网站电影评分当成有代表性的大众喜好，但实际上，对一部电影抱有越极端（超赞or烂到家了）看法的观众越可能有动力去网站评分、留影评，还有相当多的人不论好坏从不打分，也有少部分积极分子次次都要评分，而那些懒得去打分的观众就是无回应的样本——他们的真实看法可能会扭转现有的结论。 . 数据没问题，采样也没大问题，但数据本身无法推导出你以为的结论 「Numbers never lie, but liars use numbers.」 医药界的实验报告往往会在一堆图表后甩出“统计证明，某某新药可以降低3%患二型糖尿病的几率”的结论，媒体又会紧跟其后用充满冲击力的标题，将整篇论文化为一句不超10个字话传达给大众。不谈在传播的过程中可能产生的种种夸张失实，仅看医学论文本身，就足以体验到数据的陷阱。 手握数据的人总是告诉我们，降低了15%，增加了20%，普及率超过60%——可是有多少人知道这些百分数到底意味着什么？ . 比如，限枪在美国一直是个热议的话题，拥枪派喜欢强调的这么一个统计数据：在美国，任一年里，只有 0.2% 的私人武器用于暴力犯罪——听起来真的很少！ 可是如果再查一下美国民间枪支估计数目：300000000（别数啦，是3亿），做个简单乘法， 300,000,000 * 0.002 = 600,000! 美国每年有60万私人枪支出现在暴力犯罪中——现在，还会觉得 0.2% 是个特别小的数字吗？ . 记住：当你不知道真实数据是什么时，百分数很难说明什么。 . 数据、采样、结论看起来都没问题，但实验不符合基本科学逻辑 近几百年的科学发展留给人类最宝贵的财富是什么？不是蒸汽机电力互联网，而是科学研究方法论，因为这是所有的发明创新的起点。科学方法论的基本套路是： 观察现象 -&gt; 提出假设 -&gt; 设计实验 - 进行实验 - 验证或反驳假设 - 得出结论 这套方法论很多人在中学生物课上就接触到了，但这看起来清晰简单的科学逻辑却并不易掌握——不少受过高等教育的人其实也不理解科学方法论。 . 1992年，几个瑞典科学家在一项长达25年的跟踪实验中得出这样的结论：住在高压电线附近会增加四倍儿童患白血病的概率。这几位科学家是如何得出这个结论的呢？来看一下他们的实验设计： 找到生活在距高压电线300米内的所有居民，在接下来25年的时间里跟踪调查这些人，在列举了800种疾病的表格里逐年记录下每类病患的人数。 最后，科学家发现，与全国平均水平相比，这些住在高压电线附近的人群在儿童白血病的患病率上高出平均水平四倍！因此这些研究人员向政府呼吁重视这项严峻的健康问题。 . 但是，他们的研究从一开始就犯了一个错，导致这个花费25年得出的结论毫无意义。 你能找到他们的错误吗？ 如果你不能很快就发现错误的话，说明你其实并不理解科学方法论是怎么回事（很有可能也不太理解概率论）。 . 这项高压线影响健康的试验，犯了颠倒科学实验步骤的错误。 正确的科学实验步骤是先「提出假设」，再「设计、进行试验」，接着「验证或反驳假设」。而这项研究呢，却是跳过了「提出假设」的步骤，直接拿出一个包含了800项疾病的列表，企图在其中找到一项可能出现反常数据的选项。这就好比拿一大把飞镖随意扔向一面白墙，最后在飞镖位置最集中的几个地方自己画上靶—— 然后向没看到全部过程的人宣称自己是神枪手 :P 这类根据结果反提假设的现象被称为 Texas Sharpshooter Fallacy 德州神枪手谬误 . 小结 人脑并非为理解数字啦统计啦这些东西而设计的，这点在旧博文《工程师的脑子和普通人不一样》中已有所阐述。 . 人理解统计数据的难度至少存在三层： 第一，数据造假非常容易，但作为普通读者分辨起来却无比困难； 第二，就算数据是真实可靠的，还可能在采样过程中、分析理解数据时、设计试验中犯各种有心或无意的错误； 第三，就算所有技术性问题都被消灭了，面对真实可靠的数据与合理权威的推论，接收者却不一定能客观地分析乃至接受。因为，我们倾向于相信自己本来就相信的事物（confirmation bias）。 否则，为什么世界各地还有不少人认为地球是平的呢。 " }, { "title": "条件控制、代码块、错误与异常 | 写给小白的工程师入门", "url": "/sinantang.github.io/pr-7/posts/python-control-flow/", "categories": "A Developer Guide for Newbies - Starting with Python", "tags": "developer, programming, python, newbie, control flow", "date": "2017-10-12 23:31:06 +0200", "content": " 这一节的目标是写出一个能执行条件控制的 Python 短程序！在这个过程中，你会学到如何正确地写出 Python 代码块，如何优雅地写注释，如何冷静地应对错误与异常，以及什么才是专业优美的 Python 代码风格。 . A. 代码块与注释 代码块 Code block 代码块是一组由代码构成的功能“单元”。一个代码块可以单独运行。比如一个函数（function）或一个类（class）定义、一个模块（module）都是代码块，例如： def print_parity(x): \tif x % 2 == 0: \t\tprint(x, \"is even\") \telse: \t\tprint(x, \"is odd\") 这是一个函数定义（function definition），这个函数可以用来查询某个输入数字的奇偶性。这个函数就是一个代码块儿，能单独运行，多行语句共同实现一个功能。 . 行与缩进 Indentation 为了能让编译器或解释器准确地把一堆代码划分到各自独立的代码块中去，不同的编程语言有不同的方法。很多编程语言利用大括号 {} 围起一个代码块，还有语言只用分号 ; 来表示一句语句的结束。Python 很特别，以强制缩进（indentation）表示代码块归属。 缩进可以用 tab 键或空格缩进，但同一脚本中不能混用（虽然你肉眼看不出到底按了 tab 还是空格，但 Python 解释器看得见……）。习惯上一个缩进单位为4个空格，一般 tab 键会默认4个空格的长度。如果用 PyCharm 这类 IDE 编程，一般不需要特别操心缩进混用或长度问题；但如果用单独的文本编辑器，如 notepad++、TextMate 这些，就得在偏好里勾上类似”replace tabs as spaces”的设置选项，否则特别容易报错。 那什么时候需要缩进呢？简单来说，在 Python 代码里看到冒号 : 时就说明这个语句（statement）还没说完，还有下个语句，此时后面的语句若另起一行就必须缩进。比如上面 print_parity 这个函数定义里就出现了3个冒号，而每个冒号紧跟着的下一句都缩进了。 由于缩进方式或长度不统一而导致运行错误，会在报错信息里看到 IndentationError 的提示。 关于更多运行 Python 可能出现的错误与异常，在本节后半部分会专门细说。 . 空行 专门把空行拎出来，是因为空行也是一枚好程序的一部分。在函数定义（function definition）、类定义（class definition）代码块之间一般空1-3行，具体是1行还是3行主要看代码块之间的逻辑关系。在 PyCharm IDE 中，编辑器会提示如何空行。 . 注释 Comments 注释不仅是为了向所有可能看到你代码的人间接解释你的程序在干嘛，更为了让你自己将来回顾时还能理解自己曾写过的代码。因此，注释的基本原则就是只简洁地解释那些其他程序员可能看不懂或要停下来思考半天才能理解的代码。 . Python 中注释分两大类：单行注释与多行注释。 单行注释以 # 开头，如： # calculate the area of a square square_side = 2.0 square_area = square_side ** 2 print(square_area) 多行注释则以三对单引号 ‘’‘ 或三对双引号 “”“ 将注释内容括起来，如： def square_area(side): \t”“” \treturns the area of a square. :param side: length of one side of the sqaure \t“”“ \tarea = side * 2 \treturn area 多行注释多用于像上面例子中函数定义中，用于解释某个函数的目的。 . 细心读者也许会发现在上面的两个注释举例中，尤其是第一个单行注释例子，注释本身显得很多余，因为变量名已经足够清楚准确——这就是好的编程风格（programming style）；与其费时间专门为变量名注释一大堆，不如一开始就起个更清晰易懂的名称。 关于编程风格，我还会在本节末尾多说几句。 . . B. 流程控制之条件语句 流程控制 Flow control 小学时，一次暑假作业集（那时叫《暑假园地》）上面有道题，我至今依然记得。 题目是一幅漫画，画了“小白”一人在家的画面。勤劳的小白同学需要做： 扫地，用时30min 烧热水，用时10min 洒水，用时10min （用热水）热牛奶，用时10min 把脏衣服放进洗衣机，洗衣程序需要90min 晾衣服，用时20min 擦桌子，用时15min 给花浇水，用时5min 你需要在完成所有任务的前提下，给小白安排一个用时最短的流程。 我之所以一直记得这道小学题目，是因为在之后的很多场景下，我都联想到过这个简单的流程题。当我刚接触到编程的基础思想时（在中学数学课上学画流程图），一拍脑袋，这不就是小学的任务流程题嘛！ 其实从宏观角度来看，流程控制就是编程的中心议题之一。为了实现一个或一组功能，一个程序需要完成若干个小任务。有些任务像给花浇水和擦桌子一样无所谓先后，但有些任务之间存在着必须“先洗衣服才能晾衣”这样的先后次序，还有些任务像烧热水一样可以和其他任务“并联”，默默像背景音乐一样运行。这样的流程控制在 Python 中可以依靠很多工具实现，条件语句就是其中一种。 . 条件控制 我们已经在上文求奇偶性的函数定义例子中见过条件控制语句（conditional statement）了，再来看一个例子： def compare(x, y): \tif x &lt; y: \tprint(x, \"is less than\", y) \telif x &gt; y: \t\tprint(x, \"is greater than\", y) \telse: \tprint(x, \"and\", y, \"are equal\") 这是个比较两个输入值（不一定是数字）的函数。比较两个值（x &amp; y）的结论只可能在这三个中挑一个：x &lt; y，x &gt; y 或 x = y。查询一个数字奇偶性的函数也类似，一个数字只可能在奇数或偶数中挑一个归属，不存在其他可能性。当遇到这样的情景时，就适合用条件控制来表达。 . 从这两个例子中，我们可以抽象出条件控制语句的一般形式： if condition_1: \tstatement_block_1 elif condition_2: \tstatement_block_2 else: \tstatement_block_3 这里出现了三个 Python 关键词：if／elif／else，elif 是 else if 的缩写，即除了 if 以外的条件。当解释器走到这儿时， 先查看 if 语句的条件（condition_1）是否满足，如果满足（即为True），便执行 statement_block_1，并直接跳过后面所有 elif／else 语句块； 若不满足 condition_1，再判断 elif 语句中的 condition_2 是否为 True； 若 condition_2 为 True，则执行 statement_block_2； 若 condition_2 为 False，就执行 else 语句下的 statement_block_3. 三个条件语句分支（branching）并不非得同时存在，比如求奇偶性的例子就只有 if／else，if 语句块也可单独存在；还可以有三个以上的条件，此时可以多次利用 elif 语句块。 注意：每个条件语句（if／elif／else statement）后都要加冒号 : ，冒号后的语句（或者也可以称为子句 clause）若另起一行则需要缩进；else 语句块必须放在末尾。 . 描述再多也不如一张图直观，多个条件控制语句的代码块可以用这个流程图来表示链式条件 (chained conditionals) ——即一连串彼此平行的条件语句块： 思考时间：上面已经给出了如何比较两个输入值的函数定义，那么如果要比较三个输入值呢 (为简化问题，假设这三个输入值互不相同) ？你会怎样设计这个条件控制代码块的结构？可以先画一画流程图。 . 这个问题可以先倒着思考，比较两个值一共只有三种结果，那比较三个不同的值可能出现几种结果呢？ . 我提供一种典型思路： def compare(x, y, z): \tif x &gt; y: \t\tif y &gt; z: \tprint(\"x &gt; y &gt; z\") elif z &gt; x: \tprint(\"z &gt; x &gt; y\") else: \tprint(\"x &gt; z &gt; y\") \telse: \t\tif x &gt; z: \t\t\tprint(\"y &gt; x &gt; z\") \t\telif z &gt; y: \t\t\tprint(\"z &gt; y &gt; x\") \t\telse: \t\t\tprint(\"y &gt; z &gt; x\") 在这个函数定义中，条件控制语句似乎更复杂了。在第一个 if 语句后，又套了一个 if／elif／else 语句块；在第一层的 else 语句后，也套了个新的 if／elif／else 语句块。像这样多层条件语句块，被称为嵌套条件（nested conditionals）。这个例子只嵌套了两层条件语句块，但实际上可以多层嵌套。 嵌套条件的流程图可以是这样： 仔细观察的话，会发现嵌套条件的流程图与链式条件的差别在于：嵌套条件里至少有一个判断为 True 的分支下，会再加一个条件判断菱形。 . . C. 错误与异常 当你开始学习编程后，最不陌生的反馈应该就是来自计算机的报错信息（error message）。看到报错没什么可紧张的，就算是经验丰富的程序员，也不太可能一次就把一个程序毫无错误地从头写到底。报错信息只是 Python 想要温柔地告诉你哪里出了问题的方式 :) 在看懂报错信息前，我们首先要了解下在 Python 编程中可能会出现什么错误。 第一大类错误是语法错误（syntactic errors），新手最易犯，即写出一些 Python 语法不允许的表达式（illegal expressions），比如忘记加冒号、忘记缩进等。出现语法错误的代码不能通过编译。好消息是 Python 语法分析器会帮你找出所有语法错误，并以 SyntaxError: 的信息来提示你具体错误在哪里，比如： &gt;&gt;&gt; print \"abc\" File \"&lt;stdin&gt;\", line 1 print \"a\" \t\t ^ SyntaxError: Missing parentheses in call to 'print' 这条报错信息就非常清楚地告诉我：1. 是语法错误；2. 具体错误是没给 print 加括号；3. 出错位置在第一行（向上尖箭头指着检查出错的具体位置，但这个指示不表示错误仅在尖箭头处出现，还可能在附近）。 . 当语法正确时，还可能出现语义错误（semantic errors）。语义错误指的是代码的含义出了点问题。 语义分为两大类： 静态语义（static semantics）: 如，这句代码是否有意义； 全语义（full semantics）: 这个程序的目的是什么？会生成什么结果？ 静态语义错误也叫异常（exception）或运行时错误（runtime error），Python 会在运行时帮忙判断一部分静态语义错误，以 Traceback 的形式返回报错信息。这里示范两个静态语义错误： &gt;&gt;&gt; a + 2 Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt; NameError: name 'a' is not defined &gt;&gt;&gt; a = '3' &gt;&gt;&gt; a + 2 Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt; TypeError: must be str, not int 这两条 Traceback 指出了异常的类型：分别是 NameError 和 TypeError；还告诉了出错的位置。 为什么会报异常呢？因为 Python 解释器不能理解代码的含义是什么：第一条，变量 a 没赋值；第二条，字符串与整型不能相加 (相加无意义)。 . 全语义的错误 Python 就无能为力了。因此有时就算你写的程序可以正常运行，也吐出一些似乎正常的结果了，也不代表这个程序就没有任何错误。 为了减少编程中可能产生的错误（bug），降低后期捉虫（debug）的时间，学会一套专业优雅的编程风格绝对是必要的。 . . D. Develop Good Style 风格指南 说到底，所谓风格就是编程习惯；好的编程风格不仅让你看起来更专业，还能让你的代码更易于维护，编程时心情也更愉悦 :) 在现阶段已经可以依样画瓢遵循的风格指南有： 写好注释，让自己一年后也依然能读懂这段代码； 取有意义的变量名，让业内人士一眼能看懂这个变量代指的含义； 合理空格； 不要随意改变变量的类型（type）； 测试一个代码块中的所有分支（branch），确保每个分支都有结果（fruitful）。 还有更多更多写出优美代码的 Python 编程准则，在今后的教程中还会不定时地继续插入更多。 . . 第5节 作业 阅读 Think Python: How to Think Like a Computer Scientist (2nd Ed) Chapter 5.1-5.7 完成 Think Python Chapter 5 课后习题 5.2.1, 5,3,1. . 第5节 小结 这一节的重点是学会写条件控制代码块。此外，我们初步读懂了各种语法、语义报错信息，还初步建立了对优雅 Python 编程风格的印象。已经可以用 Python 代码来表达更多想法了呢！ " }, { "title": "来自高文明的人，总在做低文明人认为浪费的事", "url": "/sinantang.github.io/pr-7/posts/spoiling/", "categories": "Book Review", "tags": "books", "date": "2017-09-29 00:00:00 +0200", "content": "最近在读 ⎡Hackers and Painters ⎦(《黑客与画家》)，在讲到编程语言的发展时，作者 Paul Graham 说了这样一段话， “不仅编程语言有这种现象，这实际上是一种普遍的历史趋势。随着技术的发展，每一代人都在做上一代人觉得很浪费的事。三十年前的人要是看到我们今天如此随意地使用长途电话，一定会感到震惊。100年前的人要是看到一个普通的包裹竟然也能享受一天内从波士顿发件，途径孟菲斯、抵达纽约的待遇，恐怕就要更震惊了。” （p.159） 读罢我忍不住哈哈大笑。虽然作者在这儿谈论的是技术发展推动了人们对“浪费”的观念改变，但若把表面上代际间的差距换成不同文明程度的人的三观差距，似乎就更接近真相了—— 来自高文明的人，总是在做低文明人认为浪费的事。 . 身边这样的观念冲突可太多啦。 曾在微博上看到一帖子，一男生控诉女朋友每次洗澡“长达”半小时太浪费水。这个男生说自己并不是心疼水电费（这我信，因为洗澡用掉的水电没几个钱），而是坚决认定超过五分钟的澡就是浪费水资源，而浪费是可耻的，因为世界上有很多人还喝不上干净的水。女生则是认为并不是浪费，因为她使用了那些热水并且很享受每次半小时的放松时光。 另一常见的冲突出现在饭桌上。很多人尤其是长辈会拿把碗里的最后一粒饭吃干净来要求桌上所有人，不管那桌的饭量有多少，否则就是浪费粮食，严重点儿的要上升到“浪费就是犯罪”的高度（毕竟毛主席的教导“贪污和浪费是极大的犯罪”还依然掷地有声）。但我向来只吃到七八分饱就停下筷子，也许刚好吃完所有饭菜，也许还会剩一些，但不管什么场合也不会继续再吃下去了——节制自己只吃掉最利于健康的饭量才是最大的不浪费；否则，一次两次撑得难受、以致耽误学习工作和心情难道不是更大的浪费么？长期吃太多长胖了再反过来减肥不是更不健康么？ . 在看待什么才是物质浪费这件事上，产生冲突的关键在于你认为什么才是行为的目的——即，洗澡是为了让人干净舒服呢，还是为了遵守某个用水量指标？吃饭是为了让人健康舒适地填饱肚子呢，还是为了把所有桌上的食物都扫荡干净？在物资匮乏的年代（较低文明），并没有足够的物质基础来照顾人的健康与心理需求，所以必然首先会要求不要浪费物资。但在物资充裕的年代（较高文明），人已经有条件成为行为的目的了——比起物资，首先不要浪费人（的需求）才是最重要的。毕竟，为人所用的物资也是由人创造出来的，不去好好使用就失去了最初劳动的目的。 . 如果说在物质的浪费观念上不同文明阵营的人还有可能尝试理解对方，在更深层的人生观上不同文明阵营的人几乎没可能真正理解彼此了。 比如，我上次回国时曾趁假期去学日语，主要是出于从小到大对日剧和日本小说的浓厚兴趣。我爸当时充满疑虑地问我，“学这个有什么用？”言外之意就是只因兴趣去学日语这件事很浪费时间／精力／金钱呗！对于像我爸一样在物质匮乏年代长大的人来说，也许不带任何功利心地去做一件事是极大的奢侈，毕竟仅忙着生存就并非易事。 我虽然可以接受⎡仅出于兴趣毫无功利心地去做一件事⎦这种生活态度，但我也有自己无法理解的生活方式。比如，虽然已经在欧洲学习生活了四年，但我还是无法理解欧洲人的“悠闲”人生态度，就像我爸不能理解我学日语这件事一样。在英国大学里，我不能理解孩子都已成人的单亲妈妈为了寻求职业发展却选择读英语语言学的英国人，也不太理解一边控诉政府大幅提高大学学费（但实际上英国学生基本都申请了助学贷款）一边夜夜尽情 party 的英国年轻人们；在德国大学里，我不能理解可以安心花上六七年读不完一个学位的德国人，还有抱怨工资太低但每月都要旅行度假的欧洲人…… . 但福利制度确实是高文明的体现。由于有政府为最坏的状况兜底，平民生活就有了一点底气，年轻人也更愿意追随兴趣和梦想去探索人生，而不是一离开家或学校后就陷入到谋生的焦虑和压力中去。这种环境中的平民生活幸福度肯定更高。 举个例子，一次，一个德国朋友跟我说他的朋友骑单车时摔了胳膊要打一个月的绷带，期间不能上班了。我当时的第一反应是：万一摔的更严重，更久不能工作的话，怎么生活啊（很多欧美人无储蓄习惯）。德国朋友笑了，说，医保会支付一切医疗费用，公司也会照常发工资啊，不可能趁员工受伤就把他开除了 :） . 我虽然无法完全理解也不太能接受欧洲人安心“浪费时光”的人生态度，同时也反对高福利社会，但却也非常偶尔地羡慕他们可以不焦虑地任性享受当下的样子。 " }, { "title": "用 Jekyll 在 GitHub 上搭建你的个人网站", "url": "/sinantang.github.io/pr-7/posts/building-your-own-static-site-using-jekyll/", "categories": "A Developer Guide for Newbies - Starting with Python", "tags": "developer, jekyll, github pages, newbie, markdown", "date": "2017-09-23 23:31:06 +0200", "content": "这是我面向小白写的 Python 编程教程的⎡加餐⎦。 . 引子 前段时间折腾几次后终于把我的个人博客站点搭建起来啦：SinanTang.github.io 因为有朋友来问，我就打算写个如何利用 Jekyll 在 GitHub 上搭建静态个人站点的小白教程。 . 先简单科普一下，Jekyll 是个简单的博客形态的静态站点生产工具，可以通过 Jekyll 来生成可发布的网站／博客。网站需要服务器来对外发布，可以选择在 GitHub Pages 上运行，利用 GitHub 服务器不仅方便追踪历史版本、迭代更新，而且完全免费。 提供与 Jekyll 类似服务的工具不止一个。我最开始尝试过 Hexo，但中途遇到一些麻烦没解决掉……无意间看到阳志平这篇《理想的写作环境：Git+Github+Markdown+Jekyll》，就转而投向 Jekyll 的怀抱了。 这也从侧面说明，对小白来说，一开始选择一门编程语言或工具入门时，最好考虑使用人数（即是否主流）这个因素，越主流网上的学习资源就越多，当你遇到问题时就更有可能搜索到解决方法。 . 至于为什么要搭建一个属于自己的个人网站，除了看起来有点炫酷外，对于有意在创作型领域（写作／摄影／绘画／编程等）发展的小伙伴来说，个人网站就是最好的个人作品集—— “作品会帮助你与第三方沟通。尤其是一些你在意，但不理解你的人。比如父母/亲友。在外在动机的人看来，作品是最重要的；但在内在动机的人看来，作品是水到渠成的结果。” ——阳志平 . 开始搭建个人网站 好啦，下面进入正题。 新建一个 GitHub 项目 首先你要有个 GitHub 帐号，同时最好已经熟悉了《用 Git 记录成长轨迹》这一节中的常见 Git 操作。 然后新建一个 GitHub repository（具体操作见第2节），将新 repo 命名为 USER-NAME.github.io。注意，这个名称的格式是固定的，有一点儿不同就没法用 GitHub 服务器来帮忙发布。USER-NAME 是你的用户名，即点击 GitHub 页面右上角个人头像时出现的名字（Signed in as USER-NAME）。 . 本地初始化一个 Jekyll 站点 安装 Git 和 Ruby 呼出 Terminal，确认本地已经安装好 Git 和 Ruby: # 若未安装 git，请回到第2节进行安装操作 git --version # 若未安装 ruby 或版本低于 2.1.0, 可以跟着下面的操作来安装 ruby ruby --version 选做：安装 Ruby 2.3.1 \\curl -sSL https://get.rvm.io | bash -s stable # rvm 是 Ruby 的版本管理工具 rvm install 2.3.1 rvm use 2.3.1 # Terminal自己忙完后，再确认一下是否成功安装 ruby, rvm, gem ruby --version rvm --version gem --version . 安装 bundler 还是在 Terminal 中输入下面指令： gem install jekyll bundler . 创建你的本地 Jekyll 站点 继续输入： # 把 jekyll 站点建在 Public directory 下 cd ~/Public jekyll new USER-NAME.github.io cd USER-NAME.github.io bundle exec jekyll serve #1 以上几步都完成后，点击 ⌘T 开一个新 Terminal tab，输入： open https://localhost:4000 #2 或者也可以直接打开浏览器，输入 localhost:4000。 此时你就可以在浏览器上看到网站的初始模样啦。以后每次你做了修改后，想要预览改动时，就可以在 Terminal 中依次输入 #1 #2 这两步（注意要先 cd 到目标路径哦）。 退出预览模式，在 Terminal 内键盘点击 ⌤C。 . 初始化本地站点并发布 在 USER-NAME.github.io 目录下，在 Terminal 中继续输入： git init git status git add . git commit -m \"initial commit\" # 从最开始创建的新GitHub repo页面，复制项目网址，粘贴到下面网址部分 git remote add origin https://github.com/USER-NAME/USER-NAME.github.io.git git push -u origin master 在输入以上最后一条指令后，也许会出现 fatal: unable to access 'https://github.com/USER-NAME/USER-NAME.github.io.git': The requested URL returned error: 403 这样的错误信息，这是权限的问题，可以尝试输入以下指令来解决： git remote set-url origin https://USER-NAME@github.com/USER-NAME/USER-NAME.github.io.git # 检查刚刚输入的那串url是否在这儿出现了 git remote -v # 重新 push 一次，此时需要输入你的GitHub账号密码 git push -u origin master # 确认刚刚提交的改动是否出现在日志里 git log . 阶段性成果 现在你可以去浏览器里输入 USER-NAME.github.io 查看自己的刚刚发布的网站啦！此时别人也可以通过你的个性化域名来访问你的个人网站了。 . . 接下来…… 经过以上几步后，我们已经有了一个个人网站的雏形，接下来还要换名字、换主题、添加目录等页面……不过最重要的是，应该学会发布内容到网站。 其实发布内容（如文章）到个人网站的操作与之前第2节《用 Git 记录成长轨迹》中重点讲解的 add-commit-push 提交改动三部曲差不多，只不过需要用 Markdown 格式来书写文章。 Markdown 编辑器强烈推荐简洁轻便的 Typora . 换主题、添加更多页面等琐碎操作教程就不在这篇详述了。有搞不定的地方欢迎读者留言，我可能会根据反馈写新的《搭建个人网站 - 进阶篇》！ " }, { "title": "数据类型、运算符、变量 | 写给小白的工程师入门", "url": "/sinantang.github.io/pr-7/posts/data-structures-operator-variables/", "categories": "A Developer Guide for Newbies - Starting with Python", "tags": "developer, programming, python, newbie", "date": "2017-09-17 23:31:06 +0200", "content": "从这一节开始，我们将进入正式的 Python 学习。绝大多数网上编程教程都直接从这一节的内容开始，我之所以选择在前面铺垫那么久，一是遵循人脑的自然学习规律——在猛扎进细节中前先建立对大画面的认知理解；二是作为走过这条自学路的人，我会希望当初的自己也得到过这样的指点。 在具体内容前，重复两条很多人都说过的学习编程最好的方式： 跟着教程或源码敲代码，出错了可以立即得到反馈，甚至应该故意实验一些可能出错的指令，可以获得最佳编程学习效果。学习时故意出些错总比未来在一堆代码里无意中埋下 bug 好久解决不掉要好得多。 关键概念记英文原版。中文只是翻译参考。 程序是什么 在上一节《工程师的脑子和普通人不一样》中，我曾把程序员比做写菜谱的人，计算机只是个规规矩矩炒菜的，一个程序就像一份菜谱，算法其实就是那份菜谱里描述做菜的步骤……还可以再学一个更专业抽象的说法：程序即为执行一次计算的一系列指令。 Program: a sequence of instructions that specifies how to perform a computation. 这里的指令指的是什么呢？ 用任一程序语言写的任一程序，都完全可以只由以下五种指令组成： 输入 input 输出 output 数学计算 math 条件控制 conditional execution 重复 repetition 只要掌握这五类指令，就可以写出任何程序——其实很好理解，虽然菜的品类无数，但并不存在煎炸烤炒炖煮拌不能搞定的菜。 . . 值与类型 Value 值 值即为在编程中所用数据的基本单位。主要包括两大类：数字 (number) 与字符串 (string)。 数字进一步可以分为3种类型（还有一类复数，但很少用到，此处不提）： 整型 (integer)，即整数，如 4, 7, 101 浮点型 (floating point)，即带小数点的数字，如 2.5, 5.0, 3.14 布尔值 (boolean)，说是数字其实更像逻辑数据类型，只包括 True/False 两个值（书写固定，开头大写）；但可以和其他数字一起进行数学运算，此时 True = 1, False = 0. 字符串是一串由引号（单引号或双引号皆可，但同一对引号需统一单双）围起的字符，如 \"xiaobai\", \"666\", \"小 白\" 。注意，a. 当数字加上引号时就成字符串了，不再具备数字值的特性了（比如可以进行数学运算）；b. 引号内可加空格可加标点，都可以构成字符串的一部分。 . Type 类型 类型是值的分类 (理解成值的属性也行)。我们在上面已经看到 Python 几大基本类型的一部分了：整型、浮点型、布尔值与字符串。想要知道某个值或变量（下面会讲到）的类型，可以用内置 type() 函数来问 Python: &gt;&gt;&gt; type(666) &lt;class 'int'&gt; &gt;&gt;&gt; type(\"666\") &lt;class 'str'&gt; &gt;&gt;&gt; type(3.1415926) &lt;class 'float'&gt; &gt;&gt;&gt; type(True) &lt;class 'bool'&gt; 在后面几节我们还会接着学习列表 (list)、元组 (tuple)、字典 (dictionary)、集合 (set) 等更多类型。 . . 运算符 Python 中的运算符 (operator) 主要用在数学运算上，和通用的算术运算符号大体相同。被运算符连接的值可称为运算数 (operand)。 在这儿通过交互模式来看一下用法： &gt;&gt;&gt; 3 + 5 8 &gt;&gt;&gt; 3.0 + 5 #当一个运算数为浮点时，结果也会变成浮点 8.0 &gt;&gt;&gt; 1.0 + True #还记得刚刚说的布尔值的数值吗 2.0 &gt;&gt;&gt; 9 - 2 7 &gt;&gt;&gt; 2.5 * 5 #乘积 12.5 &gt;&gt;&gt; 2**3 #指数运算 8 &gt;&gt;&gt; 3 / 5 #除法 0.6 &gt;&gt;&gt; 3 // 5 #除法，只计整数部分 0 &gt;&gt;&gt; 3 % 5 #3除以5所剩余数 3 . 除了用在数字上，有两个运算符还可以用在字符串上：+, *. 猜一猜加号和乘号会在字符串上产生什么效果呢？ &gt;&gt;&gt; 'Sinan' + 'Talk' 'SinanTalk' &gt;&gt;&gt; 'Hello' * 3 'HelloHelloHello' 通过 + 将多个字符串顺序连接起来的操作被称为字串串接 (string concatenation)，非常常用；通过 * 把一个字符串复制多次的操作倒没什么专用说法 (可以称为 string multiplication)，用的不多，不过需要注意字符串只能与整型相乘，字符串之间不能相乘。 像这样，一个运算符可以同时用于一个以上数据类型 (type) 的现象被称为重载 (overloading)。比如， + 可以同时用在数字和字符串上。并不是所有编程语言都支持运算符的重载。除了运算符，之后我们还会接触到函数重载 (function overloading)。 . 至于有多个运算符同时存在时该遵从什么运算顺序的问题，和数学计算相同。不确定的时候就用括号明确优先级即可。 . . 变量 光有值还不够用，我们还需要变量 (variable)。变量自身不能单独存在。变量用来存储、命名值，是其代表的一个值的名字。当我们给变量赋值时，会用到赋值语句 (assignment statement)： # 赋值语句用'='进行赋值，此处'='与算术中相等的概念不同，含义上更像'&lt;-'右指箭头 a = 5 b = 2.0 c = 'Python' d = True # 这个赋值语句能更清楚看到赋值'='并非算术中的等号，而是'&lt;-'右指箭头，将'='右边的值赋给'='左边的变量 a = a + 5 print(a) # 输出结果：10 关于 Python 中变量与值的关系，我没见过比 David Goodger 讲得更好的了，此处就借用下他的例子和插图吧。 Python 中的变量就像是其绑定的值的姓名标签。如，当给变量 a 赋值 1 时，a = 1，1 这个整数就绑了 a 的标签， 并且 1 会在内存里占一个位置： 当你重新给 a 赋新值 2 时，a = 2，就等于把这个标签移到 2 身上了，2 此时也会在内存里占一个位置： 此时你无法再通过 a 来找到 1 了。如果 1 没有绑定任何其他标签（变量）的话，那 1 就不会再在内存里占位置了。 如果你创建一个新变量 b，并用 a 来给 b 赋值，其实等同于在 2 身上绑了两个姓名标签，通过 a 或 b 都可以找到 2: 并不是所有编程语言里的变量都是值的“姓名标签”。 . 变量的命名 Python 变量命名的规则不复杂，可以是： 字母组合，如 a, foo, val, counter 字母与数字组合，如 dict1, list2 可以加下划线，如 is_even, max_val2 但不能以数字开头 习惯性以小写字母命名 不可以用 Python 保留字／关键字 (keywords) 来命名变量 Python 保留字／关键字都有哪些呢？可以在交互模式下输入： # to see the Python keyword list &gt;&gt;&gt; import keyword &gt;&gt;&gt; keyword.kwlist ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] 当你在文本编辑器或 IDE 中编程时，Python 保留字会自动呈现不同的颜色，所以一开始也不用背保留字列表。每个保留字都非常常用，之后很快会在实践中熟悉。 . 虽然变量命名并不复杂，但这不仅关系到 style，还关系到代码的易读性，因此最好起个易懂易记易区分并符合逻辑的名字，比如，我给字符串 \"SinanTalk\" 起名的话，明显 blog_name 比 foo 要合理得多。 . . 表达式与语句 Python 表达式 (expression) 是值、变量与运算符的组合。一个值或变量本身也可以构成一个表达式。 Expressions: a combination of values, variables and operators. 刚开始接触 Python 编程的新手可能都遇到过这个困惑，为什么有些代码可以在交互式编程 (interactive programming) 模式下直接返回结果，但脚本式编程 (script programming) 时就不会返回结果呢？这其实是 Python 表达式在解释器 (interpreter) 中的不同行为。当你在解释器的提示符 (prompt) ——就是尖箭头 &gt;&gt;&gt; ——处输入一个表达式时，解释器会在回车后求得表达式的值并返回，如： &gt;&gt;&gt; 1 1 &gt;&gt;&gt; 5 + 2 7 &gt;&gt;&gt; a = 3.14 &gt;&gt;&gt; a 3.14 &gt;&gt;&gt; a + 10 13.14 在脚本模式下运行，虽然解释器也会对表达式求值 (evaluate)，但并不会返回结果。 在上面几个简单例子中，唯一没有即时返回结果的就是 a = 3.14，因为这并非表达式，而是一个 Python 语句。 . Python 语句 (statement) 是一组有效力的代码块。 Statement: a unit of code that has an effect. 目前为止我们已经遇到过的语句有： 赋值语句 (assignment statement)：创建新变量并赋予一个值。 输出语句 (print statement)：输出一个值。 解释器不会对语句求值，而是直接执行 (executes) 一个指令。 今后我们还会接触更多 Python 语句。 . . 第4节 作业 阅读 Think Python (2nd edition) 第1&amp;2章，并完成文后练习。 Think Python: How to Think Like a Computer Scientist 是小白学习 Python 的最佳入门书（不是我评价的，而是很多大佬推荐），第2版面向 Python3。英文原版并不难懂。 . 第4节 小结 我们在这一节进入 Python 编程知识的正题，先介绍了一些基本的编程概念：值与类型、运算符、变量、表达式与语句。虽然已经能写简单的赋值语句和输出语句，进行数学运算了，但还不会用 Python 来表达更复杂的程序逻辑，下节课我们将开始学习条件控制和更多编程基础概念。 " }, { "title": "Variable shadowing inside functions in Python", "url": "/sinantang.github.io/pr-7/posts/variable-shadowing/", "categories": "Python Tips", "tags": "developer, programming, python, variable shadowing", "date": "2017-09-12 23:31:06 +0200", "content": "I ran into this confusing Python scoping behaviour when attempting Problem Set 7 of MIT600 (2008 Fall). Specifically, in the following examples, the first function doesn’t modify the global variables passed into it, while the second function does modify the global variable. def swap(s1, s2): assert type(s1) == list and type(s2) == list tmp = s1[:] s1 = s2[:] s2 = tmp return s1 = [1] s2 = [2] swap(s1, s2) print(s1, s2) # output: [1] [2] So why is that? Isn’t the fucntion swap() supposed to swapped the value in lists s1 and s2 ? def rev(s): assert type(s) == list for i in range(len(s)//2): tmp = s[i] s[i] = s[-(i+1)] s[-(i+1)] = tmp s = [1, 2, 3, 4] rev(s) print(s) # output: [4, 3, 2, 1] And in the second function, the list s got passed into rev() and s is reversed after running the whole block of codes. That’s the issue of scoping in Python. In the first function swap(), although the parameters s1 &amp; s2 share the same name with the two global variables, when you feed the global variable s1 &amp; s2 into swap(), it’s not modifying the global variables. Instead, the assignment statement s1 = s2[:] indicates that it is declaring a new local variable with the same name as s1 . The global variables got left aside. That’s why when you try to print(s1, s2) , the program spits the untouched lists back. have a look at the visualisation of this function and get more intuistive sense of what’s happening Wait — the second function seems similar but does modify the global varaible s fed into the function? If you really understand why function swap() behaves in that way, you would know why rev() is doing different thing: because the parameter s is not declared locally ( = inside the scope of this function), so it assumes the global s and subsequently modifies that. have a look at the visualisation of this function and get more intuistive sense of what’s happening To describe it in jargon phrase, this kind of behaviour is called variable shadowing in programming. In computer programming, variable shadowing occurs when a variable declared within a certain scope (decision block, method, or inner class) has the same name as a variable declared in an outer scope. — Wikipedia This can be confusing and have costly side-effects in your code. " }, { "title": "计算机科学家的脑子和普通人不一样 - 学习全新的思考方式", "url": "/sinantang.github.io/pr-7/posts/computer-scientists-have-a-different-brain/", "categories": "A Developer Guide for Newbies - Starting with Python", "tags": "developer, programming, python, newbie, problem solving", "date": "2017-09-09 23:31:06 +0200", "content": "这是我面向小白写的 Python 编程教程的第三篇。拿勺子同学当小白鼠讲过一遍后，就把修改完的讲义发到⌈影子练习SinanTalk⌋上来啦。 如果你认可这篇教程的价值，欢迎分享到朋友圈，分享给更多人！有看不懂的地方也可以留言或者加我的个人微信（LynnTang_）问询。越多关注，作者就越多动力及时更新呐 😊 最近在读 Sapiens: A Brief History of Humankind (《人类简史》)，作者赫拉利说，书写系统的出现逐渐改变了人类思考问题的方式。大脑最擅长的自由联想与整体性思维（free association and holistic thought）在科学符号系统发明后开始逐步让位于局部思维与官僚主义（compartmentalisation and bureaucracy，此处官僚主义指用大量文件、流程来管理生活以及国家的方式）。 插图来自《人类简史》 正常人看到以上相对论的应用公式时都会瑟瑟发抖一秒并想要立刻逃开，如果你也有这种直觉，那说明——你是正常人类……但现代生活要求每个成年人都要懂得算术和一些科学知识——更别说还有你我这群试图写代码指挥电脑做事的不正常人类呢！学习另一套非自然语言（编程语言）的过程，的确是改造大脑的浩大工程。 Steve Jobs 的这句名言流传颇广。但我不完全同意他的观点：乔布斯这句话假设了人类在学习编程前并不会思考。但我认为，只是人类的天然思考方式与编程要求的思考方式不同，仅此而已。 所以，当你学了一门编程语言的语法和语义却不确定该如何使用，或者看代码示例似懂非懂但亲自实现一个功能就卡壳时，你要知道，这只是大脑还没被成功改造的信号。 这就是为什么在写完前两篇设置基础开发环境的教程后，我选择先写学习编程的目的和意义——先了解想要把大脑改造成什么样，再动手去改造——这样更符合人类大脑的天然学习习惯。 a. 计算与算法 什么是计算 (computation)？ 在讲什么是计算之前，我们先来看看另一个相关问题：什么是知识 (knowledge)？ 我们可以通过分类来认识知识。知识可以分成：陈述性知识（declarative knowledge）与过程性知识（imperative knowledge）。 陈述性知识：事实性陈述；比如，地球是圆的。 过程性知识：告诉你该如何进行推断的描述性知识；比如，如果你去海边望向远处，就会发现海天交接处的海平面并非一条直线，而是略带弧度，由此我们可以推断地球是圆的。 陈述性知识不会告诉你如何证明、推断出一个结论；而过程性知识就像菜谱一样，按123步骤走，你就能得出设定的结果。 毫无疑问，计算 (computation) 属于第二类过程性知识。你大可以把计算想象成实用的菜谱：软件工程师是发明菜谱的人，电脑只是个炒菜的…… 另一个计算机科学家常挂在嘴边的抽象术语，算法 (algorithm)，只要借助计算这个我们刚学的概念，其实并不难理解。很多人对算法打怵，很可能是把它想象成了上面那个相对论的应用公式了吧……当然，很多复杂的算法确实和高数紧密相关，但算法并不一定非要扯上高数。 简单地说，算法即为描述具体如何执行一次计算的方法。计算通过算法实现。或者说，算法就是计算的“套路”。 Algorithm - how to perform a computation. 具体来说，算法包含了指令（instructions），控制流程（flow of control），结束条件（termination condition）。 举个例子，我们都坐在马桶上读过洗发水的成分表和使用说明书吧？其中很短的几行“如何使用”就是洗发的算法： 打湿头发； 倒适量洗发水到手掌； 把洗发水抹在头发上； 按摩头皮，打出泡沫； 用清水冲洗头发； 若有需要，重复步骤 2 - 5。 这个算法的指令即为以上6步；控制流程可以理解为步骤之间的顺序，比如，步骤5肯定在步骤3之后，但步骤2可能会出现在步骤6之后；至于结束条件，严格来说这里并未给出——并没有一句指令明确告诉用户：“走到这步洗发就结束了”。 b. 学编程学的是什么？ 对于初学者来说，一开始新鲜语法（syntax）和计算机概念学习可能会占用大部分时间，但那些只是在学习 WHAT，任何肯下功夫的正常人都能学会；更重要的是，当你有了一堆“积木”后，该如何 (HOW) 把它们拼插成一座好用又好看的代码城堡（还记得 WHAT-HOW-WHY 思维框架吗？）。 不怕再多强调一句，在编程领域，掌握 HOW 比 WHAT 要重要得多！因为，编程的本质就在于解决问题（problem solving），只不过程序员通过编程语言借助计算机来解决问题（computational problem solving）。具备能与计算机“沟通”问题，借助计算机力量来执行解决方案的能力，就是我们常听到的“计算思维（computational thinking）”。 这么讲还是有些抽象，下面我来举个简单的数学例子，来近距离观察下计算思维的一个具体实现形式。 我想知道一个任意正实数 x 的平方根。只给你一张纸一支笔，你能给出一个可执行的解决方案吗？ . 。。。1分钟思考时间。。。 . 这里给出一个求平方根的经典“菜谱”： 先给出一个猜测 y； 如果 y*y 和 x 之间的差距足够小，那就可以说 y 是 x 的近似平方根，并结束计算； 否则，给出一个新的猜测 y2，使 y2 = ( y + x/y )/2，即 y 与 x/y 的平均数； 用这个 y2 替代 y，回到第2步。 相传，这个求平方根的算法是古希腊数学家希罗首先提出的。 先不去管该如何用 Python 实现以上算法，但这个解决方案给出了一个非常重要的算法思路：先猜测，再验证 (Guess and Check)。实际上，简单计算器就在用类似的算法思路求平方根（但不是这个具体的算法）。 image credit: PEXELS 某种程度来看，计算器和我们的个人电脑很相似。 只不过计算器只能运行特定程序，而且只接受特定输入（input）——我们称这类计算机为固定程序计算机（fixed-program computers）。最初的计算机都属于这类。比如，二战期间图灵设计的破密计算机，尽管体积非常庞大，但这台机器只能做唯一一件事，那就是破译德军的恩尼格玛（enigma code）。 The Bombe machine (Image Source: http://www.cryptomuseum.com) 而现代的个人电脑就强大太多了，可以用来算数，还可以运行各种各样的程序。这是因为，现代计算机不仅可以像计算器一样读取数据，还可以直接读取程序。这类计算机即为存储程序计算机（stored-program computers），或称为“通用计算机”。 c. 像计算机科学家一样思考 Think like a computer scientist ⌈好了，我知道计算思维很重要了，可是，“解决问题的能力”指的到底是什么？⌋ 所有问题的解决过程都可以归纳总结成以下3个步骤： 提出问题 to formulate problems； 思考解决方案，越多越好 to think creatively about solutions； 清晰准确地把最佳解决方案表达出来 to express a solution clearly and accurately。 上面求平方根的题目就是一个解决问题的实例。 计算机科学家一方面像自然科学家，观察现象、提出假设、进行测试；又像数学家，使用形式语言科学符号提出问题与解决方案；还像工程师，设计方案、组装方案、评估效果。 显然，”能够解决问题”并非一项计算机领域所独有的技能。但是，通过学习编程可以大大提高一个人解决问题的能力，不止由于可以求助计算机来解决一些问题，更因为通过解决无数问题而训练出的如何解决问题的逻辑思维方式会深深地刻在大脑皮层——这不就是所谓“改造大脑”吗？ 再举个常见的数学例子——如何用多种方法又好又快地证明质数也是程序员技术面试的常见题。 给出任意一个大于1的自然数 x，如何确定 x 是否是质数？给出一个可执行的算法。 . 。。。思考1分钟。。。 . 其中最直观最简单的一个算法或许就是“挨个试试能不能整除所有比 x 更小的正自然数”了吧。 质数的定义，“除1和它本身以外，不再有其他因数”。因此，除1和 x 以外，如果找到一个可以整除 x 的自然数，就能证明 x 不是质数，反之则为质数——那就从2开始到 (x - 1) 为止，用 x 去挨个除所有自然数呗（在 CS 里，这种“挨个测试”的方法被称为遍历 traversal）。 如果用笔去计算的话，当 s 大于2位数时，恐怕就没人想去动笔了……但计算机不一样，不管你喂给它多大的 x，只要承受得住就会任劳任怨地算下去，最终还你一个答案。 这句话不全对，计算机并不会完全接受所有程序。在 Python 程序中，有时你可能会不小心陷入无限循环中去；如果是递归方程，在递归深度超过1000左右时 Python 编译器就会报错并停止运行（“RuntimeError: maximum recursion depth exceeded” :) . 第3节 - 作业 仿照平方根的计算步骤，为遍历证明质数的算法写一个可执行步骤。 思考是否能改进上一题的算法，找到更优解（更优指完成计算所需的总步骤更少，少于从 2 到 (x - 1) 共 (x - 2) 步），试着完整地写出来。 你在麦当劳里点过麦乐鸡块吗？麦乐鸡块只有三种规格：6块／9块／20块每盒。如果有位消费者来到柜台前对点餐员说，我想要 xx 块麦乐鸡，你是否能快速告诉点餐员这个要求是否合理？合理即为可以用现有三种规格的麦乐鸡块的组合满足要求，比如，6块、15块、26块都是合理的，但10块就不合理。整理自己的思路，试着完整地写出验证步骤。（麦乐鸡问题 (McNuggets Problem) 是丢番图方程 (Diophantine equation) 的一个变形，有兴趣的可以去搜索更多相关资料） 第3节 - 小结 这一节我们从代码细节中暂时抽身，站在高处审视了一下计算机科学家这个物种——计算机科学家是数学家、自然科学家与工程师的结合体，对于计算机科学家来说，最重要的是技能是解决问题的能力。我们还通过几个例子体验了计算思维与算法，接下来我们就会开始学习怎样用 Python 实现这些算法。 " }, { "title": "用 Git 记录成长轨迹 | 写给小白的工程师入门", "url": "/sinantang.github.io/pr-7/posts/use-git-to-track-your-growth/", "categories": "A Developer Guide for Newbies - Starting with Python", "tags": "developer, programming, python, newbie, git, github", "date": "2017-09-04 23:31:06 +0200", "content": "这是我面向小白写的 Python 编程教程的第二篇。拿勺子同学当小白鼠讲过一遍后，就把修改完的讲义发到⌈影子练习SinanTalk⌋上来啦。 和勺子上课时，我意识到，不和新手交流的话，离出发点越远的人就越不可能记得自己当初学习笨拙的样子。但事实是：谁都是那样开始的。所以就算你要花几天时间才能完成这篇教程的内容，也不要觉得自己太笨太慢，毕竟每天都能进步一点点就已经很可贵了。 如果你认可这篇教程的价值，欢迎分享到朋友圈，分享给更多人！有看不懂的地方也可以留言或者加我的个人微信（LynnTang_）问询。越多关注，作者就越多动力及时更新呐 😊 a. Git 是什么？ 关于 Git，有这么一个浪漫的说法——“工程师的时光穿梭机”。 我以前在公司实习时，老板总会说，”Don’t worry. You won’t break anything (because we have git!).” 如此神奇的 Git 其实是一个版本控制（Version Control System, VCS）工具，可以用它来快速有效地管理成千上万个文件（不止是代码）的历史版本与进度。对于编程小白来说，Git 是个全新的概念，完全理解并掌握需要时间加练习，这篇教程就会带你完整走完“安装 - 设置 - 使用 Git”一条龙学习体验。 顺便提一句，“可以熟练使用 Git”是值得写在求职简历上的程序员技能哦！跟着这篇教程走几遍，完成课后作业，就可以让你的简历再添亮点。 b. 安装并设置 Git 运行环境 安装 Git 查看电脑是否已经提前安装了 Git，在 Terminal 中输入： git --version 若返回 git version xx.xx.x (xx代表数字) 则说明电脑已经安装 Git，否则就需要跟着下面几步先安装 Git，继续在 Terminal 内输入： brew install git # 这里假设读者已按第1节教程安装了 Homebrew，否则请返回第1节安装 brew link git 设置 Git 运行环境 第一步，先设置通用的用户名与邮箱（与你的 GitHub 账号信息相同）: git config --global user.name \"Sinan Tang\" # 注意引号 git config --global user.email tangsinan92@gmail.com 如果没问题的话，输入下面两行检查刚才的设置是否成功： git config user.name git config user.email 若返回了你输过的用户名与邮箱，则说明设置成功。 为什么要设置用户名与邮箱呢？为了今后每次你用 Git 提交改动 (commit) 时都会自动刻上你的个人信息，这个是无法改变的（指不能改变某次改动的作者，而非不能改变 Git 的用户名或邮箱）。 c. 利用 GitHub 创建永不丢失的个人作品集 什么是 GitHub？ 上面以非常简短的篇幅介绍完 Git 基本知识后，让我们再来看看 GitHub 与Git 的关系。 Git 是一个版本管理工具 (VCS tool)，可以在命令行（command line）使用，可以在许多 IDE 内使用（比如PyCharm），也可以在网站使用——这个网站即为 GitHub，是更加直观的 Git 操作界面（web-based Git）与项目托管网站。从这三种途径进行的操作大多数时候可以相互替代。我一般用命令行来运行 Git 指令——虽然对于新手来说命令行不如网站界面那么直观，但熟悉后会发现命令行比网站方便快捷很多。 有时 GitHub 这个名称会让人困惑，因为创建 Git 与 GitHub 网站的公司也叫 GitHub。并且 GitHub 这个名称常用来指代基于 GitHub 的开发者社区——一个工程师们的主流社交网站！ GitHub 值得聊的趣闻轶事太多，这里就不占用过多字数，先把正事搞定！ 为什么要提交代码到 GitHub？ 在讲具体操作前，来简单介绍下积极利用 GitHub 的好处。 有些IT公司招聘工程师时，会要应聘者的 GitHub 账号，目的是查看应聘者在 GitHub 上的真实贡献值 (contribution activity) 和参与项目。如果你不是很清楚那是什么的话，可以参考下面我之前实习参与公司项目不到五个月的贡献值截图： 中间像日历一样的灰网格区域即为我提交代码的贡献值记录，深浅不一的小绿块儿代表了代码提交次数——越深提交越多。因此，当别人看到你的 GitHub 个人主页时，就能一目了然看到从你加入 GitHub 之后每天的贡献值。 正因为 GitHub 上的贡献值记录很难造假，所以对于工程师来说，GitHub 才是最真实的个人简历（不过听说国内有些程序员为了求职会去 GitHub 提交假项目……sigh）。 ☺︎ 以下操作建立在读者已申请好一个 GitHub 账号的假设上——还没账号的请先去 https://github.com 申请哦! 创建 Git repository，克隆项目到本地 在上一节已经初步学会使用 PyCharm 的基础上，我们来看看如何在 PyCharm 中编程，并通过 Terminal 把代码改动提交到 Git 上。 安装了 PyCharm 后，会在电脑上自动生成一个文件夹叫 PycharmProjects，在 Finder 里找到它，在 Terminal 中打开。 要想在 Terminal 内打开某个文件夹，除了第1节提到过的“复制该文件夹 - 粘贴到 Terminal 内 cd 指令之后”之外，还可以： 设置快捷键：去往 System Preferences &gt; Keyboard &gt; Shortcuts &gt; Services &gt; Files and Folders，找到一个选项叫“New Terminal at Folder”，启用它并把后面的快捷键改成更顺手的键盘组合，比如我改成了 ⌃⌥⌘T (T for Terminal)。每次只要选中一个文件夹，再按 ⌃⌥⌘T 就可以很快在 Terminal 内打开啦！ 右键点击：当你启用了“New Terminal at Folder”后，可以右键点击一个文件夹，点击跳出菜单的最后一行“New Terminal at Folder” 直接用快捷键呼出 Terminal 的方法最快捷（= 最像工程师），推荐！ 然后在 Terminal 中输入： git init # init = initialise 初始化 这一步会在 PycharmProjects 内创建一个你看不到的文件夹 .git ，里面包含了所有你在本地使用 Git 的所需文件。 接下来，打开 GitHub 官网，登陆你的账户，在首页右下方有个窗口叫“Your repositories” (你的项目，有人翻译成“库”，但我觉得不如“项目”易于理解)，右边有个绿色按钮“New repository”，点开，在设置页面给这个项目取个名（Repository name），选择“Public”，选中”Initialize this repository with a README”，最后点击“Create repository”。这样你就拥有了自己的第一个 GitHub 项目！ 在新建项目的主页，找到页面右端一个写着“Clone or download”的绿色按钮，点开，复制其中自动生成的 https 地址。 现在回到刚才的 Terminal 中（依然在 PycharmProjects 的位置），输入： git clone https://github.com/SinanTang/xxxxx.git # 网址部分替换成你刚刚复制的地址，注意不要把这里的网址范例贴上 接下来等待 Terminal 内进度条完成的时间里，你可以去 PycharmProjects 文件夹中看一眼，应该会发现刚刚在 GitHub 新建的项目，已在这里出现了同名“克隆”文件夹——这个文件夹与 GitHub 上的 Repository 是一模一样的，你在本地修改文件夹内内容，提交后，就会自动同步到 GitHub 相关 Repo (repo = repository, 这是个极其常用的缩写) 上。 创建并本地化一个 GitHub repo 的方法不止这一个，但实践下来，我认为这是最有利于小白上手的方法。 用 IDE (PyCharm) 与命令行提交改动到 GitHub 现在用 Spotlight 呼出 PyCharm，出现的应该还是上一次随便玩玩的 project，点击上方任务栏 File &gt; New Project… &gt; Pure Python ，在 Location 一栏选中刚刚新建的项目名字，选择 Interpreter (即 Python 2.7 或 Python 3.6)，最后点击 Create. 顺利的话，此时窗口左侧已经变成新项目的名称了。按第1节里写过的新建 Python 脚本的方法，现在在此目录下新建一个 test.py，在空白脚本里写下这句我们现在已经非常熟悉了的： print(\"Hello World\") # Python 3.6 在 PyCharm 内敲击 ⌘9，下方会跳出 Version Control 框，在 Local Changes 这儿你能一眼看到自己改动／添加／删除了哪些文件。你还可以点第二个 Log 标签，猜猜这儿是用来展示什么的？答案一会儿揭晓。 现在回到 Terminal 内，确认已位于新项目的位置（需要cd到该项目），输入： git status # 查看目前的 git 状态 可能需要输入 GitHub 邮箱与密码。 接着会返回一堆信息，看看刚刚添加的 test.py 是不是也在其中呢？我们现在就来提交它。接着输入： git add -A # 把所有改动都添加到“暂存区” git commit -a -m \"initial commit\" # 提交所有暂存的改动，引号内填写此次提交的解释说明 git push origin master # 将改动推送到服务器 git log # 查看提交历史，如果成功会在这里看到 git status # 再次查看 git 状态，当所有改动都已推送到云端后，这里会出现“nothing to commit, working tree clean”的信息 第三步 git push 在第一次提交改动时或许会返回信息需要你单独设置些参数， 但以后一般情况下只需输入 git push 即可。 为了加深小白对 add / commit / push 提交改动三步曲的理解，我找到了下图—— ref：https://rogerdudler.github.io/git-guide/index.zh.html 现在回到 PyCharm 内，看下方 Local Changes 区是不是变成空白了？再点右边的 Log 标签，和刚刚不太一样了吧？是不是出现了一个名为”initial commit”的新“节点”，进度树向上生长了一节？ 再回到 GitHub 网站，你的新项目应该已经和本地改动同步了，你可以在这个 Repo 的 commits 页面看到你刚刚在 Terminal 进行的操作。 . 第2节 - 作业 拓展阅读：Pro Git book by Scott Chacon and Ben Straub (https://git-scm.com/book/en/v2) (推荐阅读英文书，不过页面也有中译本可选) 从 GitHub 体验官升级为真正用户：去 GitHub 主页，点击上方 Explore，在 Trending 里翻翻最近的流行项目与牛人。 有个 GitHub 项目专门帮工程师一键生成 GitHub 个人简历，你也可以去玩玩 (https://resume.github.io/)。虽然现在还没有东西可以展示，但将来总会有的嘛！ 第2节 - 小结 这节课我们简单了解了一种主流版本管理工具 Git 与工程师的社交网站 GitHub，创建了第一个 GitHub 项目，并使用 IDE 与命令行第一次提交了代码改动！一切都才刚刚开始。 " }, { "title": "写给小白的工程师入门 - 从 Python 开始", "url": "/sinantang.github.io/pr-7/posts/a-developer-guide-for-newbies/", "categories": "A Developer Guide for Newbies - Starting with Python", "tags": "developer, programming, python, newbie", "date": "2017-08-31 23:31:06 +0200", "content": "这是我面向小白写的 Python 编程教程的第一篇。本周三已经抓勺子同学上完了这节课，得到了很多珍贵反馈，于是我把讲义初版又修改了一遍，放到⌈影子练习SinanTalk⌋上来。 原本有想法招募一个 ⌈给小白的工程师入门 - 从Python开始⌋ 的在线学习实验小班，不为赚钱，只是想实践下自己的编程教学思路。但后来和勺子讨论过后，我也同意我的设想太过苛刻——我想找到大概率可以坚持学习 Python 编程一年及以上 ／ 有长期 (指一年以上) 目标 ／ 但无短期急功近利想法 的同行小伙伴们。我明白人群中一定存在着这样的人，可我的个人影响力尚小，也无太多精力可以用在这件“不务正业”的事上。于是，就决定只对勺子同学一对一授课，把每次修改过的讲义发到这儿来，供更多有心的读者参考。 如果你认可这篇教程的价值，欢迎分享到朋友圈，分享给更多人！有看不懂的地方也可以留言或者加我的个人微信（LynnTang_）问询。越多关注，作者就越多动力及时更新呐 😊 写给小白的工程师入门 - 从 Python 开始 macOS 版本 第1节 基本开发环境设置 a. 学会使用基本命令行 命令行的基本设置 在键盘上点击 ⌘Space ，用 Spotlight 呼出 Terminal。 一开始对于 Terminal 这个东西理解困难的读者，可以把它想象成一个壳（shell），在这个壳里，你可以写命令（command），这些命令直接发给电脑，电脑收到特定命令会执行特定行为，比如打开或编辑某个文档。 ——那为什么不直接去双击那个文档的图标来打开呢？ 因为用命令行（command-line）快很多！编辑一个文本或许看不出效率的差异，但要想编辑一百个文本的话，一个个地去用鼠标双击打开再编辑保存关闭……是很累的。但使用命令行的话，不管是一个还是一百个，所用时间和需要的操作都差不多。工程师是很懒的人，能逃掉重复步骤的地方就想方设法地要逃掉。 最后，Terminal 只是承载了这个壳（命令行工具）的 APP 的名字。你还可以像我一样下载其他类似的 APP，比如程序员爱用的 iTerm, 功能更加强大。 愿意通过提高 Terminal 的外观来提高工作效率和愉悦程度的人，应该选择给 Terminal 换个皮肤： 我用的是这个：◦ Spacegray 再换个字体。其实字体很重要，除审美和健康需求外，好的字体还可以提高工程师的工作效率。 选择字体的基本原则是“等宽”。等宽字体（如 Courier New）对中文友好，可以轻易辨识出“全角／半角”字符。 除此之外，是否能清楚区分易混淆的字符也是选择字体的重要因素。 常见易混淆字符： 数字0 vs 字母O 数字1 vs 大写字母I vs 小写字母l vs 运算符 数字9 vs 字母q 分号; vs 冒号: …… 我用的是 Courier New。 . 顺便把字号设置得大一点，具体多大视自己电脑屏幕尺寸而定——顺便提一句，有研究表明，电脑屏幕越大，人的效率就越高。所以，一块儿大屏幕还是很值得投资的。 设置 Terminal 的字体字号可以在 Preferences &gt; Profiles &gt; spacegray &gt; Text &gt; Font 中找到。 . 查看是否已经安装 Python，以及 Python 版本（mac／ Linux 已内置 Python2.7，windows 需下载） 在命令行输入： python --version 若返回了类似于 “Python 2.7.10” 的信息，则已有 Python 2.7. Python 2.7 与 Python 3.6 是最重要的两个 Python 版本。Python 3.6 更新，但 Python 2.7 也依然常见。 两个版本的差别不是特别大，Python 2.7 的网络学习资料更多，但直接从 Python 3.6 开始后面就不用再适应不同版本之间的差别了（当然，以后还有会 Python 4，5……）。 安装最新版 Python 3.6 两种方法，第一种直接从命令行安装（看起来更像工程师），依次复制粘贴以下5行代码到 Terminal（一个字母或空格都不能错）： xcode-select --install #安装 XCode Command Line Tool /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" #安装 Homebrew curl -O https://raw.githubusercontent.com/donnemartin/dev-setup/master/.bash_profile echo 'export PATH=\"/usr/local/bin:$PATH\"' &gt;&gt; ~/.bash_profile brew install python3 #用 Homebrew 来安装最新版 python # 及后面的内容为备注（同一行内），不需要粘贴入 Termimal（写了也会被忽略）。 小白肯定看不懂大部分指令的含义，不过此时不需要深究，先把目的达到再说，以后会慢慢明白的。 第二种安装方法即传统安装，去 Python 官网下载页，下载需要的版本。接下来跟着指示一步步走即可，参考安装文档。 在命令行以交互模式写 Python 代码 直接在 Terminal 中输入： python 这样一般使用了默认的 Python 2.7 版本，如果想用 Python 3.6，可以这样： python3.6 当看到光标出现在 &gt;&gt;&gt; 之后，就可以输入你的第一行 Python 代码啦！ print \"Hello World\" #python 2.7 print(\"Hello World\") #python 3.6 # 及后面的内容为备注（同一行内），会被 Python 编译器直接忽略。 看到返回了 Hello World 即为成功！ b. 工程师的编辑器 使用命令行和文本编辑器来运行 Python 脚本 有时我们需要运行多行的代码时，直接在 Terminal 中一行一行地输入会很不方便，这时选择用文本编辑器来写代码、用命令行工具运行写了代码的文本（称为脚本 script），就会方便很多！ 工程师爱用的编辑器很多，Atom, SublimeText, vi/vim ……我们不参与任何编辑器之间比较的争论，就以 Atom 为例来看一下如何从命令行运行 Python 脚本。 安装 Atom 在 Terminal 中输入以下两行代码： brew tap caskroom/cask #安装 brew cask brew cask install atom #下载 atom 或者也可以按传统方式安装，去 Atom 官网 下载，打开后拖到 Applications 目录去。 体验 Atom 有了 Atom 后，可以通过 Spotlight 打开一个 Atom 空白文档，打上我们之前已经见过的第一行 Python 代码： print \"Hello World\" #python 2.7 print(\"Hello World\") #python 3.6 点击 ⌘S 保存脚本，可以取名为 test.py（注意 Python 脚本的扩展名为 .py）。保存为 Python 脚本后可以看到代码变彩色了（这就是文本编辑器提供的 syntax highlighting 功能），变得更易辨识。 用命令行运行 Python 脚本 接下来回到 Terminal，如果还停留在之前 Python 编译器的页面，可以点击 ⌘T 打开一个新的空白页（new tab），接下来输入： python Path-To-Your-Script/test.py #使用 python 编译器打开刚写好的脚本；将‘Path-To-Your-Script’替换成你刚写的脚本的路径 （不知道一个文件保存在哪儿了的话，可以去到那个文件所在的文件夹，⌘C 复制该文件，再 ⌘V 粘贴到 Terminal，就能看到该文件的路径了。） 此时若在 Terminal 里看到 Hello World 就说明操作成功啦！ c. 认识 IDE：安装使用PyCharm Integrated Development Environment (IDE)，中文为集成开发环境，可以理解成集合了以上我们使用的文本编辑器、命令行工具与文件管理的开发软件。与单纯使用文本编辑器或命令行相比，IDE 更“有条理”，辅助工具更多，也更好上手编程。 让我们用通过一个主流的 Python IDE - PyCharm 来体验下 IDE 吧。 在 Terminal 里输入： brew cask install pycharm-ce # -ce 表示免费的 community 版本 等安装结束之后，可以尝试直接在 Spotlight 呼出 PyCharm。 当然也可以按传统安装软件的方式，去 PyCharm 下载页面，下载 Community 免费版本，再拖到 Applications 目录去…… 体验 PyCharm 接下来打开 PyCharm，需要设置一下，基本都可以按默认设置点到最后。PyCharm 的主窗口出现后，左侧已经初始化了一个名叫 untitled 的 project，可以右键点击该名称 New &gt; Python File 换个名字（比如 MyFirstPythonProject）。 右键点击该 project 的名称，选择 New &gt; Python File，在这个 project 目录名下新建一个 Python File，再取个名 test.py（注意：因为已经选择了新建 Python File，所以在这儿不需要加 .py 的扩展名）。 现在，在空白的 test.py 编辑区打下我们已经很熟悉的第一行 Python 代码： print \"Hello World\" #python 2.7 print(\"Hello World\") #python 3.6 PyCharm 会自动保存所有改动，所以不需要再手动敲保存键。 你可能已经注意到 PyCharm 自动把输入的代码变成了彩色——其实 PyCharm 还会帮你自动缩进、自动补全固定表达、自动检查语法错误……就像智能输入法！虽然特别便捷，但对于新手来说，弊端很明显：你本来很可能会犯错的地方都被提前预防了，这其实是在躲避你应掌握的编程知识。如果突然切换到普通文本编辑器或者命令行甚至手写代码时，新手才会发现，原来没了“智能输入法”的辅助，自己连基本语法也不能100%写对。。 来看一下运行结果：点击 ⌃⌥R 会看到一个小窗口跳出来，让你选择要运行哪个文件（此时只有 test 可以选择），选中 test 后，就会在 PyCharm 窗口下方看到运行结果啦！ . 第1节 - 作业： 熟练本节的知识点和操作； 熟练 Terminal / Mac 的基本快捷操作，最好打印下来贴起来，每天都背几行； 思考：三种不同的 Python 编程方式有什么区别与优势呢？ 第1节 - 小结： 我们了解了基本的命令行操作，安装了一些工程师的必备工具; 我们还尝试了三种不同的 Python 编程方式：命令行的交互模式，用文本编辑器与命令行配合，还有在 IDE 中编程； 虽然小白肯定会对很多细节半知不解，但慢慢来，以后都会掌握的。 " }, { "title": "Common Sorting Algorithms Implemented in Python 3.6", "url": "/sinantang.github.io/pr-7/posts/sorting/", "categories": "Algorithms", "tags": "python, algorithm, programming", "date": "2017-08-15 00:00:00 +0200", "content": "Sorting is one of the most basic and fundamental algorithms in CS theory. Here partially to keep a record for my myself and to memorise (understanding new concepts and methods takes time, sometimes memorising comes to be an essential approach of learning), I summarised the Python implementation of 4 common sorting algorithms: bubble sort, selection sort, insertion sort and merge sort. (I want to revisit this blog and complete the list of sorting algorithms in Python in the future) Bubble Sort (best: O(N); worst: O(N^2)) Sorts a list by ‘bubbling’ the largest element to the end of list. I find bubble sort most intuitive for me. If given the task to write a sorting algorithm without any prior knowledge of it, I would probably come up with bubble sort. def bubbleSort(L): for i in range(len(L)): for j in range(len(L) - 1): if L[j] &gt; L[j+1]: temp = L[j] L[j] = L[j+1] L[j+1] = temp return L # a better bubble, stops computing when there's no more to swap def betterBubble(L): swapped = True while swapped: swapped = False for i in range(len(L) + 1): if L[i] &gt; L[i-1]: temp = L[i] L[i] = L[i+1] L[i+1] = temp swapped = True return L Selection Sort (best/worst: O(N^2)) Sorts a list by comparing every element to sorted minimal value. def selSort(L): for i in range(len(L) - 1): minIndex = i minValue = L[i] j = i + 1 while j &lt; len(L): if L[j] &lt; minValue: minIndex = j minValue = L[j] j += 1 temp = L[i] L[i] = L[minIndex] L[minIndex] = temp return L Insertion Sort (best: O(N); worst: O(N^2)) Sorts a list by spliting it into 2 parts, the first element being the ‘prefix’, the rest being the ‘suffix’. Then compares and insert properly the first element of the suffix list to the prefix, until the suffix becomes empty. def insertSort(L): for i in range(1, len(L)): val = L[i] index = i while index &gt; 0 and L[index-1] &gt; val: L[index] = L[index-1] index -= 1 L[index] = val return L Merge Sort (O(N lgN)) Sorts by beaking the problem down into minimal sub-problems, them combines the solutions to sub-problems. def merge(left, right): \"\"\" Given 2 lists, merge them into one list with elements sorted. \"\"\" result = [] i, j = 0, 0 while i &lt; len(left) and j &lt; len(right): if left[i] &lt;= right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 while i &lt; len(left): result.append(left[i]) i += 1 while j &lt; len(right): result.append(right[j]) j += 1 return result def mergeSort(L): if len(L) &lt; 2: return L[:] else: middle = len(L) // 2 left = mergeSort(L[:middle]) right = mergeSort(L[middle:]) return merge(left, right) Reference: Wikipedia article on Sorting Algorithms MIT600 (2008) lecture 9-10 on Sorting Algorithms BetterExplained: Sorting Algorithms " }, { "title": "万能思维框架 WHAT, HOW, WHY | 由浅入深掌握新技能", "url": "/sinantang.github.io/pr-7/posts/what-how-why/", "categories": "Reading Notes, Self improvement, How to learn better", "tags": "learning", "date": "2017-08-14 00:00:00 +0200", "content": " If you want to get smart, the question you have to keep asking is “why, why, why?” — Charlie Munger 想写这篇文章是因为去年夏天我读了这篇互联网提问圣经《How to Ask Questions the Smart Way》（也曾在旧博文里推荐过此文）。文章自然是值得多次推荐的好文章；但我在读过两遍之后，始终觉得有哪里不太对，这点“不对劲”直到最近才慢吞吞地想明白—— 奔着想知道⎡如何正确地提问 &amp; 提正确的问题⎦的目的去读这篇文章，但读完后却愈发觉得作者在教人⎡如何尽量少向别人提问⎦——因为你应该尽量靠自己 + 搜索引擎解决 99% 的问题喔！ “学会不做伸手党”当然也是很有价值的课题（其实这才是作者的本意，误读了标题是我的错），但我最初的疑问却并未被这篇题为《如何聪明地提问》的文章所拯救：我并不是伸手党，也懂得如何搜索有效信息，但我还是需要知道应该如何真正地提出一个好问题。 《如何聪明地提问》作者Eric写各种提问的技术性细节时，显然假设了读者已知自己的问题是什么——可是如果，我还不知道呢？ 那就回到这个原始动机问题上了：本无问题为什么还偏要提问呢？ 我的回答有两个。 一是，生活中很多时候需要你来提问，而且你提问的质量高低很重要。 比如，在找工作面试时，面试官最后往往会加一句，“那你有什么问题要问吗？”再比如，和别人聊天交谈（面对面or通过通讯工具）时，如果你想尽量和别人多聊会儿，或想要引导对话的走向，那也常需要以合适的问题来结尾——这样才能最大限度地保证会收到下一条回复。 二则是因为，提问是学习的最佳姿势。 《学会提问——批判性思维指南》一书中把人的思维方式主要分成的两种：海绵式思维与淘金式思维。 海绵式思维（the sponge）：不假思索地尽量接收所有信息，简单地说就是靠记忆力来处理信息、认识世界。 淘金式思维（panning for gold）：除了记忆力还需要其他思维能力（分析、推理、归纳、总结……）来判断一条信息是否有价值。 把这两种思维方式具体化到学习（广义的⌈学习⌋，指习得任何新知识与技能）上，不难发现，大部分人大部分时候都是在海绵式地学习——求知欲就像是一块儿海绵，目标是在知识（多数时候还不是知识，只是信息而已）的海洋里尽可能地吸收更多的水。虽然较为简便易行，可是海绵吸水式被动记下的信息，很难内化为自己能拿来用的知识，因为吸收时没有判断过信息的真伪、优劣、等级和价值——再多的信息也像一堆砖头，不成体系，难以发挥价值。 而通过淘金式思维学习到的技能，才最终有可能在复杂的现实中运用起来。淘金式学习，主要依靠不断提问来帮助、引发自己主动思考分析信息的真伪与价值，建立与已有知识体系的联系。由此可见，提问的质量必定与学习的效果成正比。 就算只考虑提问的第二种价值（即⌈提问是学习的最佳姿势⌋），任何没放弃进步的人也都应该关心⎡如何提出好问题⎦这个课题。 （终于写到重点！）那如何才能提出一个有价值有潜力的好问题呢？ 不妨试试WHAT - HOW - WHY三段进阶式提问法！ WHAT: 对”是什么”进行初级提问，如，基础概念、表面现象、特征重点等； HOW: 对“如何做”进行中级提问，如，运作机制、内部结构、报错分析等； WHY: 对”为什么”追根究底，“为什么要这么做而不是那样做？”，“为什么是主导因素是这个而不是那个？”等等。 在不同领域内，所能提出的三阶问题不同，不过大道相通。 比如，在学习Python 数据结构时，你的问题也许会从“整型值与浮点值在 Python 里的表达方式与运算形式有哪些？(WHAT)”变化为“在 Python 中 0.1 + 0.2 ≠ 0.3，这个运算结果的背后机制是什么？(HOW)”再升级到“为什么用机器语言无法准确地存储一些十进制浮点值？(WHY)” 再比如，在读人类历史时，你的问题可能从“是哪个人种、在什么时间、以什么方式首次到达并殖民了美洲大陆？(WHAT)”升级到“智人到达美洲后，大批动植物纷纷灭绝，这个过程是如何发生的？智人在其中扮演了怎样的角色？(HOW)”再联想到“为什么是欧洲人再次发现并占领了美洲，而不是印第安人占领了欧洲？(WHY)”。 举一个与编程有关的具体例子（但与具体知识关系不大，没有编程背景也能看懂）—— 以前在公司实习时，老板曾交给我一个菜鸟级任务：写一个脚本（script），删掉一系列文档内数据的排列组合在其他文档内的重合。 任何人的第一反应，肯定是先问WHAT级别的初级问题，比如， ❒ WHAT ❍ 具体要解决什么问题？最简化的任务：假设只有3个文档，文档1中数据未知，文档2内只有a, b, c这三个数据，文档3只有x, y两个数据；需要“抠掉”文档1中所有可能出现的文档2&amp;3内数据的全部排列组合（有ax, ay, xa, ya, bx, by, xb, yb, cx, cy, xc, yc 共322=12种组合），并且不改变文档1内数据原本次序。现实中，有一系列的文档1，以及与文档1配套的一系列文档2&amp;3，并且每个文档内有几十到上万行数据。 ❍ 想要什么结果？得到一系列处理干净的文档1，以及一个可供后人审阅、升级、继续使用的好用脚本。 ❍ 预测可能会出现什么难点？文档本身是多语种的，也许会遇到 encoding（编码）的问题；怎样最有效率地找到多对文档间的全部排列组合。 搞清楚我要做什么了之后，就要进入下一步思考HOW的问题了，比如， ❒ HOW ❍ 怎么解决我的问题？先建立最简任务模型，调试成功后再用到真正的问题上。 ❍ 通过什么方式来解决？写个Python脚本。 ❍ 需要设计什么步骤？批量读取文档，获取不同文档内数据的全部排列组合，找到需要处理的文档1们中重合的部分，删除重合并生成新文档；测试结果。 想清楚 HOW 之后，就可以动手写脚本了。或者边写边调整具体策略，都没什么问题。 接下来WHY的问题，其实对解决当下问题的帮助不大，因此大部分人也不会去多想。但问出重要、关键的WHY有助于优化解决方案，加深对 HOW 的理解（“为什么要那样做、不这样做？分别有什么影响？那影响重要吗？”），最终加速技能学习过程。 ❒ WHY ❍ 为什么要写几十行代码的脚本，而不是直接在命令行用sed, AWK之类专门处理文本的小工具、仅花两三行就把问题解决掉？因为不止想要处理干净的文档，还想要一个可供别人审阅、升级、整合到其他程序中使用的脚本；还因为需要处理的文档并不是只有现在这些，未来还会不断更新，需要反复处理。（我处理这个小任务时想到的一个WHY） 第二天，老板来看我写的脚本时，提出了更多我从未考虑到的、也更有价值的 WHY，比如， ❍ 为什么选择用循环结构（loop / iteration）去除重合？我当下愣了一秒，然后就老实承认：我没想过为什么要这样写，只是第一反应知道循环+遍历可以达到自己的目的，就用了……但在实际问题中呢，假如要处理的文档很大，用循环结构就会降低效率；此时换成 set（集）则是更好的选择。 根据二八定律，能从 WHAT 进阶到 HOW 再到 WHY 的人仅占人群中的 4% (20%*20%)。因为，问出更高阶的好问题的前提是要先研究透彻低阶问题；如果试图越过 WHAT/HOW 阶段的思考与实践而直接提出 WHY，那个问题往往会显得很傻很天真——最后又回到我上一篇文章中提到的，自学编程最重要的三句话之一： Do Your Homework! 引申阅读： 《How to ask questions the smart way》by Eric Steven Raymond 《读书不止“读”那么简单》博客旧文 《学会提问——批判性思维指南》by 布朗 &amp; 基利 " }, { "title": "六年后重考高考英语给我的收获", "url": "/sinantang.github.io/pr-7/posts/gaokao-en/", "categories": "Self improvement", "tags": "learning", "date": "2017-06-17 00:00:00 +0200", "content": "2017年高考刚刚过去，为了测试下距我几年前上次高考时英语水平提高了多少，我今天兴致盎然地把今年的全国卷英语高考题做了一次！ 因为没找到听力录音，也没人给我作文评分，所以我只把中间部分答完了，自认还蛮认真的。 很快写完，再对答案——这部分满分85，我得了79.5…… 算上听力和写作部分，如果我前几天真的坐在高考考场里的话，肯定最高最高也只能拿到140分（满分150）——而6年前，我的高考英语是139分…… 也就是说我这六年来，我的英语水平毫无进步？？？ 可是理智和现实告诉我，在经历了学英语翻译，考雅思BEC专四，留学，还教别人英语之后，我现在的英语水平肯定和高三时不可同日而语。 那最合理的推断倒是只有俩了： 一是，「我在高三时已经达到了高考英语能测出来的英语水平上限」； 二是，「高考英语成绩和实际英语水平关系不大」。 虽然这两个推断不同，但由此导出的结论都是「别对义务教育体制内的英语教育太较真」。 为什么会这么说呢？ 01 先来看第一个推论，「我在高三时已经达到了高考英语能测出来的英语水平上限」。 听起来好像是在炫耀我的英语很厉害，但我自己很清楚自己高中时英语就是个纸质Hello Kitty——连纸老虎都算不上。那时虽然基本语法问题不大，可是词汇量非常非常非常有限（对自己词汇量的客观认识，只有在你读完几本英文原版小说后才会有点体会），并且口语能力接近于无——后来大三去英国时连怎么跟人打招呼都是从头开始学。 就这样的水平，6年前高考时我也能很平稳地拿个139分，而我今天再考一次最高得140分，充分说明了剩下的那10分就算再过6年我也很难拿到，除非运气好。 那都是什么样的错误导致失分呢？ 比如，在今年全国卷的第三部分第一节完形填空中，有一个空是这样的： The __ began during my first week at college. A. meeting B. trip C. story D. task 短文背景是作者在大学时对手语产生兴趣并开始学习手语。上面这句话就是准备开始讲作者是如何迷上手语的。 这道题我选了B，答案是C。 排除A D这两个只要看懂了文意就不会去选的选项之外，我觉得选B还是选C都完全没问题。 story 是准备开始讲这个“爱上手语”的小故事了；trip 则是把接下来发生的一切比喻成一段精神旅程了——为什么不可以呢？ 随手谷歌一下‘learning trip’，以下是搜索结果截图： 选 story 还是 trip 难道真的存在对错之分吗？要我说用 trip 还更加生动呢，因为用了metaphor隐喻修辞。如果出题人现在就在我面前，我可以一条条有理有据地反驳这道题的出题逻辑。并且我在高中时，英语老师也常在讲解试卷时说这么一句话，“这道题这么选没什么道理，看看就行了。” 但是教育体制内的英语考试就是要让你在两个没有绝对对错之分的选项中硬选一个，并以此来给你打钩或打叉。 这也就是为什么再过六七年我也不可能实质性地缩短到满分之间10分差距的根本原因。也许再多做做题会提高两三分吧，但“花一个月做完三十套卷子 + 努力揣测出题人心思 = 也许提高一分”这样的交易，我是不可能再去做了。 人生更值得去做的事简直不要太多。 02 第二个推论「高考英语成绩和实际英语水平关系不大」其实在上面已经讲了一部分了。 实际英文水平追求的是清晰易懂生动丰富的语言，和我们对中文的追求差不多。但高考一张卷子两个小时笔试的首要目的显然是进行快速简便的筛选——77%的分数都是以选择题的形式呈现，也许花不了一秒就“咔”地判完一份答题卡了。而最能体现一个人英语水平的口语和写作测试，因为评分困难耗时大增而顺理成章地退居次位。 因此就算是高考英语高分的人也不会自如地开口问路指路也是很正常的。 （但这不代表这句话可以反过来推——实际英文水平好的人高考英语高分是正常的） 03 小结 别对义务教育体制内的英语教育太较真——“认真你就输了！” 然而英语是真的重要（推荐阅读《不懂英语，造就了12亿人的信息孤岛》，无链接）。 所以要自己花有真正回报的功夫去学习、使用英语。 " }, { "title": "How to create an application launcher (Linux)", "url": "/sinantang.github.io/pr-7/posts/create-application-launcher/", "categories": "Linux Tips", "tags": "Linux, Unix", "date": "2017-06-15 00:00:00 +0200", "content": "This post applies to Linux Red Hat (and probably some other Linux versions too). If you want to create an application launcher for, for example, Eclipse so you can launch it much faster, you can follow this step-by-step tutorial. . Open a txt editor, and copy the following information to your file, edit the path so it applies to your case: [Desktop Entry] Encoding=UTF-8 Name=Eclipse IDE Exec=/home/USER/programs/eclipse/eclipse Icon=/home/USER/programs/eclipse/eclipse.png Type=Application Categories=Development;IDE; You can download the icon from the offical site if you don’t have it ready. . Save this file to /home/YOUR_USER/.local/share/applications/eclipse.desktop. Note the extension of the file name is .desktop. If you don’t see the hidden folders (folder name starts with ‘.’), type Ctrl+H to display them. This file should change to the icon of the desktop file. " }, { "title": "那个会说十几门外语的美国小哥来了", "url": "/sinantang.github.io/pr-7/posts/polyglot/", "categories": "Self improvement", "tags": "learning", "date": "2017-05-17 00:00:00 +0200", "content": "你是否曾幻想过，会讲十几门外语、读得懂十几种语言的小说是种什么体验？ 今天我就请来了这样一位拥有外语技能满点的美国年轻人Kevin，我们进行了一次关于外语学习的深度交谈。 在与Kevin的对话中，我强烈地意识到，即便是成年人，「快乐高效习得一门外语」这件事也绝对存在。其中关键除了天赋外，兴趣几乎是最重要的影响成败的因素了。所以我决定这篇文章不再干巴巴地自娱自乐，也绝不渲染任何紧绷绷的中式寒窗苦读精神——我们早该明白，学习可以不那么痛苦又低效。 以下正文部分是我与Kevin的对话内容的直接翻译与展示（原访谈为英文），我偶尔的补充评论就藏在下面一问一答间足矣。 01. 认识Kevin Sinan: 你到底会说多少种语言？ Kevin: 除了英语母语外，西班牙语、法语、德语、日语、中文、乌尔都语、俄语、北欧语言家族（Scandinavian languages，包括挪威语、瑞典语、丹麦语等一系列关系密切的小语种——笔者注）、阿拉伯语等等。除此之外，我曾经上过其他15门语言的基础课程。 Sinan: 你从是什么时候开始学这些外语的？ Kevin: 最早是14岁在学校开始学西班牙语，再之前自己试着学过一点日语皮毛，大部分语言都是上大学后才有机会进行系统学习的。 Sinan: 你为什么会对学习外语这么感兴趣？ Kevin: 呃……我爸爸曾经常四处出差，他自学了一点日语，所以我那时也跟着翻了翻他的日语教材。而且休斯顿（Kevin来自美国德州）也有大量外国人，很多会说其他语言的工程师从美国各地来休斯顿工作（NASA, 石油工业），大概这个语言环境也有影响。 02. 环境与年龄真的可以决定外语习得水平吗？ Sinan: 你从小是在单语环境（monolingual）还是多语环境（multilingual）中长大的呢？ Kevin: 单语环境。我父母、祖父母、曾祖父母都只会说英语。 Sinan: 你觉得年龄是影响外语学习效果的重要因素吗？ Kevin: 肯定是的。小时候学语言才能获得类似母语的语感直觉。但这绝不意味着成人就学不好外语。 Sinan: 跟小孩儿相比，成人学习外语的优势是什么？（ 身为语言学研究生，我知道答案，但是自觉应该为我的读者们多问一次 :P ——笔者注） Kevin: 成人才能理解、学习抽象的语法。 03. 自学还是报班？ Sinan: 你更喜欢自学外语还是上语言班？ Kevin: 两种方式各有优劣。语言班的教学进度对我来说总是太慢（笔者在此处干笑几声），自学的话就可以按自己的学习进展进行自主安排；但语言班的老师一般都是母语者，和母语者交流也是一种进步很快的方法。 Sinan: 当你开始学习一门新语言时，你有什么通用的方法论吗？ Kevin: 我一般从语法开始学起。翻完一本课本，做做书上的语法题。之后就会去网上看多媒体的内容，比如电视节目、电视剧、新闻这些。还会读外文原版书。 不过，对于同一语族语系的外语，就像我在已经会说西班牙语的基础上再去学法语一样，我会略过看语法书的环节，直接开始在阅读中应用那门语言，在使用的过程中遇到不懂的语法点才去查语法书。 Sinan: 你以前曾说过你会在书写系统而不是口语上下太多功夫，为什么呢？ Kevin: 那只是方便啊，毕竟可供学习的书面材料到处都是，一个人阅读也没时间限制；而你并不总能找到母语语伴来练习口语。 04. 学外语应该怎样安排时间 Sinan: 你一般会在一门新语言上花多久学习呢？ Kevin: 每门语言都不太一样。比如上面提到的法语，就花不了太久。但比如中文，我其实很久之前就开始学中文了，直到现在水平也很一般（此处为自谦，Kevin中文其实很不错，可以借助字典看懂《三体》——笔者注）。 但平均来说，我会在开始学习一门外语后的一两个月内，掌握所有重要的语法点的概要。之后就可以进入深入学习阶段了。 Sinan: 你每天平均会花多久在语言学习上？ Kevin: 不一定，有时候一整天都在学语言。如果只是看语法书这类正式集中的学习形式的话，我大概一天会花一两小时。更多的语言学习时间会用在看外语新闻小说电视节目等等之上。 Sinan: 你怎么找到这么多时间学习这么多语言的？ Kevin: 一开始学一门新语言总会花一些时间。不过，不同语言所需时间也绝对不同；比如法语，因为和我熟悉的西班牙语很相似，所以我自学法语时就直接从看简单法语小说开始（Kevin的第一本法语小说《L’Étranger（陌生人）》），辅以西法词典，前后花了40小时左右读完了，其实这样基本语法和单词就差不多了。再比如，我在学完德语后再去了解北欧小语种（同属日耳曼语族 Germanic languages——笔者注），那就非常容易上手，基本花不了太多时间就能读懂。 05. 学那么多外语到底有什么用 Sinan: 当你学习一门新语言时，你最大的乐趣来自于哪里呢？ Kevin: 学习新语言的乐趣有很多层次。比如，你懂很多语言就会自动知道很多百科全书式的知识（encyclopedic knowledge），在类似知识竞赛的场合，你会发现自己什么都知道，这点还是挺让人满足的。更高层次地，你还有机会和各种各样的人交流，可以看懂小说和戏剧经典。去别的地方旅行时，因为能和当地人搭上话所以可以迅速融入。 Sinan: 那你有没有因为懂这么多语言而获得了别人绝对得不到的机会？ Kevin: 我现在正在做的工作就是啊（Kevin是我在IBM的同事——笔者注）。我能来德国读研也是啊。能够去不同国家深度旅行也算是吧。还可以认识各种各样的朋友呢。 Sinan: 会说一门外语的经济回报是你学习那门语言的动力之一吗？ Kevin: 唔……我17岁时下决心想要尽可能地去探索、认识这个世界。所以当我选择学习一门新语言时，也会看那门语言在世界上的影响力。这对我来说算是来自功利因素的动力了。（我觉得这完全谈不上功利——笔者语） 06. 那些语言学习者都掉过的坑与不知道的秘密 Sinan: 你当过语言老师吗？ Kevin: 没。不过若有人来问我关于语言学习的问题的话，我会指点一下。 Sinan: 那据你观察，你觉得那些花很久也学不好一门外语的人的症结在哪儿？ Kevin: 我觉得他们可能对正在学习的外语没什么兴趣或感情吧。有些人只是上上语言班，完成老师布置的作业，但完全不会去做其他与那门语言相关的事。我学一门外语时，会把那门语言融入生活，比如看那门语言的文娱节目和新闻之类的。 Sinan: 所以你认为对于在学的语言是否有兴趣（emotional attachment）很重要？ Kevin: 我觉得这是学习一门语言最自然的方式。因为想要掌握一门语言你必须天天用到它，与它建立兴趣与感情联系就会让这个学习过程自然、高效很多。 Sinan: 有没有什么大部分语言学习者都不知道的外语学习窍门？ Kevin: 诶……也许不要看那些速成快餐书？“每天十分钟学会法语”之类的……书店里卖的外语学习书大部分都等同于垃圾。 我用过一个语言学习的课本系列，可以推荐给大家，the Complete… Series。是我本科时（University of Texas at Austin）学院指定的课本。尽管偶尔有点小错，但可以算是我用过的质量最高的语言学习教材了。不过不同语种的最好教材很可能不同，可以参考世界名校外语系的参考书目，一般不会踩雷。 （我搜了一下，这个我没听说过的「the Complete… Series」是由 Hodder Education，一家位于伦敦的英国出版商出品的经典外语自学教材，包括 65 种外语，官网链接请戳文末“阅读原文”） 除此之外，我也会用Duolingo做语法练习。 Sinan: 我也用过Duolingo学德语！不过里面有些例句是过时、硬凑的。 Kevin: 对，Duolingo是会为了练习某个语法点而硬造句。不过当作语法补充练习效果确实不错。 Sinan: 不过我觉得直接去读一本教材很难诶，因为通常都很枯燥，除了上课外，我个人很少能读完。 Kevin: 确实，对于我来说也挺难的。我目前已经在读第四本自学阿拉伯语的教材，如果能找到质量上乘的教材可以大大减轻学习者的负担。另外也可以用其他方式维持自己对这门语言的兴趣。还有，最好可以快速结束一本教材，一天至少读完一章就能大大减少半途而废的可能性了。 Sinan: 如果你发现自己忘记以前学过的知识了，你会怎么做？因为我自己学外语时就是边学边忘，边忘边学…… Kevin: 我也经常要在同一个语法点上多次重复。发现忘了就快速回顾再巩固就好。 07. 如何通过读原版书来提高外语水平 Sinan: 很多人也想要通过读原版书的方式来学习外语，但是大多数人都中途放弃了。你是如何做到可以读完那么多本不同语言的原版书的呢？ Kevin: 我觉得时间很重要。如果你要花一小时才能读完一个段落，那你继续读下去的动力就会迅速下降。所以说，找到自己感兴趣的题材很重要。比如我就读不下去儿童读物，不是语法单词复不复杂的问题，而是我觉得太无聊了。我宁愿读语言简单一点的成人读物。 另外，有优质词典来高效地配合使用也很重要。比如，如果有可以即时取词翻译的浏览器插件，那浏览外语网页就会很高效。但那些高效好用的词典工具基本都局限于主流语言，对于像乌尔都语这种没那么主流的语言来说，就没太多好用资源。这也是为什么我现在在自己做这些工具的初衷。 08. 最后的问题 Sinan: 你对于不地道的口音有什么看法？ Kevin: 我个人能接受别人说外语带口音。但我还是挺注意自己在学口语时尽量不带上口音的。如果能留意到那些母语中不存在的音素的区别，也能帮你提高外语听力水平。另外，我还会通过大声朗读、自言自语加反馈来练习口语。 Sinan: 一个主观问题，你最喜欢哪门语言呢？ Kevin: 我对自己学习时间最久的语言感情最深厚，也就是西班牙语和日语。中文我也挺喜欢的。 Sinan: 你将来想学更多的外语吗？ Kevin: 想啊，有机会会学波斯语。至于其他的……好像也没什么语言是我完全陌生的了吧 :) Sinan: 我问完了。你有什么想问我的吗？ Kevin: 那你是怎么学英语的？ Sinan: ……这是个难以启齿的中国教育问题。还有其他问题吗？ Kevin: 你打算怎么写这篇采访？ Sinan: 你会知道的。 . 正文完。本文不说教。 有所启发或触动或深受打击的读者欢迎评论区留言！ Reference: https://www.teachyourself.co.uk/modern-foreign-languages/complete-beginner-to-intermediate-courses/ " }, { "title": "高级英语阅读方法：理解中英文语法形态的大不同", "url": "/sinantang.github.io/pr-7/posts/english-reading/", "categories": "Self improvement", "tags": "learning", "date": "2017-04-19 00:00:00 +0200", "content": "2013年我考过唯一一次雅思，没太多刻意准备，阅读听力都拿了9分（满分为9分）。虽然完全不是什么值得特意说的事，因为雅思在一众留学英语考试中算是简单的了，不过那之后几年来我持续积累了大量阅读英文文献和原版著作的经验与心得，到今天暗觉或许大概可能已经具备了一点点可以分享出来的资格了，便有了此文。 这篇文章不会讲雅思，不会讲留学，更不会讲考试技巧，只会从「元知识」的视角来谈一点「如何通过理解英语语言特征来快速提高英语阅读的理解速度」的浅见。 为了防止有读者看得太快而产生误解，在开始正文前我得强调下，这里谈的是「理解速度」，也就是针对怀着“我要真正、彻底理解作者意图”这番目的的阅读，而不是“找关键词式地浏览、跳读、扫读，以便快速选出正确答案”的做阅读题方式。 . 看到标题会点开的你，想必已有一定的英语基础，同时还希望可以在英语阅读上提高效率吧。那如果现在问你下面这个问题，你的答案会是什么呢？ “结构、含义完全相同的一篇文章，用书面英语表达出来与用中文写出来相比，有什么区别呢？” 当然啦，语种肯定不同……那，除此之外呢？ 这样一个笼统的问题，肯定会有很多正确答案。 但在这儿，我想指出的明显区别是，中文和英文在分句与分句之间、句与句之间、段与段之间，存在着连接方式的大不同。 准确地说，中文主要靠意合（parataxis）来连接分句、句子、段落，而英文则是靠形合（hypotaxis）来连接成分的。这两个术语看起去抽象，但并不难理解。意合连接，也就是依赖不明说的意义来连接成分；形合连接，则是在看得见的形式上进行连接。 两种不同连接方式从连词上就可见一斑。虽然连词在中文和英文里基本一一对应（因为逻辑关系的存在和语言这个载体无关呀），比如“因为 - because, 所以/因此 - so/therefore/hence/thus, 然而 - however/nonetheless, 否则 - otherwise”等等，但连词在英语和中文文章里出现的浓度却大有不同。简单来说，连词在英文中出现的频率比在中文里高得多，这是很多语言学研究的结论（e.g. Xia, 2014）。前面提到了英语是形合连接的语言，连词就是这形式中的一种。 这种连词使用频率的差异让英文表达看起来更强调逻辑，让中文文章充满了“朦胧美”、“模糊感”。 比如，下面这个简单例子： 喝点酒，壮壮胆子。 读完这句常见的中文，直觉上你会如何理解“喝点酒”与“壮壮胆子”之间的逻辑关系呢？ 如果把这句翻译成英文，你觉得怎样翻译最好呢？ . 这句话其实存在三种不同的逻辑关系理解方式，也因此产生了三种与之对应的英语译文： Drink a little wine,and it will give you courage. Drink a little wine to give yourself courage. Get some courage by drinking a little wine. 三句分别对应了三种逻辑关系：顺接（consecutive），目的（purpose），条件（conditional）。每一种理解都没错。 . 是不是到了英文译文这儿，就得犹豫几秒，仔细体会一下“喝酒”和“壮胆“之间的关系，才能给出一个答案吧？ 是的，如果要用英文来表达的话，那你必须从这三种逻辑中选出一个来，而不能保持中文“喝点酒，壮壮胆子”的那种暧昧感。这种选择是对人逻辑思维潜移默化的训练，也是我们能读懂英文文章的关键所在。 其实，这种逻辑清澈的语言反而给读者理解文意提供了方便。因为供你随意猜测的空间很小，只要能准确理解有限的几种逻辑关系与连接方式，就能准确理解作者的本意。反观逻辑不够清澈的语言（比如中文），写作者自我辩护的空间极大（”我想说的本意是 xxx，是你自己理解成了 yyy 而已“），同时很容易诱惑读者抛弃对逻辑关系的思考。 所以说到这儿，能快速提高英文阅读理解速度的方式已经很清楚了，那就是 彻底掌握英语里有限的十几个连接词； 借助连接词和其他语法知识，以及逻辑+概念常识，理清分句与分句、句与句、段与段之间的关系。 这里提到的“其他语法知识”指的是除了连词外其他能体现英语形合连接的语法结构，比如主从结构，比如指代关系。 那后半句「分句与分句、句与句、段与段之间的关系」又包括哪些呢？ 我觉得李笑来在《人人都能用英语》中已经讲得非常清楚了，有意细究的读者可以去读读该书的第七章《精读》。这里我只摘取其中关键的一小段以供参考（M1代指读到的第一句话的含义，M2代指第二句话的含义）， M1和M2之间的关系，大抵分为两种： ● M1被M2支持。这时，M2往往可能从三个角度之一（或者三个角度组合使用）去解释M1 ——What? (举例、阐述) Why? (因果、比较、分类、目的) How? (方式、手段、步骤) ● M1与M2共同支持另外一个句子。这时，M1与M2之间可能的关系分别是：并列、递进、转折。 如果你也把理解速度作为衡量阅读效率的目标，那么这可以算是最不拐歪路、最高效的读书方式了。不过，如果你衡量阅读水平的标准是“一年翻完了xx本书”，那就没必要认真思考如何理解文意，也没必要继续读下去了…… . 讲完了原理，下面我们来看看应用。 以英文阅读中难度最大的文献阅读为例，下面我随手摘了一段前几天看过的一篇语言学的文献，难度中等偏易。 你可以先按自己的老习惯通读一遍，读完后给自己的理解程度打个分。不能确定自己理解了多少的话，就自问自答这个问题，「作者在这一段讲了什么？我能用中文复述出来吗？」 Apart from those idioms that have as their deictic centers states that can recur in time, there are a number of idioms where the deictic center consists of a non-recurring normal state. By non-recurring, I mean a state which, once entered, cannot be left again - or conversely, once left, cannot be re-entered. The irreversible nature of the change of state in these instances may be regarded as the result of inevitable progression from one state to the next through time. In each case, the resultant state might be regarded as permanent. Since one characteristic of such normal states is that they are entered or left once for all, they naturally tend to specify only one boundary. Thus, when development in time leads one into some such normal state, only the entrance boundary is marked, in that one finds only idioms with come (or bring) used for this kind of change of state. Similarly, where it is the non-normal state that is an inevitable development over time, only the boundary is marked: only idioms with go or send are associated with departure from some prior normal state. (Clark, 1974, p.323) 由于我已经可以很熟练地套用上面描述的阅读方法了，所以同样的一段英文，我读过一遍后，其实它在我的脑海中是长这样的： 读一遍之后，我对这段的初步理解是，作者在上文讲了那些用可以反复发生的状态作为指示中心的习语，这段来讲另一种情况，就是当那些不可逆转、只能发生一次的变化状态作为指示中心时，指示动词（come/bring, go/send）的使用规律。 剩下的细节则可以通过第二遍、甚至更多遍地细读，以及联系上下文来进一步理解。 . 前段时间有本很火的书叫《刻意练习》，书中最中心的概念就是心理表征（mental representation）。说的是「同样一个东西，在高手和低手的脑海中所呈现出的形态是不一样的」。通过刻意练习向高手靠拢的过程，其实就是偷师高手的心理表征的过程。 我不觉得自己在英文阅读上是高手，但起码已经不是低手了。通过大量、正确的阅读理解练习，我获取了适合自己的、区别于低手的进化版心理表征。 因此，如果你哪天能够在英文阅读的理解速度上实现质的飞跃，那你一定会发现自己看待英文文章、段落、句子的目光已经变了——这便是最关键的心理表征上的变化。 至于雅思阅读么，如果你掌握了这种阅读理解方法，那任何英语考试的阅读题真的都会变得无比简单…… . 最后，我们来倒着小结一下吧！ 在一件事上，区别高手与低手的关键在于心理表征（mental representation），也就是高手看到同一事物时在脑海中呈现的形态是更高维的、有别于低手的。 如果在英语阅读这件事上也存在高手、低手之分的话，那可以想象，高手看待英文文章、段落、句子的方式必然和低手不同。 文中的注释版已经展示了其中一种不同的心理表征形式。 为了获取高手的心理表征，从而快速提高英文阅读理解速度，可以通过“掌握连接词+理清句、段、篇的关系”的阅读方法进行修炼。 那为什么学习连接词、练习逻辑思考可以帮助我们快速理解英文文章呢？根本原因在于英语是一种形合连接、逻辑清澈的语言，作者的写作线索和思路发展都清清楚楚地摆在桌面上了。 最后附赠给耐心看到这儿的同学们一个彩蛋：如果你想要以这篇文章描述的方法来提高自己的阅读理解水平，不妨也以同样的思路来练习英文写作。摒弃掉中文自带的“朦胧”、“模糊”、“暧昧”，英文写作会将你引领到一个脑子无比清楚、思考无比清晰的新世界。 . References: Clark, E. V. (1974) Normal states and evaluative viewpoints. Language, 50(2), pp.316-332. Li, C.N. &amp; Thompson, S.A. (1981) Mandarin Chinese: A functional reference grammar. University of California Press. Xia, Y. (2014) Normalization in Translation: Corpus-based Diachronic Research into Twentieth-century English–Chinese Fictional Translation. Newcastle: Cambridge Scholars Publishing. " }, { "title": "隐喻的世界：浅谈语言对思维的反向塑造", "url": "/sinantang.github.io/pr-7/posts/metaphor-and-how-language-reshapes-our-mind/", "categories": "Linguistics", "tags": "reading, philosophy, Linguistics", "date": "2017-02-26 00:00:00 +0100", "content": "「我们讲的语言并不单纯是思维的产物，我们的思维反过来会被语言所影响、塑造。」这并不是个新鲜的观点。 早在乔治奥威尔所写的反乌托邦政治小说《1984》中，就存在通过创造一种语言——新语Newspeak——来限制言论多样性乃至扼杀自由思想的举措。通过限制使用某些敏感词或刻意引导舆论方向来影响公众的思想，这是从古至今全世界的政治家都了然于心、并熟练运用的操纵技巧。 但不久前热映的一部电影《降临》又重新拉开了很多人对“语言反向塑造思维”的讨论。《降临》中的女主角通过学习外星人的语言，从而获得了预知未来的超能力。认真地讲，这属于对认知语言学（Cognitive Linguistics）理论的错误应用——虽然理论上确实可以把过去、现在与未来的事都编写进文字里去，但预知未来这件事本身与语言基本无关。不过，语言能够反向塑造思维、会影响我们对这个世界的认知这件事，还真的值得好好聊一聊。 说到认知语言学，这里就不得不提隐喻了。隐喻（metaphor）为认知语言学的诞生提供了术语体系，可以说是后者的“高阶模型”。通过了解隐喻，尤其是神奇却不神秘的概念隐喻（conceptual metaphor），任何人都可以以科学的姿势，从中一窥人类语言的强大力量。 . 中文中常说的“比喻”在英语中具体分成了两类：隐喻（metaphor，也称暗喻）与明喻（simile）。两者的区别在于，隐喻中不会出现“xx像xx”这个明喻结构的标志。在我们的通常印象里，不管隐喻还是明喻，它们总是和修辞、写作、优美文风联系在一起。但存在着这样一大类的隐喻，它们与修辞无关，却与我们的日常生活紧密相连，甚至影响塑造了每一个人认识、理解这个世界的方式。这类隐喻就是概念隐喻（conceptual metaphor）。 隐喻的目的是“用A来理解B”，比如这句，「女人心，海底针」——针（A）谁都知道是什么，女人的心（B）却相对来说更难描述、理解；隐喻就是利用易于理解的事物来帮助我们理解新的、复杂的事物。再推广到概念隐喻——我们也能猜到了——在概念隐喻中，需要被理解的B是一个个“基础概念”（concepts），而非具体的事物。我们每个人都借由了数量众多的概念隐喻才能做到快速理解周围环境和社会，但绝大部分的概念隐喻都隐藏在厚厚的思维幕布后面，不为人所察觉。 举个例子，“情绪”这个不好描述的抽象概念常常被我们以在空间上定位的方式来理解。情绪有高有低，我们会兴高采烈，会精神昂扬，会陷入低谷，会低落消沉——谁都能轻易理解这里的「高」对应着开心、积极的情绪，「低」则对应着难过、消极的情绪。可是细想一下，“情绪”这个抽象概念本身真的存在于空间维度上吗？「快乐是高的，难过是低的」——这便是一个典型的概念隐喻。那为什么最初我们的语言中是「高」与快乐产生联系而不是「低」呢？原因倒是很好猜测：人在情绪好的时候身体往往是挺直向上的，在情绪差的时候身体往往是勾背耷拉的；所以用「高」来隐喻快乐、用「低」来隐喻难过，是非常合理且易于理解的。 . 人类对空间的感知是一种本能，从自己所在的位置去延伸理解周围环境，「前后、左右、上下、高低」，这些都是扎根在我们最底层意识中的认知。由于我们对空间的认知无比地基础、本能、常见，所以空间定位渗透到了许许多多基础抽象概念的理解中。上面的“情绪”概念就是一例。自然还存在着比“情绪”更加抽象更难描述的概念，“时间”就是其中一个重要的例子。 时间既不可见也无法触摸，在钟表发明前，人类甚至还无法准确测量时间的单位；时间是单向的、持续的、无法逆转的；我们不能直接观察到时间，但却能看到时间留下的痕迹——春去秋来，人会衰老死亡，果实落在土里会腐烂消失。那我们究竟是如何来理解这抽象的时间的呢？这个疑问从与时间有关的语言表述中就可以略知一二：上周，后天，几年前，下个月……我们又是在用空间维度来描述时间！这便是有名的时间-空间隐喻（spacio-temporal metaphors）。 时间-空间隐喻广泛存在于不同语言中，但并不是以完全相同的方式出现的。比如，英文中主要使用横向的「前/后」来描述时间：good timesaheadof us, move meetingsforward, have main dishesbeforedessert, etc.；而中文里则并不仅限于横向（比如，“前无古人，后无来者”），纵向的时间描述「上/下」也非常常见：上*周，下个月，上个学期*。那这种不同的时间-空间隐喻类型、会反过来影响讲不同母语的人对时间/空间的认知吗？曾有认知心理学家（Boroditski, 2001）做过这样有趣的实验： 召集两组被试，一组是英语母语者，一组是中文母语、长大后才学了英语的双语者； 每个参与者先在电脑屏幕上看到一张图片，再接着判断一句关于时间的描述是否正确； 图片只有两类，一类是像下面图1这样用两个横向物体表示先后顺序，另一类则是像图2这样用纵向来表示先后顺序； 一次实验中，参与者看过一张图片后，会接着看到这样一句话“March comes earlier than April.”，然后需要马上判断这句话的真假。 每个参与者都会多次重复以上步骤； 最后收集每人每次实验的判断反应时间（判断越快，反应时间越短）。 图1：“黑虫子在白虫子前面” 图2：“黑球在白球上面” 实验结果发现，英语母语者在看到横向排列的图片后，判断时间更短；而中文母语者相反，在看到纵向排列的图片后，判断时间更短。这也就是说，讲英语的人更倾向于把时间的早晚顺序想象成空间中横向的「前/后」，而讲中文的人则倾向于把时间的早晚顺序想象成空间中纵向的「上/下」。实验是在英文环境中进行的，这更说明了对于母语中文的人来说，即便是嘴上在“说英文”，脑子里却还是在“想中文”。 . 这个实验充分证明了不同的语言表达习惯确实在影响我们的思维方式与思维偏好。特别是对于抽象概念的认知，我们很大程度上是依赖于概念隐喻来理解的，而概念隐喻不仅存在于语言中，更存在于我们的思维方式中。 上面描述的时间描述实验，其实还有下半部分。研究者还进一步通过实验证明了，即便是英语母语的人也可以通过训练来形成“纵向”理解时间的思维方式。这说明思维方式当然不是永远一成不变的啦！通过细心观察一种语言，可以一窥讲那语言的人的思维方式；通过改变语言的表达内容与方式，可以反向塑造人的思维方式。 . 这也是我们平时应该认真对待自己所言所书的最重要原因吧——我们所说的话最先影响的是我们自己呢。 . . References: Boroditsky, L. (2001) Does language shape thought? Mandarin and English speakers’ conception of time.Cognitive Psychology, 43: pp.1-22. Lakoff, G &amp; Johnson, M. (1980)Metaphors We Live By. Chicago &amp; London: The University of Chicago Press. " } ]
